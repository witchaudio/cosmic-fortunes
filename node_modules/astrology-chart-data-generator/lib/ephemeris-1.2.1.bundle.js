!(function (e, t) {
  "object" == typeof exports && "object" == typeof module
    ? (module.exports = t())
    : "function" == typeof define && define.amd
    ? define([], t)
    : "object" == typeof exports
    ? (exports.Ephemeris = t())
    : (e.Ephemeris = t());
})(this, function () {
  return (function (e) {
    var t = {};
    function n(i) {
      if (t[i]) return t[i].exports;
      var a = (t[i] = { i: i, l: !1, exports: {} });
      return e[i].call(a.exports, a, a.exports, n), (a.l = !0), a.exports;
    }
    return (
      (n.m = e),
      (n.c = t),
      (n.d = function (e, t, i) {
        n.o(e, t) || Object.defineProperty(e, t, { enumerable: !0, get: i });
      }),
      (n.r = function (e) {
        "undefined" != typeof Symbol &&
          Symbol.toStringTag &&
          Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }),
          Object.defineProperty(e, "__esModule", { value: !0 });
      }),
      (n.t = function (e, t) {
        if ((1 & t && (e = n(e)), 8 & t)) return e;
        if (4 & t && "object" == typeof e && e && e.__esModule) return e;
        var i = Object.create(null);
        if (
          (n.r(i),
          Object.defineProperty(i, "default", { enumerable: !0, value: e }),
          2 & t && "string" != typeof e)
        )
          for (var a in e)
            n.d(
              i,
              a,
              function (t) {
                return e[t];
              }.bind(null, a)
            );
        return i;
      }),
      (n.n = function (e) {
        var t =
          e && e.__esModule
            ? function () {
                return e.default;
              }
            : function () {
                return e;
              };
        return n.d(t, "a", t), t;
      }),
      (n.o = function (e, t) {
        return Object.prototype.hasOwnProperty.call(e, t);
      }),
      (n.p = ""),
      n((n.s = 0))
    );
  })([
    function (e, t, n) {
      "use strict";
      n.r(t);
      const i = 2451545,
        a = 2433282.423,
        o = 2415020,
        r = 12 / Math.PI,
        s = 0.017453292519943295,
        c = 57.29577951308232,
        l = 206264.80624709636,
        u = 484813681109536e-20,
        h = 2 * Math.PI,
        d = 298.257222,
        p = 149597870.691,
        m = 6378137,
        g = (0.001 * m) / p,
        f = [
          53810162868.8982, 21066413643.3548, 12959774228.3429, 6890507749.3988,
          1092566037.7991, 439960985.5372, 154248119.3933, 78655032.0744,
          52272245.1795,
        ],
        M = [
          908103.259872,
          655127.28306,
          361679.244588,
          1279558.798488,
          34.35151874 * 3600,
          50.0774443 * 3600,
          314.05500511 * 3600,
          1095655.195728,
          860492.1546,
        ],
        y = {
          hourTimeToDecimal: ({ hour: e = 0, minute: t = 0 } = {}) =>
            moment.duration(`${e}:${t}`).asHours(),
          mods3600: function (e) {
            return e - 1296e3 * Math.floor(e / 1296e3);
          },
          modtp: function (e) {
            var t;
            for (t = e - (t = Math.floor(e / h)) * h; t < 0; ) t += h;
            for (; t >= h; ) t -= h;
            return t;
          },
          mod360: function (e) {
            var t;
            for (t = e - 360 * Math.floor(e / 360); t < 0; ) t += 360;
            for (; t > 360; ) t -= 360;
            return t;
          },
          mod30: function (e) {
            var t;
            for (t = e - 30 * Math.floor(e / 30); t < 0; ) t += 30;
            for (; t > 30; ) t -= 30;
            return t;
          },
          zatan2: function (e, t) {
            var n, i;
            if (((i = 0), e < 0 && (i = 2), t < 0 && (i |= 1), 0 == e))
              return 1 & i ? 1.5 * Math.PI : 0 == t ? 0 : 0.5 * Math.PI;
            if (0 == t) return 2 & i ? Math.PI : 0;
            switch (i) {
              default:
              case 0:
                n = 0;
                break;
              case 1:
                n = 2 * Math.PI;
                break;
              case 2:
              case 3:
                n = Math.PI;
            }
            return n + Math.atan(t / e);
          },
          sinh: function (e) {
            return (Math.exp(e) - Math.exp(-e)) / 2;
          },
          cosh: function (e) {
            return (Math.exp(e) + Math.exp(-e)) / 2;
          },
          tanh: function (e) {
            return (Math.exp(e) - Math.exp(-e)) / (Math.exp(e) + Math.exp(-e));
          },
          hms: function (e) {
            var t,
              n,
              i,
              a,
              o,
              s = {};
            return (
              (o = e * r) < 0 && (o += 24),
              (o -= t = Math.floor(o)),
              (o *= 60),
              (o -= n = Math.floor(o)),
              (o *= 60),
              (a = Math.floor(1e3 * o + 0.5)) >= 6e4 &&
                ((a -= 6e4), (n += 1) >= 60 && ((n -= 60), (t += 1))),
              (i = Math.floor(a / 1e3)),
              (a -= Math.floor(1e3 * i)),
              (s.hours = t),
              (s.minutes = n),
              (s.seconds = i),
              (s.milliseconds = a),
              s
            );
          },
          dms: function (e) {
            var t,
              n,
              i,
              a = {};
            return (
              (t = e * c) < 0 && (t = -t),
              (t -= n = Math.floor(t)),
              (t *= 60),
              (t -= i = Math.floor(t)),
              (t *= 60),
              (a.degree = n),
              (a.minutes = i),
              (a.seconds = t),
              a
            );
          },
          showcor: function (e, t, n) {
            var i,
              a,
              o = [];
            for (i = 0; i < 3; i++) o[i] = e[i] + t[i];
            return (
              (a = y.deltap(e, o)),
              ((n = n || {}).dRA = (l * a.dr) / 15),
              (n.dDec = l * a.dd),
              n
            );
          },
          showrd: (e, t, n) => {
            var i, a, o, r;
            for (o = 0, r = 0; r < 3; r++) o += (i = e[r]) * i;
            return (
              (o = Math.sqrt(o)),
              (i = y.zatan2(e[0], e[1])),
              (t[0] = i),
              (a = Math.asin(e[2] / o)),
              (t[1] = a),
              (t[2] = o),
              (n = n || {}),
              (n = { ...n, dRA: i, dDec: a, ra: y.hms(i), dec: y.dms(a) })
            );
          },
          deltap: function (e, t, n) {
            var i,
              a,
              o,
              r,
              s,
              c,
              l,
              u,
              h = [];
            for (n = n || {}, o = 0, r = 0, l = 0, u = 0; u < 3; u++)
              (o += (s = e[u]) * s),
                (r += (c = t[u]) * c),
                (c -= s),
                (h[u] = c),
                (l += c * c);
            if (
              ((i = Math.sqrt(o)),
              (a = Math.sqrt(r)),
              i < 1e-7 || a < 1e-7 || l / (o + r) > 5e-7)
            ) {
              for (
                o = y.zatan2(e[0], e[1]), r = y.zatan2(t[0], t[1]), r -= o;
                r < -Math.PI;

              )
                r += 2 * Math.PI;
              for (; r > Math.PI; ) r -= 2 * Math.PI;
              return (
                (n.dr = r),
                (o = Math.asin(e[2] / i)),
                (r = Math.asin(t[2] / a)),
                (n.dd = r - o),
                n
              );
            }
            return (
              (s = e[0]),
              (c = e[1]),
              0 == s
                ? (n.dr = 1e38)
                : ((r = c / s),
                  (r = (h[1] - (h[0] * c) / s) / (s * (1 + r * r))),
                  (n.dr = r)),
              (s = e[2] / i),
              (o = Math.sqrt(1 - s * s)),
              (n.dd = (t[2] / a - s) / o),
              n
            );
          },
          angles: function (e, t, n, i) {
            var a, o, r, s;
            for (
              i.locals.EO = 0,
                i.locals.SE = 0,
                i.locals.SO = 0,
                i.locals.pq = 0,
                i.locals.ep = 0,
                i.locals.qe = 0,
                s = 0;
              s < 3;
              s++
            )
              (a = n[s]),
                (o = t[s]),
                (r = e[s]),
                (i.locals.EO += r * r),
                (i.locals.SE += a * a),
                (i.locals.SO += o * o),
                (i.locals.pq += r * o),
                (i.locals.ep += a * r),
                (i.locals.qe += o * a);
            return (
              (i.locals.EO = Math.sqrt(i.locals.EO)),
              (i.locals.SO = Math.sqrt(i.locals.SO)),
              (i.locals.SE = Math.sqrt(i.locals.SE)),
              i.locals.SO > 1e-12 &&
                ((i.locals.pq /= i.locals.EO * i.locals.SO),
                (i.locals.qe /= i.locals.SO * i.locals.SE)),
              (i.locals.ep /= i.locals.SE * i.locals.EO),
              i
            );
          },
          isInModSetRange: ({
            setPoint: e = 0,
            halfRangeLength: t = 0,
            setMin: n = 0,
            setMax: i = 1,
            number: a = 0,
          } = {}) => {
            let o = e - t,
              r = e + t - i;
            return (
              o < n
                ? ((e -= o), (a = (a - o) % i))
                : r > n && ((e -= r), (a = (i + a - r) % i)),
              a >= e - t && a < e + t
            );
          },
          mod: (e, t) => ((e % t) + t) % t,
          timeInJulianCenturies: (e) => (e - i) / 36525,
          decimalDegreesToDMSString: (e) => {
            let t = Math.floor(e),
              n = 60 * (e - t),
              i = Math.floor(n),
              a = 60 * (n - i),
              o = Math.round(a);
            return (
              60 === o && (i++, (o = 0)),
              60 === i && (t++, (i = 0)),
              t + "Â°" + i + "'" + Math.floor(o) + '"'
            );
          },
          attachApparentLongitudes: (e, t) => (
            (e.apparentLongitude = t),
            (e.apparentLongitudeString = y.decimalDegreesToDMSString(
              e.apparentLongitude
            )),
            (e.apparentLongitude30String = y.decimalDegreesToDMSString(
              y.mod(e.apparentLongitude, 30)
            )),
            e
          ),
          getModuloDifference: (e, t, n) => {
            const i = n / 2;
            return i - Math.abs(Math.abs(e - t) - i);
          },
          correctRealModuloNumber: (e, t, n, i) =>
            t >= n || t + i - n === e ? e : -e,
          cloneUTCDate: (e) =>
            new Date(
              Date.UTC(
                e.getUTCFullYear(),
                e.getUTCMonth(),
                e.getUTCDate(),
                e.getUTCHours(),
                e.getUTCMinutes(),
                e.getUTCSeconds()
              )
            ),
        },
        v = {
          maxargs: 14,
          max_harmonic: [
            3, 26, 29, 23, 5, 10, 0, 0, 0, 8, 4, 4, 6, 2, 0, 0, 0, 0,
          ],
          max_power_of_t: 3,
          distance: 0.00257356868953,
          timescale: 3652500,
          trunclvl: 1e-4,
          lon_tbl: [
            175667, 66453, 5249, -42, 20057, 403, -2360, 6148, -7644, 24646,
            -1273, 9127, -1395, 1958, 232, -289, -97, 553, 69, 130, -80, 6, 129,
            -868, 26, -89, 1042, 1172, 194, -112, -47433, -241666, 224626,
            -103752, 63419, 127606, 2294, -691, -1827, -1254, -1, -119, 1057,
            324, 505, -195, 254, -641, -36, 1008, -1082, -3, -87, 122, 161, 11,
            2, -106, 29, -123, -32, 41, -524, -35, 133, -595, 225, 837, -108,
            -191, -2294, 841, -340, -394, -351, -1039, 238, -108, -66, 21, 1405,
            869, 520, 2776, -174, 71, 425, 652, -1260, -80, 249, 77, -192, -17,
            -97, 134, -7, -54, -802, -7436, -2824, 70869, -35, 2481, 1865, 1749,
            -2166, 2415, 33, -183, -835, 283, 27, -45, 56, 235, 2, 718, -1206,
            275, -87, -158, -7, -2534, 0, 10774, 1, -324, -208, 821, 281, 1340,
            -797, 440, 224, 72, -65, -5, -7, -44, -48, 66, -151, -40, -41, -45,
            76, -108, -18, 1202, 0, -2501, 1438, -595, 900, 3040, -3435, -5,
            -100, -26, 0, -13714, -183, 68, 453, -83, -228, 325, 97, 13, 2, 105,
            -61, 257, 0, 57, 88, -11, -1, -8220, 0, 275, -43, -10, -199, 105, 1,
            -5849, 2, 24887, -128, 48, 712, 970, -1407, 845, -266, 378, 311,
            1526, -1751, 27, 0, -185858, 133, 6383, -108, 25, -7, 1944, 5, 390,
            -11, 31, 277, -384, 158, 72, -81, -41, -13, -111, -2332, -65804,
            -698, 505812, 34, 1676716, -72, -6664384, 154, -57, 52, 95, -4, -5,
            -7, 37, -63, -32, 4, 3349, 1, -14370, 16, -83, 0, -401, 13, 3013,
            48, -20, 0, 250, 51, -79, -7, -146, 148, 9, 0, -64, -17, -59, -67,
            -492, -2, 2116601, -12, -1848, 8, -436, -6, 324, 0, -1363, -163, 9,
            0, -74, 63, 8167, -29, 37587, -22, -74501, -71, 497, -1, 551747,
            -87, -22, 0, -51, -1, -463, 0, -444, 3, 89, 15, -84, -36, -6829, -5,
            -21663, 0, 86058, 0, -298, -2, 751, -2, -1015, 0, 69, 1, -4989, 0,
            21458, 0, -330, 0, -7, 0, -226, 0, -1407, 0, 2942, 0, 66, 0, 667, 0,
            -155, 0, 105, 0, -107, 0, -74, 0, -52, 0, 91, 0, 59, 0, 235, -1,
            -1819, 0, 2470, 71, 13, 0, 1026, 14, -54, 0, -174, -121, -19, 0,
            -200, 0, 3008, -16, -8043, -10, -37136, -3, 73724, -157, -5, 0,
            -854, 8, 147, -13, -893, 0, 11869, -23, -172, 89, 14, -1, 872, 0,
            -3744, 11, 1606, 0, -559, -1, -2530, 0, 454, 0, -193, -60, -10, -82,
            -13, -75, 6, 36, 81, 354, -162836, 148, -516569, 4, 2054441, 4, -94,
            39, 38, 61, -30, 2, 121, -11, 590, 62, 2108, 0, -12242, -476, -42,
            -84, 113, -394, 236, 0, 276, -49, 31, 0, 86, 1, -1313, 1, 69, -60,
            88, -46, 18, 0, -63818, 14, -93, 113, 547, -618, 17, -7, 12290, -1,
            -25679, 0, 92, -115, 50, -48, 233, 4, 1311, 1, -5567, 3, 1251, 29,
            548, -244, 257, -2, 1825, 42, 637, -46, 68, -62, 8, 3, 110, 445,
            -100, -316, -202, 2925, -621, 763, 1495, -169, -184, 20, -76, -475,
            -138, 8, -141, -197, 1351, -1284, 422, -129, 1879, -102, 8382, -9,
            45864958, -215, 1350, -1285, 422, -481, -136, 8, -140, 40, -53,
            2622, -543, 700, 1406, 402, -95, -318, -194, 122, 13, -30, 147,
            -121, -902, 61, -23, -63, 7, 69, 479, -224, 228, -7, 500, 0, -429,
            -42, 193, -92, 37, 67, 5, -350, -31, 0, 67, -55, -5, 0, 47, -36, 53,
            5, 561, 0, -126, 0, 871, -52, 4, -201, 116922, -22, 371352, -12,
            -1473285, 0, 87, -164, 84, -3, 422, 30, 1434, -26, 38, 2, -1249943,
            -404, -34, -57, 79, 5, 509, 1, 131, -344, 168, 112, 22540, 30,
            71218, 18, -283983, 0, -851, 0, -1538, 0, 1360, -12, 51, -48, 68,
            88, -20, 1, 63, 0, -568, 303, 25, 0, -122, 87, 586, -606, -14, 0,
            -100, -85, 8, -165, 54, -45, 140, 0, -54, 4, -831, 1, 3495, 31, 116,
            -46, -11, -371, 190, -507, 399, -2, 57, -60, 36, -198, -1174, -613,
            4988, -87, -4, 141, 560, -276, 187, 1876, 1379, 778, 4386, 24, -15,
            167, -774, -71, -9, -62, 90, 98, 580, -663, -7, 34, -112, 57, 15,
            -355, -214, -3240, -13605, 12229, -5723, 3496, 7063, 33, -51, 1908,
            1160, -226, 715, 964, 1170, -1264, 623, 14071, 5280, 5614, 3026,
            488, 1576, -2, 226395859, 824, 1106, -1287, 617, 1917, 1156, -214,
            718, 90, -97, 12078, -2366, 3282, 6668, -219, 9179, 593, 2015, -282,
            -186, 57, 25, 31, -102, -77, -4, -268, -341, -7, -45, -3, 74, 15,
            -615, -88, -7, 234, -353, 1, -119, -163, -1159, -601, 4969, 22, -58,
            -17, -11434, 17, 54, 348, 348, -460, 434, -371, 175, -11, -204, 4,
            -6440, -5, -53, -4, -14388, -37, -45231, -7, 179562, -44, 136, -160,
            49, -101, 81, -1, -188, 0, 2, -4, 12124, -11, -25217, 71, 543, -557,
            -14, -75, 526, 0, 395274, -233, -16, 93, -20, -43, 61, 0, -1275, 0,
            -824, 1, -415, 0, 1762, -261, 131, -45, 64, -297, -25, 0, -17533,
            -6, -56, 21, 1100, 1, 327, 1, 66, 23, -217, -83, -7, 83, 86847, 49,
            275754, -4, -1093857, -46, 2, 0, -24, 0, -419, 0, -5833, 1, 506, 0,
            -827, -1, -377, -11, -78, 0, 131945, -2, -334, 1, -75, 0, -72, 0,
            -213, -6, 5564, -2, -11618, 0, 1790, 0, -131, 0, 6, 0, -76, 0, -130,
            0, -1115, 0, 4783, 0, -195, 0, -627, 0, -55, 0, -83, 0, 163, 0, -54,
            0, 82, 0, 149, 0, -754, 0, 1578, 0, 138, 0, 68, 2, -2506, 0, 3399,
            0, -125, 86, 16, 0, -6350, 0, 27316, 18, -63, 0, -169, -1, 46, -136,
            -21, 0, -239, -30, -8788, -15, -40549, -4, 80514, -46, -8, -168, -6,
            -1, 536, 0, -2314, 9, 148, -13, -842, -1, 307713, -23, -175, 95, 15,
            0, -297, 11, 1341, 0, -106, 0, 5, -4, 68, -114, 10, 32, 75, 159,
            -130487, 98, -413967, 2, 1647339, -4, -85, 100, -46, 2, 95, -11,
            461, 51, 1647, 0, -32090, -375, -33, -65, 86, -300, 180, 0, 836, 0,
            -3576, 0, -222, 0, -993, -41, 60, 0, -4537, -431, -34, 2, 927, 0,
            -1931, -79, 33, -31, 144, -1, 284, 0, -1207, 0, 88, -11, 315, -178,
            177, -1, 144, -58, 986, 11, 86, -228, -110, 2636, -494, 718, 1474,
            28, -35, -24, 782, -797, 277, 2142, -1231, 856, 1853, 74, 10797, 0,
            23699298, -21, 786, -796, 277, 27, -34, 2615, -494, 712, 1461, -226,
            -109, -11, 663, 0, -123, -169, 157, -54, 266, 0, -76, 1, -634, 0,
            2738, -25, 106, -63, 24, 0, -372, -221, -24, 0, -5356, 0, -219, 0,
            91, -28, 7684, -6, 24391, -1, -96795, -77, 43, 2, 95, -47, -3, 0,
            -84530, 2, 310, 1, 88, 111, 19331, 32, 61306, 4, -243595, 0, 770, 0,
            -103, 0, 160, 0, 356, 0, 236, -41, 354, 39, 303, 12, -56, 873, -143,
            238, 482, -28, 35, -93, 31, -3, 7690211, -91, 33, -34, 43, 824,
            -130, 226, 450, -39, 341, -1, -687, 0, -303, 11, -2935, 1, 12618,
            121, 924, 9, -1836, -268, -1144, -678, 3685, -69, -261, 0, -4115951,
            -69, -261, 5, -151, 0, -88, 0, 91, 0, 187, 0, -1281, 1, 77, 1, 6059,
            3, 19238, 0, -76305, 0, -90, 0, -238, 0, -962, 0, 4133, 0, 96, 0,
            9483, 0, 85, 0, -688, 0, -5607, 0, 55, 0, -752, 0, 71, 0, 303, 0,
            -288, 0, 57, 0, 45, 0, 189, 0, 401, 0, -1474, 0, 3087, 0, -71, 0,
            2925, 0, -75, 0, 359, 0, 55, 1, -10155, 0, 43735, 0, -572, 0, -49,
            0, -660, 0, -3591, 0, 7516, 0, 668, -1, -53, -2, 384259, 0, -163, 0,
            -93, 1, 112, -95, -11528, -22, -36505, -1, 145308, 5, 145, 0, 4047,
            1, 1483, 0, -6352, 0, 991, 0, -4262, 0, -93, 0, -334, 0, -160, 0,
            -153, -10, 127, 51, 185, -77, 18, 56, 1217, 6, 1919574, -74, 17, 50,
            180, -5, 93, 0, -104, 0, -58, -3, -353, -1, 1499, 0, -229, -15, 86,
            0, -93657, 0, 1561, 0, -6693, 0, -5839, 1, 6791, 0, -29143, 1, -701,
            0, 3015, 0, 2543, 0, 693, -1, 361233, 0, -50, 0, 946, -1, -140, -70,
            407, 0, -450995, 0, -368, 0, 54, 0, -802, 0, -96, 0, 1274, 0, -5459,
            0, -614, 0, 2633, 0, 685, 0, -915, 0, -85, 0, 88, 0, 106, 0, 928, 0,
            -726, 0, 1523, 0, 5715, 0, -4338, 0, 18706, 0, -135, 0, -132, 0,
            -158, 0, -98, 0, 680, -1, 138968, 0, -192, 0, -1698, 0, -2734, 0,
            11769, 0, 4, 0, 673, 0, -2891, 0, 889, 0, -3821, 0, 121, -1, 143783,
            0, 231, -9, 51, 0, -57413, 0, -483, 0, -407, 0, 676, 0, -2902, 0,
            531, 0, 445, 0, 672, 0, 19336, 0, 70, 0, -39976, 0, -68, 0, 4203, 0,
            -406, 0, 446, 0, -108, 0, 79, 0, 84, 0, 734, 0, 255, 0, 3944, 0,
            -655, 0, 2825, 0, -109, 0, -234, 0, 57, 0, 19773, 0, -2013, 0, 958,
            0, -521, 0, -757, 0, 10594, 0, -9901, 0, 199, 0, -275, 0, 64, 0, 54,
            0, 165, 0, 1110, 0, -3286, 0, 909, 0, 54, 0, 87, 0, 258, 0, 1261, 0,
            -51, 0, 336, 0, -114, 0, 2185, 0, -850, 0, 75, 0, -69, 0, -103, 0,
            776, 0, -1238, 0, 137, 0, 67, 0, -260, 0, 130, 0, 49, 0, 228, 0,
            215, 0, -178, 0, 57, 0, -133,
          ],
          lat_tbl: [],
          rad_tbl: [
            -5422, -2120, 1077, 772, 39, 75, 3, 10, -468, -326, -113, -78, -4,
            -2, 1, 3, 29, 24, 4, 2, 1, 0, -9, 7, -2, 0, -32, -13, -3, -3, 233,
            126, 89, 77, -33, 16, 3, -3, 0, -1, 2, 0, 0, 1, 4, 9, 1, 1, 16, -1,
            0, 18, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -22, -5, 10, 3, 1, 1,
            -15, 7, -2, 1, -8, -11, -1, -2, -1, 1, 46, -58, 126, -23, 4, 8, 35,
            8, 10, -17, 0, 0, 0, 0, -10, -7, 0, 0, -23, 3, 151, 10, -327, 0, 4,
            -5, 6, 5, 1, 0, -1, -3, 0, 0, 0, 1, -185, 0, -3, -24, -5, -2, -1062,
            3, 4560, 0, -3, 0, 4, 1, 8, -1, 2, 4, 0, 1, 0, -1, 0, 0, -1, 0, 0,
            1, 0, 0, -1, -1, 277, 3, -583, 1, -1, 4, -32, 7, 0, -34, 1, -1,
            -23685, 0, -1, -2, -1, -7, -5, -4, 0, 2, -2, 0, -5, -1, 35, 0, 0, 2,
            202, 0, 180, 0, 0, -1, -3, -6, -193, 0, 770, -1, -2, -4, -32, 23,
            -28, -46, -13, -9, -54, 10, -1, -61, -44895, 0, -230, 5, -1, -4,
            -71, 0, -15, 0, 1, 0, 15, 11, -3, 6, 2, -3, 4, -1, 2576, -138,
            -19881, -47, -65906, -1, 261925, -4, -2, -7, 4, -2, 0, 0, -1, 0, 1,
            -3, 172, -2, -727, 0, 4, 1, 324, 0, -139, 1, 1, 3, -276, 0, 5, 3, 9,
            0, -1, 10, -37, 0, 5, -1, 76, -10, 1318810, 1, 12, -1, -38, 1, -141,
            0, 611, 0, 0, -11, 4, 0, -627, 2, -2882, -3, 5711, -2, -48, -7,
            55294, 0, 2, -7, 31, 0, 34, 0, -259, 0, -55, 2, 6, 3, -4273, 20,
            -13554, 3, 53878, 0, -46, 0, -85, 0, 114, 0, -45, 0, -818, 0, 3520,
            0, 34, 0, -157, 0, 29, 0, -878, 0, 1838, 0, -428, 0, 161, 0, 24, 0,
            65, 0, 19, 0, 15, 0, 12, 0, -26, 0, -14, 0, -149, 0, 584, 0, -793,
            0, 4, -23, -238, 0, -18, -5, 45, 0, -7, 42, 79, 0, -1723, 0, 2895,
            -6, 13362, -4, -26525, -1, -2, 57, 291, 0, 52, -3, -327, 5, -2755,
            0, -63, 9, 5, -33, -261, -1, 1122, 0, 621, -4, -227, 0, 1077, 0,
            -167, 0, 85, 0, -4, 23, -5, 32, 3, 30, -32, 14, 64607, 141, 204958,
            59, -815115, 2, -37, -1, 15, -15, 12, 24, 48, -1, 235, 4, 843, -25,
            4621, 0, -17, 191, 45, 34, 95, 159, -132, 0, 13, 20, 32, 0, -540, 0,
            29, 0, 37, 25, 8, 19, 22127, 0, -35, -5, 232, -48, 7, 262, 5428, 3,
            -11342, 1, -45, 0, -21, -49, -100, -21, -626, 1, 2665, 0, 532, -2,
            235, -12, -111, -105, 774, 1, -283, 17, 29, 20, 3, 27, 47, -2, -43,
            -192, -87, 136, -269, -1264, 646, -330, -79, 73, -33, -9, 60, -205,
            61, 4, -584, -85, -182, -555, -780, -57, -3488, -45, -19818328, -4,
            583, 93, 182, 555, -59, 208, -60, -4, 23, 17, 235, 1133, -608, 302,
            41, 174, 84, -137, 6, -53, 63, 13, -392, 52, -10, -27, -3, -27, 199,
            -31, 99, 97, -218, -3, 209, 0, 84, 18, 16, 40, 2, -30, 14, -154, 30,
            0, -2, 24, -108, 0, -24, -16, 262, -2, 55, 0, -304, 0, 2, 25, 55112,
            95, 175036, 11, -694477, 5, 41, 0, -38, -76, 199, 1, 679, -14, -17,
            -12, 582619, 1, -16, 191, 38, 27, -234, 2, -60, 0, 80, 163, -10296,
            48, -32526, 13, 129703, 8, -1366, 0, -741, 0, -646, 0, 25, 6, 33,
            23, 10, 43, -31, 0, -6, 0, -12, 147, 59, 0, 287, -42, -7, 297, -59,
            0, -4, -42, -27, -81, -69, -22, 27, 0, -423, -2, 1779, -1, -57, 15,
            5, -23, 94, 182, -197, -250, 24, 1, -18, -30, 581, -98, -2473, -303,
            -2, 43, -277, 70, -92, -136, -681, 925, -2165, 384, -8, -12, 382,
            82, -4, 35, -45, -31, -286, 48, 3, -328, -55, -17, 8, -28, -106,
            175, -6735, 1601, -2832, -6052, 3495, -1730, -25, -17, -574, 944,
            -354, -112, -579, 476, -308, -625, -2411, 7074, -1529, 2828, -1335,
            247, -112000844, -1, 545, -409, 305, 637, 572, -950, 356, 106, 48,
            44, 1170, 5974, -3298, 1624, -4538, -106, -996, 294, 92, -139, -12,
            28, 50, 16, 2, -38, 169, -133, 22, -3, 38, 1, 305, 7, 4, -44, 175,
            116, 59, 1, -573, 81, 2453, 297, 29, 11, 5674, -8, -27, 9, 173,
            -173, 215, 228, -87, -184, 102, -5, 3206, 2, -53, 2, 7159, -7,
            22505, -19, -89344, -3, 67, 22, 24, 79, -40, -50, 94, 0, 186, 0,
            -6063, 0, 12612, -5, -271, 35, 7, -278, -479, -74, 426754, 0, 8,
            -116, -10, -47, -31, -22, 645, 0, 426, 0, -213, 0, 903, 0, -67,
            -133, -33, -23, 13, -152, -9316, 0, 29, -3, -564, 11, -167, 0, -34,
            0, 114, 12, 4, -44, -44561, 42, -141493, 25, 561256, -2, -1, -24,
            -261, 0, 211, 0, -4263, 0, -262, 1, 1842, 0, 202, 0, 41, -6, 77165,
            0, 176, -1, 39, 1, -24, 0, 118, 0, -2991, -4, 6245, -1, 46886, 0,
            -75, 0, -100, 0, 40, 0, 75, 0, -618, 0, 2652, 0, 112, 0, 1780, 0,
            30, 0, 49, 0, 86, 0, 33, 0, -30, 0, -95, 0, 277, 0, -580, 0, -35, 0,
            -319, 0, 1622, 1, -2201, 0, 79, 0, 10, -57, 2363, 0, -10162, 0, -41,
            -12, 62, 0, 30, 1, -14, 89, -2721, 0, 5780, -19, 26674, -10, -52964,
            -2, -5, 30, -4, 111, -317, -1, 1369, 0, 93, -6, -564, 9, -115913, 0,
            -113, 15, 10, -62, 99, 0, 891, -7, 36, 0, 108, 0, -42, -2, 7, 75,
            -50, 21, 86822, 104, 275441, 65, -1096109, 1, -56, 3, 31, 66, 63,
            -1, 307, 7, 1097, -34, 17453, 0, -22, 250, 57, 43, 120, 200, -297,
            0, 1269, 0, 166, 0, -662, 0, 40, 28, 1521, 0, -23, 288, 351, -2,
            -729, 0, -22, -52, -96, -21, -139, -1, 589, 0, 35, 0, 210, 7, -118,
            -119, 62, 0, -583, -26, -42, 5, -73, 152, -330, -1759, 983, -479,
            -23, -19, -522, -15, -185, -533, 739, 1559, -1300, 614, -7332, 52,
            -15836758, 0, 524, 16, 185, 532, 23, 18, 330, 1751, -978, 476, 73,
            -151, 519, 18, 38, 0, 105, 113, -178, -37, 26, 0, 262, 1, -1139, 0,
            71, 17, 16, 42, 151, 0, 16, -148, 4147, 0, 149, 0, -30, 0, 2980, 9,
            9454, 2, -37519, 0, -28, -49, 37, -1, 2, -31, 33870, 0, -208, 1,
            -59, 1, -13105, 68, -41564, 21, 165148, 3, -1022, 0, -40, 0, -132,
            0, -228, 0, 95, 0, -138, -16, -126, 16, 24, 5, -57, -346, 191, -94,
            -14, -11, -12, -37, -3053364, -1, 13, 36, 17, 13, 51, 327, -179, 90,
            138, 16, 233, 0, 62, 0, 1164, 0, -5e3, 0, -407, 117, 770, 9, -4, 1,
            21, 2, 1, 0, -16869, 0, -1, 0, 1, 0, 35, 0, -78, 0, 78, 0, -533, 0,
            -31, 1, -2448, -6, -7768, -1, 30812, 0, 37, 0, -227, 0, 197, 0,
            -846, 0, -77, 0, 4171, 0, -67, 0, 287, 0, 2532, 0, -19, 0, -40, 0,
            -56, 0, 128, 0, 83, 0, -45, 0, -36, 0, -92, 0, -134, 0, 714, 0,
            -1495, 0, 32, 0, -981, 0, 15, 0, -166, 0, -59, 0, 4923, 0, -21203,
            0, 246, 0, 15, 0, 104, 0, 1683, 0, -3523, 0, -865, 0, -25, 1,
            -186329, -1, 10, 0, 50, 0, 53, 0, 5455, -45, 17271, -10, -68747, 0,
            69, -2, -7604, 0, -724, 1, 3101, 0, -46, 0, 200, 0, -44, 0, 97, 0,
            -53, 0, 62, 0, -54, -4, 88, -24, -9, -36, -581, 27, -914711, 3, 8,
            35, -86, 24, 51, 3, 48, 0, 26, 0, 133, 1, -577, 0, 105, 0, -3, -1,
            3194, 0, 528, 0, -2263, 0, 2028, 0, -3266, 1, 14016, 0, 10, 0, -41,
            0, -100, 0, -32, 0, -124348, 0, 16, 0, -325, 0, 50, -1, 1, 0, -553,
            0, 0, 0, 0, 0, 2, 0, -34, 0, -444, 0, 1902, 0, 9, 0, -37, 0, 254, 0,
            156, 0, -2, 0, -35, 0, -48, 0, -368, 0, 327, 0, -686, 0, -2263, 0,
            1952, 0, -8418, 0, -13, 0, 52, 0, 9, 0, 21, 0, -261, 0, -62404, 0,
            0, 0, 79, 0, 1056, 0, -4547, 0, -351, 0, -305, 0, 1310, 0, -1, 0, 6,
            0, 0, 0, -55953, 0, -80, 0, 0, 0, 168, 0, -147, 0, 127, 0, -265, 0,
            1138, 0, -1, 0, -9, 0, -8, 0, -5984, 0, -22, 0, -5, 0, 0, 0, 0, 0,
            127, 0, -2, 0, 10, 0, -31, 0, -29, 0, -286, 0, -98, 0, -1535, 0,
            252, 0, -1087, 0, 43, 0, 4, 0, -19, 0, -7620, 0, 29, 0, -322, 0,
            203, 0, 0, 0, -3587, 0, 10, 0, 0, 0, 94, 0, 0, 0, -1, 0, -1, 0,
            -315, 0, 1, 0, 0, 0, 0, 0, -30, 0, -94, 0, -460, 0, 1, 0, -114, 0,
            0, 0, -746, 0, 4, 0, -23, 0, 24, 0, 0, 0, -237, 0, 1, 0, 0, 0, -18,
            0, 0, 0, 0, 0, -16, 0, -76, 0, -67, 0, 0, 0, -16, 0, 0, 0,
          ],
          arg_tbl: [
            0, 3, 3, 4, 3, -8, 4, 3, 5, 1, 2, 2, 5, -5, 6, 2, 5, -1, 10, 2, 13,
            -1, 11, 3, 3, -7, 4, 0, 3, 1, 13, -1, 11, 2, 5, 1, 2, 4, 5, -10, 6,
            0, 4, 2, 10, -2, 13, 14, 3, -23, 4, 1, 3, 3, 2, -7, 3, 4, 4, 1, 3,
            -1, 13, 18, 2, -16, 3, 2, 2, 8, 2, -13, 3, 1, 5, 2, 10, -2, 13, 2,
            3, -3, 5, 1, 6, 0, 3, -1, 13, 26, 2, -29, 3, 0, 3, 1, 10, -1, 11, 2,
            4, 1, 4, 1, 10, -1, 13, 3, 2, -4, 3, 1, 4, 1, 10, -1, 13, 3, 3, -4,
            4, 0, 3, -1, 10, 15, 2, -12, 3, 0, 4, 2, 10, -3, 13, 24, 2, -24, 3,
            0, 3, -1, 10, 23, 2, -25, 3, 0, 4, 1, 10, -1, 11, 1, 3, 1, 6, 0, 4,
            2, 10, -2, 11, 5, 2, -6, 3, 0, 4, 2, 10, -2, 13, 6, 2, -8, 3, 0, 4,
            -2, 10, 1, 13, 12, 2, -8, 3, 1, 5, -1, 10, 1, 13, -1, 11, 20, 2,
            -20, 3, 1, 4, -2, 10, 1, 13, 3, 1, -1, 3, 1, 5, 2, 10, -2, 13, 2, 3,
            -5, 5, 5, 6, 0, 4, 2, 10, -2, 13, 2, 3, -3, 5, 1, 4, 2, 10, -2, 13,
            6, 3, -8, 4, 0, 4, -2, 10, 1, 13, 20, 2, -21, 3, 1, 4, 1, 10, -1,
            11, 1, 3, 1, 5, 0, 1, 1, 6, 0, 4, 2, 10, -2, 13, 5, 3, -6, 4, 0, 3,
            3, 2, -5, 3, 2, 5, 0, 2, -1, 11, 1, 14, 1, 4, 2, 10, -2, 13, 2, 3,
            -2, 5, 0, 2, 1, 3, -2, 4, 1, 4, 1, 10, -1, 11, 5, 2, -7, 3, 0, 1, 1,
            5, 0, 2, 7, 3, -13, 4, 0, 4, -2, 10, 1, 13, 15, 2, -13, 3, 0, 4, 2,
            10, -2, 13, 3, 2, -3, 3, 0, 2, -2, 11, 2, 14, 1, 3, 1, 10, 1, 12,
            -1, 13, 1, 3, -1, 13, 21, 2, -21, 3, 0, 2, 3, 2, -5, 3, 0, 2, 2, 3,
            -4, 4, 1, 2, 5, 2, -8, 3, 0, 3, -1, 13, 23, 2, -24, 3, 0, 2, 6, 3,
            -11, 4, 0, 1, 2, 5, 0, 2, 3, 3, -6, 4, 0, 2, 5, 3, -9, 4, 0, 4, 1,
            10, -1, 11, 1, 3, -2, 5, 0, 3, 2, 10, 2, 12, -2, 13, 1, 2, 2, 2, -3,
            3, 2, 2, 4, 3, -7, 4, 0, 2, 2, 13, -2, 11, 0, 2, 3, 3, -5, 4, 0, 2,
            1, 2, -2, 3, 0, 2, 2, 3, -3, 4, 0, 4, 1, 10, -1, 11, 4, 2, -5, 3, 0,
            2, 1, 3, -1, 4, 0, 2, 4, 2, -6, 3, 0, 4, 2, 10, -2, 13, 2, 2, -2, 3,
            0, 3, 1, 10, -1, 11, 1, 2, 0, 2, 1, 2, -1, 3, 0, 3, 1, 12, 2, 13,
            -2, 11, 0, 2, 5, 3, -8, 4, 0, 2, 1, 3, -3, 5, 0, 3, 2, 10, 1, 12,
            -2, 13, 1, 2, 4, 3, -6, 4, 0, 2, 1, 3, -2, 5, 1, 2, 3, 3, -4, 4, 0,
            2, 3, 2, -4, 3, 1, 2, 1, 10, -1, 13, 0, 2, 1, 3, -1, 5, 0, 2, 1, 3,
            -2, 6, 0, 2, 2, 3, -2, 4, 0, 2, 1, 3, -1, 6, 0, 2, 8, 2, -14, 3, 0,
            3, 1, 3, 2, 5, -5, 6, 1, 3, 5, 3, -8, 4, 3, 5, 1, 1, 1, 12, 3, 3, 3,
            3, -8, 4, 3, 5, 1, 3, 1, 3, -2, 5, 5, 6, 0, 2, 8, 2, -12, 3, 0, 2,
            1, 3, 1, 5, 0, 3, 2, 10, 1, 12, -2, 11, 1, 2, 5, 2, -7, 3, 0, 3, 1,
            10, 1, 13, -2, 11, 0, 2, 2, 2, -2, 3, 0, 2, 5, 3, -7, 4, 0, 3, 1,
            12, -2, 13, 2, 11, 0, 2, 4, 3, -5, 4, 0, 2, 3, 3, -3, 4, 0, 1, 1, 2,
            0, 3, 3, 10, 1, 12, -3, 13, 0, 2, 2, 3, -4, 5, 0, 2, 2, 3, -3, 5, 0,
            2, 2, 10, -2, 13, 0, 2, 2, 3, -2, 5, 0, 2, 3, 2, -3, 3, 0, 3, 1, 10,
            -1, 12, -1, 13, 1, 2, 2, 3, -1, 5, 0, 2, 2, 3, -2, 6, 0, 1, 2, 12,
            2, 3, -2, 10, 1, 11, 1, 14, 0, 2, 2, 10, -2, 11, 0, 2, 2, 2, -1, 3,
            0, 4, -2, 10, 2, 13, 1, 2, -1, 3, 0, 2, 4, 2, -4, 3, 0, 2, 3, 10,
            -3, 13, 0, 4, -2, 10, 2, 13, 1, 3, -1, 5, 0, 2, 3, 3, -3, 5, 0, 3,
            2, 10, -1, 12, -2, 13, 2, 3, 3, 10, -1, 13, -2, 11, 0, 1, 3, 12, 1,
            4, -2, 10, 2, 13, 2, 2, -2, 3, 0, 3, 2, 10, -1, 12, -2, 11, 1, 2, 5,
            2, -5, 3, 0, 2, 4, 10, -4, 13, 0, 2, 6, 2, -6, 3, 0, 3, 2, 10, -2,
            12, -2, 13, 1, 3, 4, 10, -2, 13, -2, 11, 0, 3, 2, 10, -2, 12, -2,
            11, 0, 2, 7, 2, -7, 3, 0, 3, 2, 10, -3, 12, -2, 13, 0, 2, 8, 2, -8,
            3, 0, 2, 9, 2, -9, 3, 0, 2, 10, 2, -10, 3, 0, 3, 2, 10, -4, 12, -1,
            13, 0, 3, 4, 10, -2, 12, -3, 13, 0, 4, 4, 10, -1, 12, -1, 13, -2,
            11, 0, 3, 2, 10, -3, 12, -1, 13, 1, 4, -2, 10, 1, 13, 3, 3, -2, 5,
            0, 3, 4, 10, -1, 12, -3, 13, 0, 4, -2, 10, 1, 13, 3, 3, -3, 5, 0, 4,
            2, 10, -2, 12, 1, 13, -2, 11, 0, 4, -2, 10, 1, 13, 2, 2, -1, 3, 0,
            3, 3, 10, -1, 12, -2, 11, 0, 3, 4, 10, -1, 13, -2, 11, 0, 3, 2, 10,
            -2, 12, -1, 13, 2, 4, -2, 10, 1, 13, 2, 3, -1, 5, 0, 3, 3, 10, -1,
            12, -2, 13, 0, 4, -2, 10, 1, 13, 3, 2, -3, 3, 0, 4, -2, 10, 1, 13,
            2, 3, -2, 5, 0, 2, 4, 10, -3, 13, 0, 4, -2, 10, 1, 13, 2, 3, -3, 5,
            0, 3, -2, 10, 1, 13, 1, 2, 0, 4, 2, 10, -1, 12, 1, 13, -2, 11, 1, 4,
            -2, 10, 1, 13, 2, 2, -2, 3, 0, 2, 3, 12, -1, 13, 0, 2, 3, 10, -2,
            11, 0, 2, 1, 10, -2, 12, 0, 4, 4, 10, 1, 12, -1, 13, -2, 11, 0, 3,
            -1, 13, 3, 2, -2, 3, 0, 3, -1, 13, 3, 3, -2, 5, 0, 3, -2, 10, 18, 2,
            -15, 3, 0, 5, 2, 10, -1, 13, 3, 3, -8, 4, 3, 5, 0, 3, 2, 10, -1, 12,
            -1, 13, 2, 5, -2, 10, 1, 13, 5, 3, -8, 4, 3, 5, 0, 5, -2, 10, 1, 13,
            1, 3, 2, 5, -5, 6, 0, 4, 2, 10, -2, 13, 18, 2, -17, 3, 0, 4, -2, 10,
            1, 13, 1, 3, -1, 6, 0, 4, -2, 10, 1, 13, 2, 3, -2, 4, 0, 4, -2, 10,
            1, 13, 1, 3, -1, 5, 0, 2, 3, 10, -2, 13, 0, 4, -2, 10, 1, 13, 3, 2,
            -4, 3, 0, 4, -2, 10, 1, 13, 3, 3, -4, 4, 0, 4, -2, 10, 1, 13, 1, 3,
            -2, 5, 0, 3, 4, 10, 1, 12, -3, 13, 0, 4, -2, 10, 1, 13, 1, 3, -3, 5,
            0, 3, -1, 13, 4, 2, -4, 3, 0, 4, -2, 10, 1, 13, 1, 2, -1, 3, 0, 4,
            -2, 10, 1, 13, 1, 3, -1, 4, 0, 4, -2, 10, 1, 13, 2, 3, -3, 4, 0, 4,
            -2, 10, 1, 13, 3, 3, -5, 4, 0, 3, 2, 10, 1, 13, -2, 11, 0, 4, -2,
            10, -1, 13, 1, 11, 1, 14, 0, 4, -2, 10, 1, 13, 2, 2, -3, 3, 1, 2, 2,
            12, -1, 13, 1, 3, 3, 10, 1, 12, -2, 11, 0, 4, 2, 10, -1, 13, 2, 3,
            -4, 4, 0, 4, 2, 10, -1, 13, 3, 2, -5, 3, 0, 2, 1, 10, -1, 12, 1, 3,
            -1, 13, 3, 2, -3, 3, 0, 3, -2, 10, 1, 13, 1, 5, 0, 4, 2, 10, -1, 13,
            1, 3, -2, 4, 0, 3, -1, 13, 2, 3, -2, 5, 0, 4, 2, 10, -1, 13, -1, 11,
            1, 14, 0, 3, -1, 13, 5, 3, -6, 4, 0, 3, -2, 10, 1, 13, 1, 6, 0, 3,
            -1, 10, 1, 3, -1, 5, 0, 4, -2, 10, 1, 13, 8, 2, -13, 3, 1, 3, -2,
            10, 18, 2, -16, 3, 1, 5, -2, 10, 1, 13, 3, 2, -7, 3, 4, 4, 1, 4, 2,
            10, -1, 13, 2, 5, -5, 6, 1, 5, 2, 10, -1, 13, 4, 3, -8, 4, 3, 5, 1,
            2, 2, 10, -1, 13, 2, 5, -2, 10, 1, 13, 4, 3, -8, 4, 3, 5, 1, 4, -2,
            10, 1, 13, 2, 5, -5, 6, 1, 5, 2, 10, -1, 13, 3, 2, -7, 3, 4, 4, 0,
            4, 2, 10, -2, 13, 18, 2, -16, 3, 1, 4, 2, 10, -1, 13, 8, 2, -13, 3,
            1, 3, -1, 10, 3, 2, -4, 3, 0, 3, -1, 13, 6, 2, -8, 3, 0, 3, -1, 13,
            2, 3, -3, 5, 0, 3, -1, 13, 6, 3, -8, 4, 0, 3, 2, 10, -1, 13, 1, 6,
            0, 4, -2, 10, 1, 13, -1, 11, 1, 14, 0, 4, -2, 10, 1, 13, 1, 3, -2,
            4, 0, 3, 2, 10, -1, 13, 1, 5, 0, 3, 3, 10, 1, 12, -2, 13, 0, 4, -2,
            10, 1, 13, 3, 2, -5, 3, 0, 4, -2, 10, 1, 13, 2, 3, -4, 4, 0, 2, -1,
            13, 1, 2, 0, 4, 2, 10, -1, 13, 2, 2, -3, 3, 0, 3, -1, 10, 1, 2, -1,
            3, 0, 3, -1, 13, 4, 2, -5, 3, 0, 3, 2, 10, -3, 13, 2, 11, 0, 4, 2,
            10, -1, 13, 2, 3, -3, 4, 0, 3, -1, 13, 2, 2, -2, 3, 0, 4, 2, 10, -1,
            13, 1, 2, -1, 3, 0, 4, 2, 10, 1, 12, 1, 13, -2, 11, 0, 3, -2, 13,
            18, 2, -15, 3, 0, 2, 1, 12, -1, 13, 2, 3, -1, 13, 1, 3, -1, 6, 0, 4,
            2, 10, -1, 13, 1, 3, -2, 5, 0, 3, -1, 13, 2, 3, -2, 4, 0, 3, -1, 13,
            1, 3, -1, 5, 0, 4, 2, 10, -1, 13, 3, 3, -4, 4, 0, 1, 1, 10, 0, 3,
            -1, 13, 3, 2, -4, 3, 0, 3, -1, 13, 3, 3, -4, 4, 0, 4, 2, 10, -1, 13,
            1, 3, -1, 5, 0, 4, 2, 10, -1, 13, 2, 3, -2, 4, 0, 3, -1, 13, 1, 3,
            -2, 5, 0, 3, 2, 10, 1, 12, -1, 13, 2, 3, 1, 12, 1, 13, -2, 11, 0, 3,
            -1, 13, 1, 2, -1, 3, 0, 4, 2, 10, -1, 13, 2, 2, -2, 3, 0, 3, -1, 13,
            4, 2, -6, 3, 0, 3, -1, 13, 2, 3, -3, 4, 0, 3, 1, 13, 1, 2, -2, 3, 0,
            4, 2, 10, -1, 13, 3, 3, -3, 4, 0, 2, 3, 13, -2, 11, 0, 4, 2, 10, -1,
            13, 4, 2, -5, 3, 0, 3, 1, 10, 1, 2, -1, 3, 0, 3, -1, 13, 2, 2, -3,
            3, 1, 3, 2, 10, 2, 12, -3, 13, 0, 3, 2, 10, -1, 13, 1, 2, 0, 3, 1,
            13, 2, 3, -4, 4, 0, 3, 1, 13, 3, 2, -5, 3, 0, 2, 21, 2, -21, 3, 0,
            3, 1, 10, 1, 12, -2, 13, 1, 4, 2, 10, -1, 13, 2, 3, -4, 5, 0, 4, 2,
            10, -1, 13, 7, 3, -10, 4, 0, 2, -1, 13, 1, 5, 0, 3, 1, 13, 1, 3, -2,
            4, 0, 4, 2, 10, -3, 13, 2, 3, -2, 5, 0, 3, 1, 10, 1, 3, -2, 5, 0, 3,
            1, 13, -1, 11, 1, 14, 1, 2, -1, 13, 1, 6, 0, 4, 2, 10, -1, 13, 6, 3,
            -8, 4, 1, 4, 2, 10, -1, 13, 2, 3, -3, 5, 1, 3, -1, 13, 8, 3, -15, 4,
            0, 4, 2, 10, -1, 13, 6, 2, -8, 3, 0, 5, 2, 10, -1, 13, -2, 11, 5, 2,
            -6, 3, 0, 3, 1, 10, 3, 3, -4, 4, 0, 3, 1, 10, 3, 2, -4, 3, 1, 4, 1,
            10, -1, 13, -1, 11, 2, 4, 0, 3, -2, 13, 26, 2, -29, 3, 0, 3, -1, 13,
            8, 2, -13, 3, 0, 3, -2, 13, 18, 2, -16, 3, 2, 4, -1, 13, 3, 2, -7,
            3, 4, 4, 0, 3, 1, 13, 2, 5, -5, 6, 1, 4, 1, 13, 4, 3, -8, 4, 3, 5,
            1, 1, 1, 13, 3, 4, -1, 13, 4, 3, -8, 4, 3, 5, 1, 3, -1, 13, 2, 5,
            -5, 6, 1, 4, 1, 13, 3, 2, -7, 3, 4, 4, 0, 2, 18, 2, -16, 3, 1, 3, 1,
            13, 8, 2, -13, 3, 2, 2, 26, 2, -29, 3, 0, 4, 1, 10, 1, 13, -1, 11,
            2, 4, 0, 5, 2, 10, 1, 13, -2, 11, 5, 2, -6, 3, 0, 3, 1, 13, 8, 3,
            -15, 4, 1, 4, 2, 10, -3, 13, 2, 3, -3, 5, 0, 3, 1, 10, 1, 3, -1, 5,
            0, 2, 1, 13, 1, 6, 0, 4, 2, 10, -1, 13, 5, 3, -6, 4, 0, 3, 1, 10, 2,
            3, -2, 4, 0, 3, -1, 13, -1, 11, 1, 14, 1, 4, 2, 10, -1, 13, 2, 3,
            -5, 6, 0, 4, 2, 10, -1, 13, 2, 3, -2, 5, 0, 5, 2, 10, -1, 13, 2, 3,
            -4, 5, 5, 6, 0, 3, -1, 13, 1, 3, -2, 4, 1, 2, 1, 13, 1, 5, 0, 4, 2,
            10, -1, 13, 4, 3, -4, 4, 0, 4, 2, 10, -1, 13, 3, 2, -3, 3, 0, 4, 2,
            10, 2, 12, -1, 13, -2, 11, 0, 2, 1, 10, 1, 12, 2, 3, -1, 13, 3, 2,
            -5, 3, 0, 3, -1, 13, 2, 3, -4, 4, 0, 4, 2, 10, -1, 13, 2, 3, -1, 5,
            0, 4, 2, 10, -1, 13, 2, 3, -2, 6, 0, 3, 1, 10, 1, 12, -2, 11, 0, 3,
            2, 10, 2, 12, -1, 13, 1, 3, 1, 13, 2, 2, -3, 3, 1, 3, -1, 13, 1, 11,
            1, 14, 0, 2, 1, 13, -2, 11, 0, 4, 2, 10, -1, 13, 5, 2, -6, 3, 0, 3,
            -1, 13, 1, 2, -2, 3, 0, 3, 1, 13, 2, 3, -3, 4, 0, 3, 1, 13, 1, 2,
            -1, 3, 0, 4, 2, 10, -1, 13, 4, 2, -4, 3, 0, 3, 2, 10, 1, 12, -3, 13,
            1, 3, 1, 13, 1, 3, -2, 5, 0, 3, 1, 13, 3, 3, -4, 4, 0, 3, 1, 13, 3,
            2, -4, 3, 0, 2, 1, 10, -2, 13, 0, 4, 2, 10, -1, 13, 3, 3, -4, 5, 0,
            3, 1, 13, 1, 3, -1, 5, 0, 3, 1, 13, 2, 3, -2, 4, 0, 3, 1, 13, 1, 3,
            -1, 6, 0, 4, 2, 10, -1, 13, 3, 3, -3, 5, 0, 4, 2, 10, -1, 13, 6, 2,
            -7, 3, 0, 2, 1, 12, 1, 13, 2, 4, 2, 10, -1, 13, 3, 3, -2, 5, 0, 4,
            2, 10, 1, 12, -1, 13, -2, 11, 0, 2, 1, 10, 2, 12, 0, 2, 1, 10, -2,
            11, 0, 3, 1, 13, 2, 2, -2, 3, 0, 3, 1, 12, -1, 13, 2, 11, 0, 4, 2,
            10, -1, 13, 5, 2, -5, 3, 0, 3, 1, 13, 2, 3, -3, 5, 0, 2, 2, 10, -3,
            13, 0, 3, 1, 13, 2, 3, -2, 5, 0, 3, 1, 13, 3, 2, -3, 3, 0, 3, 1, 10,
            -1, 12, -2, 13, 0, 4, 2, 10, -1, 13, 6, 2, -6, 3, 0, 2, 2, 12, 1,
            13, 1, 3, 2, 10, -1, 13, -2, 11, 0, 3, 1, 10, -1, 12, -2, 11, 0, 3,
            2, 10, 1, 13, -4, 11, 0, 3, 1, 13, 4, 2, -4, 3, 0, 4, 2, 10, -1, 13,
            7, 2, -7, 3, 0, 3, 2, 10, -1, 12, -3, 13, 1, 2, 3, 12, 1, 13, 0, 4,
            2, 10, -1, 12, -1, 13, -2, 11, 0, 3, 1, 13, 5, 2, -5, 3, 0, 4, 2,
            10, -1, 13, 8, 2, -8, 3, 0, 3, 2, 10, -2, 12, -3, 13, 0, 4, 2, 10,
            -1, 13, 9, 2, -9, 3, 0, 3, 4, 10, -3, 12, -2, 13, 0, 2, 2, 10, -4,
            12, 0, 3, 4, 10, -2, 12, -2, 13, 1, 2, 6, 10, -4, 13, 0, 3, 4, 10,
            -1, 12, -2, 11, 0, 2, 2, 10, -3, 12, 1, 3, 3, 10, -2, 12, -1, 13, 0,
            3, -2, 10, 3, 3, -2, 5, 0, 3, 4, 10, -1, 12, -2, 13, 1, 3, -2, 10,
            3, 3, -3, 5, 0, 2, 5, 10, -3, 13, 0, 3, -2, 10, 4, 2, -4, 3, 0, 3,
            -2, 10, 2, 2, -1, 3, 0, 2, 4, 10, -2, 11, 0, 2, 2, 10, -2, 12, 2, 3,
            -2, 10, 3, 3, -2, 4, 0, 3, -2, 10, 2, 3, -1, 5, 0, 3, 3, 10, -1, 12,
            -1, 13, 1, 3, -2, 10, 3, 2, -3, 3, 0, 3, -2, 10, 2, 3, -2, 5, 0, 2,
            4, 10, -2, 13, 0, 3, -2, 10, 2, 3, -3, 5, 0, 2, -2, 10, 1, 2, 0, 4,
            2, 10, -1, 12, 2, 13, -2, 11, 0, 3, -2, 10, 2, 2, -2, 3, 0, 3, 3,
            10, 1, 13, -2, 11, 0, 3, 4, 10, 1, 12, -2, 11, 0, 4, 2, 10, -1, 12,
            -1, 11, 1, 14, 0, 4, -2, 10, -1, 13, 18, 2, -15, 3, 0, 4, 2, 10, 3,
            3, -8, 4, 3, 5, 0, 2, 2, 10, -1, 12, 2, 4, -2, 10, 5, 3, -8, 4, 3,
            5, 0, 4, 2, 10, -1, 13, 18, 2, -17, 3, 0, 3, -2, 10, 1, 3, -1, 6, 0,
            3, -2, 10, 2, 3, -2, 4, 0, 3, -2, 10, 1, 3, -1, 5, 0, 2, 3, 10, -1,
            13, 0, 3, -2, 10, 3, 2, -4, 3, 0, 3, -2, 10, 3, 3, -4, 4, 0, 3, -2,
            10, 1, 3, -2, 5, 0, 3, 4, 10, 1, 12, -2, 13, 1, 4, 2, 10, -1, 12,
            -2, 13, 2, 11, 0, 3, -2, 10, 1, 2, -1, 3, 0, 3, -2, 10, 2, 3, -3, 4,
            0, 3, 2, 10, 2, 13, -2, 11, 0, 3, -2, 10, 2, 2, -3, 3, 0, 2, 2, 12,
            -2, 13, 1, 3, 2, 10, 2, 3, -4, 4, 0, 3, 2, 10, 3, 2, -5, 3, 0, 3, 1,
            10, -1, 12, 1, 13, 1, 3, -2, 13, 3, 2, -3, 3, 0, 2, -2, 10, 1, 5, 0,
            3, 2, 10, 1, 3, -2, 4, 0, 3, -2, 13, 2, 3, -2, 5, 0, 3, 2, 10, -1,
            11, 1, 14, 0, 4, 4, 10, -2, 13, 2, 3, -3, 5, 0, 3, -2, 10, 8, 2,
            -13, 3, 0, 4, -2, 10, -1, 13, 18, 2, -16, 3, 1, 4, -2, 10, 3, 2, -7,
            3, 4, 4, 0, 4, 2, 10, 4, 3, -8, 4, 3, 5, 1, 1, 2, 10, 3, 4, -2, 10,
            4, 3, -8, 4, 3, 5, 1, 4, 2, 10, 3, 2, -7, 3, 4, 4, 0, 4, 2, 10, -1,
            13, 18, 2, -16, 3, 1, 3, 2, 10, 8, 2, -13, 3, 0, 3, -2, 10, -1, 11,
            1, 14, 0, 4, 4, 10, -2, 13, 2, 3, -2, 5, 0, 3, -2, 10, 1, 3, -2, 4,
            0, 2, 2, 10, 1, 5, 0, 4, 4, 10, -2, 13, 3, 2, -3, 3, 0, 3, 3, 10, 1,
            12, -1, 13, 1, 3, -2, 10, 3, 2, -5, 3, 0, 3, -2, 10, 2, 3, -4, 4, 0,
            3, 4, 10, 2, 12, -2, 13, 0, 3, 2, 10, 2, 2, -3, 3, 0, 3, 2, 10, -2,
            13, 2, 11, 0, 3, 2, 10, 1, 2, -1, 3, 0, 4, 2, 10, 1, 12, 2, 13, -2,
            11, 0, 2, 1, 12, -2, 13, 2, 3, 2, 10, 1, 3, -2, 5, 0, 3, -2, 13, 1,
            3, -1, 5, 0, 3, 2, 10, 3, 2, -4, 3, 0, 2, 1, 10, 1, 13, 0, 3, 2, 10,
            1, 3, -1, 5, 0, 3, 2, 10, 2, 3, -2, 4, 0, 2, 2, 10, 1, 12, 2, 2, 1,
            12, -2, 11, 0, 3, -2, 13, 1, 2, -1, 3, 0, 3, 1, 10, -1, 13, 2, 11,
            0, 3, 2, 10, 2, 2, -2, 3, 0, 3, 1, 10, 1, 12, -3, 13, 0, 3, 2, 13,
            -1, 11, 1, 14, 0, 3, 2, 10, 2, 3, -3, 5, 0, 3, 2, 10, 6, 2, -8, 3,
            0, 3, -3, 13, 18, 2, -16, 3, 1, 3, 2, 13, 2, 5, -5, 6, 0, 4, 2, 13,
            4, 3, -8, 4, 3, 5, 0, 1, 2, 13, 0, 4, -2, 13, 4, 3, -8, 4, 3, 5, 0,
            3, -2, 13, 2, 5, -5, 6, 0, 3, 1, 13, 18, 2, -16, 3, 1, 3, -2, 13,
            -1, 11, 1, 14, 0, 3, 2, 10, 2, 3, -2, 5, 0, 3, 2, 10, 3, 2, -3, 3,
            0, 3, 1, 10, 1, 12, 1, 13, 1, 2, 2, 10, 2, 12, 1, 2, 1, 11, 1, 14,
            1, 4, -1, 13, -2, 11, 18, 2, -16, 3, 0, 1, 2, 11, 0, 4, -1, 13, 2,
            11, 18, 2, -16, 3, 0, 2, -3, 11, 1, 14, 0, 3, 2, 13, 1, 2, -1, 3, 0,
            3, 2, 10, 4, 2, -4, 3, 0, 3, 2, 10, 1, 12, -4, 13, 0, 2, 1, 10, -3,
            13, 0, 3, 2, 13, 1, 3, -1, 5, 0, 2, 1, 12, 2, 13, 2, 3, 1, 10, 2,
            12, 1, 13, 0, 3, 1, 10, -1, 13, -2, 11, 0, 2, 1, 12, 2, 11, 1, 3, 2,
            10, 5, 2, -5, 3, 0, 2, 2, 10, -4, 13, 0, 3, 2, 10, 6, 2, -6, 3, 0,
            2, 2, 12, 2, 13, 0, 3, 2, 10, -2, 13, -2, 11, 0, 2, 2, 12, 2, 11, 0,
            2, 2, 10, -4, 11, 0, 3, 2, 10, 7, 2, -7, 3, 0, 3, 2, 10, -1, 12, -4,
            13, 0, 4, 2, 10, -1, 12, -2, 13, -2, 11, 0, 3, 2, 10, 8, 2, -8, 3,
            0, 3, 2, 10, 9, 2, -9, 3, 0, 3, 4, 10, -3, 12, -1, 13, 0, 3, 6, 10,
            -1, 12, -3, 13, 0, 3, 4, 10, -2, 12, -1, 13, 1, 3, 5, 10, -1, 12,
            -2, 13, 0, 2, 6, 10, -3, 13, 0, 4, 4, 10, -1, 12, 1, 13, -2, 11, 0,
            3, 2, 10, -3, 12, 1, 13, 0, 2, 3, 10, -2, 12, 0, 3, 4, 10, -1, 12,
            -1, 13, 1, 2, 5, 10, -2, 13, 0, 3, 6, 10, 1, 12, -3, 13, 0, 3, 4,
            10, 1, 13, -2, 11, 0, 3, 2, 10, -2, 12, 1, 13, 1, 2, 3, 10, -1, 12,
            0, 4, -2, 10, -1, 13, 2, 3, -2, 5, 0, 2, 4, 10, -1, 13, 0, 4, 2, 10,
            -2, 12, -1, 13, 2, 11, 0, 3, 4, 10, -3, 13, 2, 11, 0, 4, -2, 10, -1,
            13, 2, 2, -2, 3, 0, 3, 2, 10, -1, 12, 1, 13, 2, 4, -2, 10, -1, 13,
            1, 3, -1, 5, 0, 1, 3, 10, 0, 3, 4, 10, 1, 12, -1, 13, 1, 4, 2, 10,
            -1, 12, -1, 13, 2, 11, 1, 4, -2, 10, -1, 13, 1, 2, -1, 3, 0, 3, 2,
            10, 3, 13, -2, 11, 0, 2, 2, 12, -3, 13, 0, 3, 1, 10, -1, 12, 2, 13,
            0, 4, 2, 10, 1, 13, -1, 11, 1, 14, 0, 4, -2, 10, -2, 13, 18, 2, -16,
            3, 0, 5, 2, 10, 1, 13, 4, 3, -8, 4, 3, 5, 0, 2, 2, 10, 1, 13, 1, 5,
            -2, 10, -1, 13, 4, 3, -8, 4, 3, 5, 0, 3, 2, 10, 18, 2, -16, 3, 0, 4,
            -2, 10, -1, 13, -1, 11, 1, 14, 0, 4, 4, 10, -1, 13, 2, 3, -2, 5, 0,
            4, 4, 10, -1, 13, 3, 2, -3, 3, 0, 2, 3, 10, 1, 12, 1, 3, 4, 10, 2,
            12, -1, 13, 0, 4, 2, 10, -1, 13, 1, 11, 1, 14, 0, 3, 2, 10, -1, 13,
            2, 11, 0, 2, 1, 12, -3, 13, 1, 2, 1, 10, 2, 13, 0, 3, 2, 10, 1, 12,
            1, 13, 1, 3, 1, 12, -1, 13, -2, 11, 1, 2, 1, 10, 2, 11, 0, 4, 2, 10,
            1, 12, -1, 13, 2, 11, 0, 1, 3, 13, 0, 4, 2, 10, 1, 13, 2, 3, -2, 5,
            0, 3, 1, 10, 1, 12, 2, 13, 0, 3, 2, 10, 2, 12, 1, 13, 0, 3, 1, 13,
            1, 11, 1, 14, 0, 2, 1, 13, 2, 11, 0, 3, 1, 10, 1, 12, 2, 11, 0, 4,
            2, 10, 2, 12, -1, 13, 2, 11, 0, 2, 1, 13, -4, 11, 0, 2, 1, 10, -4,
            13, 0, 2, 1, 12, 3, 13, 1, 3, 1, 12, 1, 13, 2, 11, 1, 2, 2, 10, -5,
            13, 0, 3, 2, 10, -3, 13, -2, 11, 0, 3, 2, 10, -1, 13, -4, 11, 0, 3,
            6, 10, -2, 12, -2, 13, 0, 2, 4, 10, -3, 12, 0, 3, 6, 10, -1, 12, -2,
            13, 0, 2, 4, 10, -2, 12, 1, 2, 6, 10, -2, 13, 0, 2, 4, 10, -1, 12,
            1, 2, 5, 10, -1, 13, 0, 3, 6, 10, 1, 12, -2, 13, 0, 4, 4, 10, -1,
            12, -2, 13, 2, 11, 0, 3, 4, 10, 2, 13, -2, 11, 0, 3, 2, 10, -2, 12,
            2, 13, 0, 1, 4, 10, 0, 3, 2, 10, -2, 12, 2, 11, 0, 3, 4, 10, -2, 13,
            2, 11, 0, 3, 2, 10, -1, 12, 2, 13, 1, 2, 3, 10, 1, 13, 0, 2, 4, 10,
            1, 12, 1, 3, 2, 10, -1, 12, 2, 11, 1, 3, 3, 10, -1, 13, 2, 11, 0, 2,
            2, 10, 2, 13, 0, 3, 3, 10, 1, 12, 1, 13, 0, 3, 2, 10, 1, 11, 1, 14,
            0, 2, 2, 10, 2, 11, 0, 2, 1, 12, -4, 13, 0, 2, 1, 10, 3, 13, 0, 3,
            2, 10, 1, 12, 2, 13, 1, 3, 1, 12, -2, 13, -2, 11, 0, 3, 1, 10, 1,
            13, 2, 11, 0, 3, 2, 10, 1, 12, 2, 11, 0, 1, 4, 13, 0, 3, 1, 10, 1,
            12, 3, 13, 0, 2, 2, 13, 2, 11, 0, 4, 1, 10, 1, 12, 1, 13, 2, 11, 0,
            1, 4, 11, 0, 2, 1, 12, 4, 13, 0, 3, 1, 12, 2, 13, 2, 11, 0, 3, 2,
            10, -4, 13, -2, 11, 0, 3, 6, 10, -2, 12, -1, 13, 0, 2, 8, 10, -3,
            13, 0, 3, 6, 10, -1, 12, -1, 13, 0, 3, 4, 10, -2, 12, 1, 13, 0, 2,
            6, 10, -1, 13, 0, 3, 4, 10, -1, 12, 1, 13, 1, 3, 6, 10, 1, 12, -1,
            13, 0, 4, 4, 10, -1, 12, -1, 13, 2, 11, 0, 3, 2, 10, -2, 12, 3, 13,
            0, 2, 4, 10, 1, 13, 0, 3, 4, 10, -1, 13, 2, 11, 0, 3, 2, 10, -1, 12,
            3, 13, 0, 3, 4, 10, 1, 12, 1, 13, 0, 4, 2, 10, -1, 12, 1, 13, 2, 11,
            0, 2, 2, 10, 3, 13, 0, 3, 2, 10, 1, 13, 2, 11, 0, 3, 2, 10, -1, 13,
            4, 11, 0, 3, 2, 10, 1, 12, 3, 13, 0, 3, 1, 12, -3, 13, -2, 11, 0, 3,
            1, 10, 2, 13, 2, 11, 0, 4, 2, 10, 1, 12, 1, 13, 2, 11, 0, 1, 5, 13,
            0, 2, 3, 13, 2, 11, 0, 2, 1, 13, 4, 11, 0, 3, 1, 12, 3, 13, 2, 11,
            0, 2, 8, 10, -2, 13, 0, 2, 6, 10, -1, 12, 0, 1, 6, 10, 0, 3, 6, 10,
            -2, 13, 2, 11, 0, 3, 4, 10, -1, 12, 2, 13, 0, 3, 4, 10, -1, 12, 2,
            11, 0, 2, 4, 10, 2, 13, 0, 2, 4, 10, 2, 11, 0, 3, 2, 10, -1, 12, 4,
            13, 0, 3, 4, 10, 1, 12, 2, 13, 0, 4, 2, 10, -1, 12, 2, 13, 2, 11, 0,
            2, 2, 10, 4, 13, 0, 3, 2, 10, 2, 13, 2, 11, 0, 2, 2, 10, 4, 11, 0,
            1, 6, 13, 0, 2, 4, 13, 2, 11, 0, 2, 2, 13, 4, 11, 0, 3, 6, 10, -1,
            12, 1, 13, 0, 2, 6, 10, 1, 13, 0, 2, 4, 10, 3, 13, 0, 3, 4, 10, 1,
            13, 2, 11, 0, 2, 2, 10, 5, 13, 0, 3, 2, 10, 3, 13, 2, 11, 0, -1,
          ],
        },
        D = {
          maxargs: 14,
          max_harmonic: [
            0, 26, 29, 8, 3, 5, 0, 0, 0, 6, 5, 3, 5, 1, 0, 0, 0, 0,
          ],
          max_power_of_t: 3,
          distance: 0.00257356868953,
          timescale: 3652500,
          trunclvl: 1e-4,
          lon_tbl: [
            -3, -4, 4, -1856, 0, 8043, -9, -1082, -1, -310, -1, -522, -330,
            -1449, -853, 4656, -66, 7, -1, 9996928, -66, 6, 23, 183, 0, 173, 0,
            -56, 0, 50, 0, -785, 1, 51, 0, -60, 1, 11843, 0, -50754, 0, 1834, 1,
            -7910, 0, -48060, 1, 56, 0, 13141, -1, -56318, 0, 2541, -1, -649,
            -133, 778, -46, 8, 1, 1665737, -47, 7, 0, 65, 0, 45, 0, -138, 0,
            -1005, 0, -2911, 0, -47, 0, 96, 0, -394, 2, 76, 2, -17302, 0, 74337,
            0, -101, 0, 58, 0, -171, 0, -77, 0, -1283, 0, 2686, 0, -55, 0, 99,
            0, 55, 0, 397, 0, 540, 0, 626, -1, -5188, 0, 10857, 0, -216, -2,
            -123, 0, 6337, 2, 224, -152, -23472, -29, -74336, 0, 295775, -20,
            149, -2, 84, 9, 304, 0, -3051, -70, -6, -57, 34, 0, -638, 0, -201,
            -73, 9, 0, -100, -101, -8, 0, -57, 0, -207, -3, 80, -45, 45, -5,
            102, -59, -23, 52, 201, -48, 233, -220, 71, 4, 2810, 0, 6236541,
            -61, 218, -216, 67, 51, 201, -59, -23, -144, -837, -457, 3029, -45,
            42, -15, 73, -6, -169, 0, 135, -64, -7, 0, -16245, 0, -81, -74, -10,
            0, 702, 0, -3013, 0, -5889, 1, 141, 58, 9598, 12, 30443, 1, -120946,
            -1, -84, -2, 11246, -1, -48391, 0, 1393, 0, 200, -136, -17, 0, 558,
            -64, -8, 0, -71, 0, 317577, -28, 183, 1, 219, 0, 421, 0, -133, 501,
            -139, 3, 354, -101, -13, 74, 7, 144, -84, 59, -2, 1, 64, -2931,
            12559, -4641, 2638, -303, -2058, -13, -100, -123, -79, -19214, 6084,
            1494, 26993, 15213, -82219, 42, 52, 48, -101, -53, -4, 4, 47, 58,
            -131, 46, 14, -21, -6, -1311, -8791, 10198, -4185, 2815, 5640, 167,
            422, -229, 83, 3140, 39, 1221, 120, 96, -30, -1, 184612405, 187,
            416, -226, 81, -1985, -10083, 9983, -4464, 2807, 5643, -21, -9, 113,
            -367, 120, 580, -667, 27, 8, 66, -56, -6, 337, 95, -87, 3303, -1,
            65, 68, -374, 0, -574, 15, -94, 0, -53, 0, -1303, 0, -236, 283, 36,
            -1, -54, 269, -35, 0, -83, 0, -52, 0, 730, 0, -3129, 0, 813, 0,
            -4299, 1, 59, -6, 5130, 1, 16239, -1, -64603, 0, -80, 91, 12, 0,
            -561, 133, -17, 0, 250, -12, 71, 0, 155664, 82, -11, 0, 106, 0,
            -604, 0, 21862, 55, -7, 0, -1514, 0, 6501, 0, 906, 0, -68, 0, 241,
            0, 366, 0, 70, 0, -1382, 0, 5957, 0, 113, 0, -51, 0, -55, 0, 731, 0,
            -264, 0, 65788, 1, -1504, 0, 3147, 0, 217, 0, -4105, 0, 17658, 1,
            69, 0, -3518, 0, -1767, -43, -7044, -10, -22304, 0, 88685, 3, 91, 0,
            -485, 0, -57, -1, 333548, -24, 172, 11, 544, 1, -1132, 0, 353, 0,
            -188, 0, 53, 0, 77, 158, -887, 35, 131, -54, 13, 0, 1994821, -53,
            14, 36, 125, 2, 56, 0, -243, 0, -364, -2, 1916, 0, -8227, 0, 15700,
            -1, -67308, 1, 66, 0, -53686, 1, 3058, 1, -13177, 0, -72, 0, -72, 0,
            61, 0, 15812, 0, 165, 8, -96, 318, 1341, 803, -4252, 24, 193, 1137,
            -226, 310, 622, -56, 30, -3, 10101666, -56, 30, 1096, -225, 300,
            600, -31, 409, -1, -507, 0, -287, 0, -1869, 0, 8026, 1, 544, -1,
            -1133, 0, 27984, 0, -62, 0, -249, 0, 187, 0, -1096, 1, 53, 2, 12388,
            0, -53107, 0, -322, 0, -94, 0, 15157, 0, -582, 0, 3291, 0, 565, 0,
            106, 0, 112, 0, 306, 0, 809, 0, 130, 0, -961, 0, 4149, 0, 174, 0,
            -105, 0, 2196, 0, 59, 0, 36737, -1, -1832, 0, 3835, 0, -139, 0,
            24138, 0, 1325, 1, 64, 0, -361, 0, -1162, -44, -6320, -10, -20003,
            0, 79588, 2, 80, 0, -2059, 0, -304, 0, 21460, 0, -166, 0, -87, 89,
            -493, 32, 114, 34, 510, 1, 1172616, 31, 113, -1, 57, 0, 214, 0,
            -656, 0, -646, 0, 1850, 0, -7931, 0, -6674, 0, 2944, 0, -12641, 0,
            916, 45, -255, 16, 60, -1, 619116, 16, 57, 0, -58, 0, 1045, 0, -156,
            -15, 88, 0, -62964, 0, -126, 0, 1490, 0, -6387, 0, 119, 0, 1338, 0,
            -56, 0, 204, 0, 153, 0, 940, 0, 251, 0, 312, 0, 584, 0, -786, 0,
            3388, 0, -52, 0, 4733, 0, 618, 0, 29982, 0, 101, 0, -174, 0, -2637,
            0, 11345, 0, -284, 0, -524, 0, -121, 0, 1464, 11, -60, -1, 151205,
            0, 139, 0, -2448, 0, -51, 0, -768, 0, -638, 0, 552, 0, -2370, 0, 70,
            0, 64, 0, 57, 0, 39840, 0, 104, 0, -10194, 0, -635, 0, 69, 0, 113,
            0, 67, 0, 96, 0, 367, 0, 134, 0, 596, 0, 63, 0, 1622, 0, 483, 0, 72,
            0, 11917, 0, -63, 0, 1273, 0, -66, 0, -262, 0, -97, 0, 103, 0,
            15196, 0, -1445, 0, -66, 0, -55, 0, -323, 0, 2632, 0, -1179, 0, 59,
            0, -56, 0, 78, 0, 65, 0, 422, 0, 309, 0, 2125, 0, -66, 0, 124, 0,
            -57, 0, 1379, 0, -304, 0, 177, 0, -118, 0, 146, 0, 283, 0, 119,
          ],
          lat_tbl: [],
          rad_tbl: [],
          arg_tbl: [
            0, 1, 3, 1, 10, 1, 12, -1, 11, 1, 4, 2, 10, 2, 12, -1, 13, -1, 11,
            0, 5, 2, 10, -1, 13, -1, 11, 3, 2, -3, 3, 0, 5, 2, 10, -1, 13, -1,
            11, 2, 3, -2, 5, 0, 2, -1, 13, 1, 14, 1, 5, -1, 13, 1, 11, 4, 3, -8,
            4, 3, 5, 0, 2, 1, 13, -1, 11, 0, 5, 1, 13, -1, 11, 4, 3, -8, 4, 3,
            5, 0, 5, 2, 10, -1, 13, -1, 11, 2, 3, -3, 5, 0, 4, 1, 10, 1, 12, -2,
            13, 1, 11, 0, 4, 1, 13, -1, 11, 1, 2, -1, 3, 0, 5, 2, 10, -1, 13,
            -1, 11, 2, 2, -2, 3, 0, 3, 1, 10, -2, 13, 1, 11, 0, 4, 1, 13, -1,
            11, 1, 3, -1, 5, 0, 4, -1, 13, 1, 11, 1, 2, -1, 3, 0, 3, 1, 12, 1,
            13, -1, 11, 1, 4, 2, 10, 1, 12, -1, 13, -1, 11, 1, 2, 1, 10, -1, 11,
            0, 4, -1, 13, 1, 11, 1, 3, -1, 5, 0, 3, 1, 12, -1, 13, 1, 11, 1, 3,
            2, 10, -3, 13, 1, 11, 0, 3, 2, 12, 1, 13, -1, 11, 0, 3, -2, 10, 1,
            13, 1, 14, 0, 6, -2, 10, 1, 13, 1, 11, 4, 3, -8, 4, 3, 5, 0, 3, 2,
            10, -1, 13, -1, 11, 0, 6, 2, 10, -1, 13, -1, 11, 4, 3, -8, 4, 3, 5,
            0, 4, -1, 13, 1, 11, 2, 3, -2, 5, 0, 4, -1, 13, 1, 11, 3, 2, -3, 3,
            0, 3, 1, 10, -1, 12, -1, 11, 0, 3, 2, 12, -1, 13, 1, 11, 0, 3, 2,
            10, 1, 13, -3, 11, 0, 5, -2, 10, 1, 13, 1, 11, 1, 2, -1, 3, 0, 4, 2,
            10, -1, 12, -3, 13, 1, 11, 0, 3, 3, 10, -2, 13, -1, 11, 0, 5, -2,
            10, 1, 13, 1, 11, 1, 3, -1, 5, 0, 4, 2, 10, -1, 12, -1, 13, -1, 11,
            1, 2, 3, 10, -3, 11, 0, 5, -2, 10, 1, 13, 1, 11, 2, 2, -2, 3, 0, 4,
            2, 10, -1, 12, 1, 13, -3, 11, 0, 3, 4, 10, -3, 13, -1, 11, 0, 4, 2,
            10, -2, 12, -1, 13, -1, 11, 1, 3, 4, 10, -1, 13, -3, 11, 0, 4, 2,
            10, -3, 12, -1, 13, -1, 11, 0, 3, 4, 10, -1, 12, -3, 11, 0, 3, 2,
            10, -3, 12, -1, 11, 0, 4, 4, 10, -1, 12, -2, 13, -1, 11, 0, 2, 4,
            10, -3, 11, 0, 3, 2, 10, -2, 12, -1, 11, 1, 4, 3, 10, -1, 12, -1,
            13, -1, 11, 0, 4, -2, 10, 1, 11, 2, 3, -2, 5, 0, 3, 4, 10, -2, 13,
            -1, 11, 0, 4, -2, 10, 1, 11, 2, 2, -2, 3, 0, 3, 2, 10, -1, 12, -1,
            11, 2, 3, -2, 10, 1, 12, 1, 14, 0, 4, -2, 10, 1, 11, 2, 3, -2, 4, 0,
            4, -2, 10, 1, 11, 1, 3, -1, 5, 0, 3, 3, 10, -1, 13, -1, 11, 0, 4,
            -2, 10, 1, 11, 3, 2, -4, 3, 0, 4, -2, 10, 1, 11, 1, 3, -2, 5, 0, 4,
            2, 10, -1, 12, -2, 13, 1, 11, 0, 4, -2, 10, 1, 11, 1, 2, -1, 3, 0,
            2, -1, 10, 1, 2, 0, 3, 2, 10, 2, 13, -3, 11, 0, 4, -2, 10, 1, 11, 2,
            2, -3, 3, 0, 3, 2, 12, -2, 13, 1, 11, 0, 4, 1, 10, -1, 12, 1, 13,
            -1, 11, 0, 3, -2, 10, 1, 11, 1, 5, 0, 4, 2, 10, -1, 11, 1, 3, -2, 4,
            0, 3, 2, 10, -2, 11, 1, 14, 0, 4, -2, 10, 1, 11, 8, 2, -13, 3, 0, 5,
            -2, 10, -1, 13, 1, 11, 18, 2, -16, 3, 0, 5, 2, 10, -1, 11, 4, 3, -8,
            4, 3, 5, 1, 2, 2, 10, -1, 11, 1, 5, -2, 10, 1, 11, 4, 3, -8, 4, 3,
            5, 1, 5, 2, 10, -1, 13, -1, 11, 18, 2, -16, 3, 0, 4, 2, 10, -1, 11,
            8, 2, -13, 3, 0, 2, -2, 10, 1, 14, 1, 4, -2, 10, 1, 11, 1, 3, -2, 4,
            0, 3, 2, 10, -1, 11, 1, 5, 0, 2, 2, 12, -1, 11, 0, 4, 3, 10, 1, 12,
            -1, 13, -1, 11, 0, 4, 2, 10, -1, 11, 2, 2, -3, 3, 0, 3, 2, 10, -2,
            13, 1, 11, 0, 4, 2, 10, -1, 11, 1, 2, -1, 3, 0, 3, 1, 10, 1, 2, -2,
            3, 0, 3, 1, 12, -2, 13, 1, 11, 1, 3, 1, 10, 1, 13, -1, 11, 0, 4, 2,
            10, -1, 11, 1, 3, -1, 5, 0, 3, 2, 10, 1, 12, -1, 11, 2, 3, -2, 10,
            -1, 12, 1, 14, 0, 2, 1, 12, -1, 11, 1, 3, 1, 10, -1, 13, 1, 11, 0,
            4, 2, 10, -1, 11, 2, 2, -2, 3, 0, 3, 1, 10, 2, 2, -3, 3, 0, 4, 2,
            10, 1, 12, -2, 13, 1, 11, 0, 3, -1, 10, 1, 2, -2, 3, 0, 3, -1, 11,
            1, 2, -1, 3, 0, 2, 2, 13, -1, 11, 0, 2, -2, 13, 1, 14, 0, 4, 2, 10,
            -1, 11, 2, 3, -2, 5, 0, 4, 2, 10, -1, 11, 3, 2, -3, 3, 0, 4, 2, 10,
            2, 12, -2, 13, -1, 11, 0, 3, 1, 10, 1, 3, -2, 5, 0, 4, 1, 10, 1, 12,
            1, 13, -1, 11, 0, 3, 1, 10, 3, 2, -4, 3, 0, 3, 1, 10, 1, 3, -1, 5,
            0, 3, 1, 10, 1, 3, -2, 6, 0, 3, 1, 10, 2, 3, -2, 4, 0, 4, 1, 10, 1,
            12, -1, 13, -1, 11, 0, 3, 2, 10, 2, 12, -1, 11, 2, 4, 1, 10, 1, 3,
            2, 5, -5, 6, 1, 1, 1, 14, 2, 3, 1, 10, 8, 2, -12, 3, 1, 5, -2, 10,
            1, 13, -1, 11, 20, 2, -21, 3, 0, 5, 2, 10, -2, 13, 1, 11, 2, 3, -3,
            5, 0, 3, 1, 10, 1, 3, 1, 6, 0, 4, -1, 13, -1, 11, 26, 2, -29, 3, 0,
            3, -1, 11, 8, 2, -13, 3, 0, 4, -1, 13, -1, 11, 18, 2, -16, 3, 2, 4,
            -1, 13, 1, 11, 10, 2, -3, 3, 1, 1, 1, 11, 3, 4, -1, 13, -1, 11, 10,
            2, -3, 3, 1, 4, -1, 13, 1, 11, 18, 2, -16, 3, 2, 3, 1, 11, 8, 2,
            -13, 3, 0, 2, 1, 10, 2, 4, 0, 4, 2, 10, -1, 11, 5, 2, -6, 3, 1, 5,
            2, 10, -2, 13, -1, 11, 2, 3, -3, 5, 0, 5, -2, 10, 1, 13, 1, 11, 20,
            2, -21, 3, 0, 3, 1, 10, 1, 3, 1, 5, 0, 2, -2, 11, 1, 14, 0, 5, 2,
            10, -2, 13, 1, 11, 2, 3, -2, 5, 0, 3, 1, 10, 5, 2, -7, 3, 0, 4, 1,
            10, 1, 12, -1, 13, 1, 11, 0, 3, 1, 10, 2, 2, -2, 3, 0, 4, 2, 10, 2,
            12, -2, 13, 1, 11, 0, 2, 2, 13, -3, 11, 0, 4, 2, 10, -1, 11, 4, 2,
            -4, 3, 0, 3, 1, 10, 4, 2, -5, 3, 0, 3, 1, 10, -3, 13, 1, 11, 0, 2,
            1, 10, 1, 2, 0, 3, 1, 11, 1, 2, -1, 3, 0, 4, 2, 10, -1, 11, 3, 3,
            -3, 5, 0, 3, 1, 12, 2, 13, -1, 11, 1, 4, 2, 10, 1, 12, -2, 13, -1,
            11, 0, 3, 1, 10, -1, 13, -1, 11, 0, 3, 1, 11, 1, 3, -1, 5, 0, 2, 1,
            12, 1, 11, 2, 4, 2, 10, -1, 11, 5, 2, -5, 3, 0, 3, 1, 10, 5, 2, -6,
            3, 0, 3, 2, 10, 1, 12, -3, 11, 0, 3, 1, 10, 2, 2, -1, 3, 0, 3, 2,
            10, -4, 13, 1, 11, 0, 3, -2, 10, 2, 13, 1, 14, 0, 3, 2, 10, -2, 13,
            -1, 11, 0, 3, 1, 10, 3, 2, -2, 3, 0, 4, 1, 10, -1, 12, -1, 13, -1,
            11, 0, 2, 2, 12, 1, 11, 0, 2, 2, 10, -3, 11, 0, 3, 1, 10, 4, 2, -3,
            3, 0, 4, 2, 10, -1, 12, -2, 13, -1, 11, 1, 3, 2, 10, -1, 12, -3, 11,
            0, 3, 4, 10, -4, 13, -1, 11, 0, 4, 2, 10, -2, 12, -2, 13, -1, 11, 0,
            4, 4, 10, -2, 12, -1, 13, -1, 11, 0, 3, 6, 10, -3, 13, -1, 11, 0, 4,
            4, 10, -1, 12, -1, 13, -1, 11, 1, 4, 2, 10, -3, 12, -1, 13, 1, 11,
            0, 3, 5, 10, -2, 13, -1, 11, 0, 3, 4, 10, 1, 13, -3, 11, 0, 4, 2,
            10, -2, 12, 1, 13, -1, 11, 0, 3, 3, 10, -1, 12, -1, 11, 0, 3, 4, 10,
            -1, 13, -1, 11, 0, 4, 2, 10, -2, 12, -1, 13, 1, 11, 1, 3, 4, 10, -3,
            13, 1, 11, 0, 4, 2, 10, -1, 12, 1, 13, -1, 11, 1, 5, -2, 10, 1, 13,
            -1, 11, 2, 2, -2, 3, 0, 2, 3, 10, -1, 11, 0, 4, 4, 10, 1, 12, -1,
            13, -1, 11, 0, 4, 2, 10, -1, 12, -1, 13, 1, 11, 2, 5, -2, 10, 1, 13,
            -1, 11, 1, 3, -1, 5, 0, 3, 3, 10, -2, 13, 1, 11, 0, 5, -2, 10, 1,
            13, -1, 11, 1, 2, -1, 3, 0, 3, 2, 10, 1, 13, -1, 11, 0, 3, -2, 10,
            -1, 13, 1, 14, 0, 3, 2, 12, -1, 13, -1, 11, 1, 3, 3, 10, 1, 12, -1,
            11, 0, 3, 1, 10, -1, 12, 1, 11, 0, 4, -1, 13, -1, 11, 3, 2, -3, 3,
            0, 4, -1, 13, -1, 11, 2, 3, -2, 5, 0, 3, 2, 10, -1, 13, 1, 14, 0, 4,
            -2, 10, -1, 11, 18, 2, -16, 3, 0, 6, 2, 10, -1, 13, 1, 11, 4, 3, -8,
            4, 3, 5, 0, 3, 2, 10, -1, 13, 1, 11, 0, 6, -2, 10, 1, 13, -1, 11, 4,
            3, -8, 4, 3, 5, 0, 5, 2, 10, -2, 13, 1, 11, 18, 2, -16, 3, 0, 4, -2,
            10, 1, 13, -2, 11, 1, 14, 0, 3, 1, 12, -3, 13, 1, 11, 0, 3, 1, 10,
            2, 13, -1, 11, 0, 4, 2, 10, 1, 12, 1, 13, -1, 11, 1, 3, 1, 12, -1,
            13, -1, 11, 1, 4, -1, 13, -1, 11, 1, 3, -1, 5, 0, 2, 1, 10, 1, 11,
            0, 4, 2, 10, 1, 12, -1, 13, 1, 11, 1, 3, 1, 12, 1, 13, -3, 11, 0, 4,
            -1, 13, -1, 11, 1, 2, -1, 3, 0, 5, 2, 10, -1, 13, 1, 11, 2, 2, -2,
            3, 0, 2, 3, 13, -1, 11, 0, 4, 1, 10, 1, 12, -2, 13, -1, 11, 0, 4, 2,
            10, 2, 12, 1, 13, -1, 11, 0, 2, 1, 13, 1, 14, 1, 5, 2, 10, -1, 13,
            1, 11, 2, 3, -3, 5, 0, 4, -2, 13, -1, 11, 18, 2, -16, 3, 1, 5, 1,
            13, 1, 11, 4, 3, -8, 4, 3, 5, 0, 2, 1, 13, 1, 11, 0, 5, -1, 13, -1,
            11, 4, 3, -8, 4, 3, 5, 0, 3, 1, 11, 18, 2, -16, 3, 1, 3, -1, 13, -2,
            11, 1, 14, 0, 5, 2, 10, -1, 13, 1, 11, 2, 3, -2, 5, 0, 5, 2, 10, -1,
            13, 1, 11, 3, 2, -3, 3, 0, 3, 1, 10, 1, 12, 1, 11, 1, 4, 2, 10, 2,
            12, -1, 13, 1, 11, 1, 2, 1, 13, -3, 11, 0, 4, 1, 13, 1, 11, 1, 2,
            -1, 3, 0, 3, 1, 12, 3, 13, -1, 11, 0, 4, 2, 10, 1, 12, -3, 13, -1,
            11, 0, 3, 1, 10, -2, 13, -1, 11, 0, 4, 1, 13, 1, 11, 1, 3, -1, 5, 0,
            3, 1, 12, 1, 13, 1, 11, 1, 2, 1, 10, -3, 11, 0, 3, 1, 12, -1, 13, 3,
            11, 0, 3, 2, 10, -3, 13, -1, 11, 0, 3, 2, 12, 1, 13, 1, 11, 0, 3, 2,
            10, -1, 13, -3, 11, 0, 4, 2, 10, -1, 12, -3, 13, -1, 11, 0, 4, 2,
            10, -1, 12, -1, 13, -3, 11, 0, 4, 6, 10, -1, 12, -2, 13, -1, 11, 0,
            3, 4, 10, -2, 12, -1, 11, 0, 3, 6, 10, -2, 13, -1, 11, 0, 4, 4, 10,
            -2, 12, -2, 13, 1, 11, 0, 3, 4, 10, -1, 12, -1, 11, 1, 3, 2, 10, -3,
            12, 1, 11, 0, 3, 5, 10, -1, 13, -1, 11, 0, 4, 4, 10, -1, 12, -2, 13,
            1, 11, 0, 4, 2, 10, -2, 12, 2, 13, -1, 11, 0, 2, 4, 10, -1, 11, 0,
            3, 2, 10, -2, 12, 1, 11, 1, 4, 3, 10, -1, 12, -1, 13, 1, 11, 0, 3,
            4, 10, -2, 13, 1, 11, 0, 4, 2, 10, -1, 12, 2, 13, -1, 11, 0, 4, -2,
            10, -1, 11, 2, 2, -2, 3, 0, 3, 3, 10, 1, 13, -1, 11, 0, 3, 4, 10, 1,
            12, -1, 11, 0, 3, 2, 10, -1, 12, 1, 11, 2, 4, -2, 10, -1, 11, 1, 3,
            -1, 5, 0, 3, 3, 10, -1, 13, 1, 11, 0, 4, 4, 10, 1, 12, -2, 13, 1,
            11, 0, 3, 2, 10, 2, 13, -1, 11, 0, 3, 2, 12, -2, 13, -1, 11, 0, 4,
            1, 10, -1, 12, 1, 13, 1, 11, 0, 2, 2, 10, 1, 14, 0, 5, -2, 10, -1,
            13, -1, 11, 18, 2, -16, 3, 0, 2, 2, 10, 1, 11, 1, 5, 2, 10, -1, 13,
            1, 11, 18, 2, -16, 3, 0, 3, -2, 10, -2, 11, 1, 14, 0, 4, 3, 10, 1,
            12, -1, 13, 1, 11, 0, 3, 2, 10, -2, 13, 3, 11, 0, 4, 2, 10, 1, 12,
            2, 13, -1, 11, 0, 3, 1, 12, -2, 13, -1, 11, 1, 3, 1, 10, 1, 13, 1,
            11, 0, 3, 2, 10, 1, 12, 1, 11, 1, 2, 4, 13, -1, 11, 0, 2, 2, 13, 1,
            14, 0, 4, -3, 13, -1, 11, 18, 2, -16, 3, 0, 2, 2, 13, 1, 11, 0, 4,
            1, 13, 1, 11, 18, 2, -16, 3, 0, 4, 2, 10, 1, 11, 2, 3, -2, 5, 0, 4,
            1, 10, 1, 12, 1, 13, 1, 11, 0, 3, 2, 10, 2, 12, 1, 11, 0, 2, 2, 11,
            1, 14, 0, 1, 3, 11, 0, 3, 1, 10, -3, 13, -1, 11, 0, 3, 1, 12, 2, 13,
            1, 11, 1, 2, 1, 12, 3, 11, 0, 3, 2, 10, -4, 13, -1, 11, 0, 3, 2, 12,
            2, 13, 1, 11, 0, 3, 2, 10, -2, 13, -3, 11, 0, 4, 6, 10, -1, 12, -1,
            13, -1, 11, 0, 3, 6, 10, -1, 13, -1, 11, 0, 4, 4, 10, -2, 12, -1,
            13, 1, 11, 0, 3, 6, 10, -3, 13, 1, 11, 0, 4, 4, 10, -1, 12, 1, 13,
            -1, 11, 0, 4, 4, 10, -1, 12, -1, 13, 1, 11, 1, 3, 5, 10, -2, 13, 1,
            11, 0, 3, 4, 10, 1, 13, -1, 11, 0, 4, 2, 10, -2, 12, 1, 13, 1, 11,
            0, 3, 4, 10, -1, 13, 1, 11, 0, 4, 2, 10, -1, 12, 3, 13, -1, 11, 0,
            4, 4, 10, 1, 12, 1, 13, -1, 11, 0, 4, 2, 10, -1, 12, 1, 13, 1, 11,
            1, 2, 3, 10, 1, 11, 0, 4, 4, 10, 1, 12, -1, 13, 1, 11, 0, 4, 2, 10,
            -1, 12, -1, 13, 3, 11, 0, 3, 2, 10, 3, 13, -1, 11, 0, 3, 2, 10, 1,
            13, 1, 14, 0, 3, 2, 10, 1, 13, 1, 11, 0, 3, 3, 10, 1, 12, 1, 11, 0,
            3, 2, 10, -1, 13, 3, 11, 0, 4, 2, 10, 1, 12, 3, 13, -1, 11, 0, 3, 1,
            12, -3, 13, -1, 11, 0, 3, 1, 10, 2, 13, 1, 11, 0, 4, 2, 10, 1, 12,
            1, 13, 1, 11, 1, 3, 1, 12, -1, 13, -3, 11, 0, 2, 1, 10, 3, 11, 0, 2,
            5, 13, -1, 11, 0, 2, 3, 13, 1, 11, 0, 4, 1, 10, 1, 12, 2, 13, 1, 11,
            0, 2, 1, 13, 3, 11, 0, 3, 1, 12, 3, 13, 1, 11, 0, 3, 1, 12, 1, 13,
            3, 11, 0, 3, 2, 10, -5, 13, -1, 11, 0, 3, 6, 10, -1, 12, -1, 11, 0,
            4, 6, 10, -1, 12, -2, 13, 1, 11, 0, 2, 6, 10, -1, 11, 0, 3, 4, 10,
            -2, 12, 1, 11, 0, 3, 6, 10, -2, 13, 1, 11, 0, 4, 4, 10, -1, 12, 2,
            13, -1, 11, 0, 3, 4, 10, -1, 12, 1, 11, 0, 3, 4, 10, 2, 13, -1, 11,
            0, 4, 2, 10, -2, 12, 2, 13, 1, 11, 0, 2, 4, 10, 1, 11, 0, 3, 4, 10,
            -2, 13, 3, 11, 0, 4, 2, 10, -1, 12, 2, 13, 1, 11, 0, 3, 3, 10, 1,
            13, 1, 11, 0, 3, 4, 10, 1, 12, 1, 11, 0, 3, 2, 10, -1, 12, 3, 11, 0,
            3, 2, 10, 4, 13, -1, 11, 0, 3, 2, 10, 2, 13, 1, 11, 0, 2, 2, 10, 3,
            11, 0, 3, 1, 12, -4, 13, -1, 11, 0, 3, 1, 10, 3, 13, 1, 11, 0, 4, 2,
            10, 1, 12, 2, 13, 1, 11, 0, 2, 4, 13, 1, 11, 0, 2, 2, 13, 3, 11, 0,
            1, 5, 11, 0, 3, 1, 12, 4, 13, 1, 11, 0, 4, 6, 10, -1, 12, -1, 13, 1,
            11, 0, 3, 6, 10, 1, 13, -1, 11, 0, 3, 6, 10, -1, 13, 1, 11, 0, 4, 4,
            10, -1, 12, 1, 13, 1, 11, 0, 3, 4, 10, 1, 13, 1, 11, 0, 3, 4, 10,
            -1, 13, 3, 11, 0, 4, 2, 10, -1, 12, 3, 13, 1, 11, 0, 4, 4, 10, 1,
            12, 1, 13, 1, 11, 0, 3, 2, 10, 3, 13, 1, 11, 0, 3, 2, 10, 1, 13, 3,
            11, 0, 2, 5, 13, 1, 11, 0, 2, 3, 13, 3, 11, 0, 2, 6, 10, 1, 11, 0,
            3, 4, 10, 2, 13, 1, 11, 0, 3, 2, 10, 4, 13, 1, 11, 0, -1,
          ],
        };
      class b {
        constructor(e) {
          (this.jdeps = -1),
            (this.eps = 0),
            (this.coseps = 0),
            (this.sineps = 0),
            (this.julianDate = e),
            (this.calcEpsilon = this.calcEpsilon.bind(this)),
            this.calcEpsilon();
        }
        calcEpsilon() {
          var e;
          return (
            (e = y.timeInJulianCenturies(this.julianDate)),
            (e /= 10),
            (this.eps =
              (((((((((2.45e-10 * e + 5.79e-9) * e + 2.787e-7) * e + 712e-9) *
                e -
                3905e-8) *
                e -
                0.0024967) *
                e -
                0.005138) *
                e +
                1.9989) *
                e -
                0.0175) *
                e -
                468.3396) *
                e +
              84381.406173),
            (this.eps *= u),
            (this.coseps = Math.cos(this.eps)),
            (this.sineps = Math.sin(this.eps)),
            (this.jdeps = this.julianDate),
            {
              jdeps: this.jdeps,
              eps: this.eps,
              coseps: this.coseps,
              sineps: this.sineps,
            }
          );
        }
      }
      const _ = (e, t, n, i = { ss: [], cc: [] }) => {
          const a = Math.sin(t),
            o = Math.cos(t);
          let r, s, c;
          (i.ss[e] = []),
            (i.cc[e] = []),
            (i.ss[e][0] = a),
            (i.cc[e][0] = o),
            (s = 2 * a * o),
            (r = o * o - a * a),
            (i.ss[e][1] = s),
            (i.cc[e][1] = r);
          for (let t = 2; t < n; t++)
            (c = a * r + o * s),
              (r = o * r - a * s),
              (s = c),
              (i.ss[e][t] = s),
              (i.cc[e][t] = r);
          return i;
        },
        A = (e) => {
          let t = [];
          var n, i, a;
          return (
            (a = (i = y.timeInJulianCenturies(e)) * i),
            (n = y.mods3600(538101628.6889819 * i + 908103.213)),
            (n += (639e-8 * i - 0.0192789) * a),
            (t[0] = u * n),
            (n = y.mods3600(210664136.4335482 * i + 655127.236)),
            (n += (-627e-8 * i + 0.0059381) * a),
            (t[1] = u * n),
            (n = y.mods3600(129597742.283429 * i + 361679.198)),
            (n += (-523e-8 * i - 0.0204411) * a),
            (t[2] = u * n),
            (n = y.mods3600(68905077.493988 * i + 1279558.751)),
            (n += (-1043e-8 * i + 0.0094264) * a),
            (t[3] = u * n),
            (n = y.mods3600(10925660.377991 * i + 123665.42)),
            (n +=
              ((((-3.4e-10 * i + 5.91e-8) * i + 4667e-9) * i + 5706e-8) * i -
                0.3060378) *
              a),
            (t[4] = u * n),
            (n = y.mods3600(4399609.855372 * i + 180278.752)),
            (n +=
              ((((8.3e-10 * i - 1.452e-7) * i - 11484e-9) * i - 16618e-8) * i +
                0.7561614) *
              a),
            (t[5] = u * n),
            (n =
              y.mods3600(1542481.193933 * i + 1130597.971) +
              (2156e-8 * i - 0.0175083) * a),
            (t[6] = u * n),
            (n =
              y.mods3600(786550.320744 * i + 1095655.149) +
              (-895e-8 * i + 0.0021103) * a),
            (t[7] = u * n),
            (n = y.mods3600(1602961600.9939659 * i + 1072261.2202445078)),
            (n +=
              (((((-3207663637426e-25 * i + 2555243317839e-23) * i +
                2.560078201452e-9) *
                i -
                3702060118571e-17) *
                i +
                0.006949274683605842) *
                i -
                6.735220237445752) *
              a),
            (t[9] = u * n),
            (n = y.mods3600(1739527262.8437717 * i + 335779.5141288474)),
            (n +=
              (((((4474984866301e-25 * i + 4189032191814e-23) * i -
                2.790392351314e-9) *
                i -
                2165750777942e-18) *
                i -
                0.0007531187848233799) *
                i -
                13.117809789650071) *
              a),
            (t[10] = u * n),
            (n = y.mods3600(129596581.0230432 * i + 1287102.7407441526)),
            (n +=
              ((((((((1.62e-20 * i - 1039e-20) * i - 383508e-20) * i +
                4237343e-19) *
                i +
                88555011e-18) *
                i -
                4.77258489e-8) *
                i -
                11297037031e-15) *
                i +
                874737173673247e-19) *
                i -
                0.5528130642178309) *
              a),
            (t[11] = u * n),
            (n = y.mods3600(1717915922.8846793 * i + 485868.1746582533)),
            (n +=
              (((((-1755312760154e-24 * i + 3452144225877e-23) * i -
                2.506365935364e-8) *
                i -
                0.0002536291235258) *
                i +
                0.05209964130273582) *
                i +
                31.501359071894147) *
              a),
            (t[12] = u * n),
            (n = y.mods3600(1732564372.0442266 * i + 785939.8092105242)),
            (n +=
              (((((7200592540556e-26 * i + 2.235210987108e-10) * i -
                1.024222633731e-8) *
                i -
                6073960534117e-17) *
                i +
                0.006901724852838049) *
                i -
                5.65504600274714) *
              a),
            (t[13] = u * n),
            (n =
              (((((((((-8.66e-20 * i - 4759e-20) * i + 2424e-18) * i +
                13095e-16) *
                i +
                1.7451e-10) *
                i -
                1.8055e-8) *
                i -
                235316e-10) *
                i +
                76e-6) *
                i +
                1.105414) *
                i +
                5028.791959) *
              i),
            (n = y.mods3600(44817540.9 * i + 806045.7)),
            (t[14] = u * n),
            (n = y.mods3600(5364867.87 * i - 391702.8)),
            (t[15] = u * n),
            (n = y.mods3600(1735730 * i)),
            (t[17] = u * n),
            t
          );
        },
        x = (e, t, n, a) => {
          var o, r, s, c, l;
          (o = (n = ((e, t, n) => {
            var a, o, r, s, c, l, u, h, d, p, m, g, f, M, y, v, D, b, x, L;
            const C = A(e);
            (D = (e - i) / t.timescale), (c = t.maxargs);
            let S = { ss: [], cc: [] };
            for (a = 0; a < c; a++)
              (o = t.max_harmonic[a]) > 0 && (S = _(a, C[a], o, S));
            (p = t.arg_tbl), (m = t.lon_tbl), (g = t.rad_tbl);
            var w = 0,
              T = 0,
              E = 0;
            for (x = 0, L = 0; !((h = p[w++]) < 0); )
              if (0 != h) {
                for (l = 0, v = 0, y = 0, u = 0; u < h; u++)
                  (o = p[w++]),
                    (s = p[w++] - 1),
                    o &&
                      ((r = o < 0 ? -o : o),
                      (r -= 1),
                      (f = S.ss[s][r]),
                      o < 0 && (f = -f),
                      (M = S.cc[s][r]),
                      0 == l
                        ? ((y = f), (v = M), (l = 1))
                        : ((b = f * v + M * y), (v = M * v - f * y), (y = b)));
                for (d = p[w++], M = m[T++], f = m[T++], u = 0; u < d; u++)
                  (M = M * D + m[T++]), (f = f * D + m[T++]);
                for (
                  x += M * v + f * y, M = g[E++], f = g[E++], u = 0;
                  u < d;
                  u++
                )
                  (M = M * D + g[E++]), (f = f * D + g[E++]);
                L += M * v + f * y;
              } else {
                for (d = p[w++], M = m[T++], u = 0; u < d; u++)
                  M = M * D + m[T++];
                for (x += M, M = g[E++], u = 0; u < d; u++) M = M * D + g[E++];
                L += M;
              }
            return (b = t.trunclvl), (n[0] = b * x), (n[2] = b * L), n;
          })(e, v, n))[0]),
            (o += a) < -648e3 && (o += 1296e3),
            o > 648e3 && (o -= 1296e3),
            (n[0] = u * o),
            (o = ((e, t) => {
              var n, a, o, r, s, c, l, u, h, d, p, m, g, f, M, y, v;
              M = (e - i) / t.timescale;
              const D = A(e);
              let b = { ss: [], cc: [] };
              for (n = 0; n < D.length; n++)
                (a = t.max_harmonic[n]) > 0 && (b = _(n, D[n], a, b));
              (h = t.arg_tbl), (d = t.lon_tbl), (v = 0);
              for (var x = 0, L = 0; !((l = h[x++]) < 0); )
                if (0 != l) {
                  for (s = 0, f = 0, g = 0, c = 0; c < l; c++)
                    (a = h[x++]),
                      (r = h[x++] - 1),
                      a &&
                        ((o = a < 0 ? -a : a),
                        (o -= 1),
                        (p = b.ss[r][o]),
                        a < 0 && (p = -p),
                        (m = b.cc[r][o]),
                        0 == s
                          ? ((g = p), (f = m), (s = 1))
                          : ((y = p * f + m * g),
                            (f = m * f - p * g),
                            (g = y)));
                  for (u = h[x++], m = d[L++], p = d[L++], c = 0; c < u; c++)
                    (m = m * M + d[L++]), (p = p * M + d[L++]);
                  v += m * f + p * g;
                } else {
                  for (u = h[x++], m = d[L++], c = 0; c < u; c++)
                    m = m * M + d[L++];
                  v += m;
                }
              return t.trunclvl * v;
            })(e, D)),
            (n[1] = u * o),
            (o = (1 + u * n[2]) * v.distance),
            (n[2] = o);
          const h = new b(e);
          return (
            (r = Math.cos(n[1])),
            (s = Math.sin(n[1])),
            (c = Math.cos(n[0])),
            (l = Math.sin(n[0])),
            (t[0] = r * c * o),
            (t[1] = (h.coseps * r * l - h.sineps * s) * o),
            (t[2] = (h.sineps * r * l + h.coseps * s) * o),
            t
          );
        },
        L = (e) => {
          return A(e)[13] * l;
        },
        C = {
          pAcof: [
            -8.66e-10, -4.759e-8, 2.424e-7, 13095e-9, 17451e-8, -0.0018055,
            -0.235316, 0.076, 110.5414, 50287.91959,
          ],
          nodecof: [
            66402e-20, -269151e-20, -1547021e-18, 7521313e-18, 1.9e-10,
            -3.54e-9, -1.8103e-7, 126e-9, 7436169e-11, -0.04207794833,
            3.052115282424,
          ],
          inclcof: [
            12147e-20, 73759e-21, -826287e-19, 250341e-18, 24650839e-18,
            -54000441e-18, 1.32115526e-9, -6.012e-7, -162442e-10, 0.00227850649,
            0,
          ],
          calc: (e, t, n) => {
            var a,
              o,
              r,
              s,
              c,
              l,
              h,
              d,
              p = [],
              m = 0;
            if (t == i) return e;
            let g;
            for (
              r = y.timeInJulianCenturies(t),
                g = new b(1 == n ? t : i),
                p[0] = e[0],
                l = g.coseps * e[1] + g.sineps * e[2],
                p[2] = -g.sineps * e[1] + g.coseps * e[2],
                p[1] = l,
                r /= 10,
                s = (h = C.pAcof)[m++],
                d = 0;
              d < 9;
              d++
            )
              s = s * r + h[m++];
            for (
              s *= u * r, m = 0, c = (h = C.nodecof)[m++], d = 0;
              d < 10;
              d++
            )
              c = c * r + h[m++];
            for (
              l = 1 == n ? c + s : c,
                o = Math.cos(l),
                a = Math.sin(l),
                l = o * p[0] + a * p[1],
                p[1] = -a * p[0] + o * p[1],
                p[0] = l,
                m = 0,
                l = (h = C.inclcof)[m++],
                d = 0;
              d < 10;
              d++
            )
              l = l * r + h[m++];
            for (
              1 == n && (l = -l),
                o = Math.cos(l),
                a = Math.sin(l),
                l = o * p[1] + a * p[2],
                p[2] = -a * p[1] + o * p[2],
                p[1] = l,
                l = 1 == n ? -c : -c - s,
                o = Math.cos(l),
                a = Math.sin(l),
                l = o * p[0] + a * p[1],
                p[1] = -a * p[0] + o * p[1],
                p[0] = l,
                l = (g = new b(1 == n ? i : t)).coseps * p[1] - g.sineps * p[2],
                p[2] = g.sineps * p[1] + g.coseps * p[2],
                p[1] = l,
                d = 0;
              d < 3;
              d++
            )
              e[d] = p[d];
            return e;
          },
        },
        S = {};
      (S.calc = (e, t, n, a) => {
        const o = !(n && a);
        var r, c, l, h, d, p, m, g, v, D, x, L, w, T, E, P, j;
        if (((n = n || []), (a = a || []), t.ptable))
          (c = (a =
            "earth" == t.key
              ? ((e, t, n, a) => {
                  var o,
                    r,
                    s,
                    c,
                    l,
                    h,
                    d,
                    p,
                    m,
                    g,
                    f,
                    M,
                    y,
                    v,
                    D,
                    b,
                    x,
                    L,
                    C,
                    S,
                    w,
                    T;
                  const E = A(e);
                  (L = (e - i) / t.timescale), (l = t.maxargs);
                  let P = { ss: [], cc: [] };
                  for (o = 0; o < l; o++)
                    (r = t.max_harmonic[o]) > 0 && (P = _(o, E[o], r, P));
                  (g = t.arg_tbl),
                    (f = t.lon_tbl),
                    (M = t.lat_tbl),
                    (y = t.rad_tbl),
                    (S = 0),
                    (w = 0),
                    (T = 0);
                  for (var j = 0, U = 0, B = 0, q = 0; !((p = g[j++]) < 0); )
                    if (0 != p) {
                      for (h = 0, x = 0, b = 0, d = 0; d < p; d++)
                        (r = g[j++]),
                          (c = g[j++] - 1),
                          r &&
                            ((s = r < 0 ? -r : r),
                            (s -= 1),
                            (v = P.ss[c][s]),
                            r < 0 && (v = -v),
                            (D = P.cc[c][s]),
                            0 == h
                              ? ((b = v), (x = D), (h = 1))
                              : ((C = v * x + D * b),
                                (x = D * x - v * b),
                                (b = C)));
                      for (
                        m = g[j++], D = f[U++], v = f[U++], d = 0;
                        d < m;
                        d++
                      )
                        (D = D * L + f[U++]), (v = v * L + f[U++]);
                      for (
                        S += D * x + v * b, D = M[B++], v = M[B++], d = 0;
                        d < m;
                        d++
                      )
                        (D = D * L + M[B++]), (v = v * L + M[B++]);
                      for (
                        w += D * x + v * b, D = y[q++], v = y[q++], d = 0;
                        d < m;
                        d++
                      )
                        (D = D * L + y[q++]), (v = v * L + y[q++]);
                      T += D * x + v * b;
                    } else {
                      for (m = g[j++], D = f[U++], d = 0; d < m; d++)
                        D = D * L + f[U++];
                      for (S += D, D = M[B++], d = 0; d < m; d++)
                        D = D * L + M[B++];
                      for (w += D, D = y[q++], d = 0; d < m; d++)
                        D = D * L + y[q++];
                      T += D;
                    }
                  return (
                    (C = t.trunclvl),
                    (n[0] = E[a - 1] + u * C * S),
                    (n[1] = u * C * w),
                    (n[2] = t.distance * (1 + u * C * T)),
                    n
                  );
                })(e, t.ptable, a, 3)
              : ((e, t, n) => {
                  var a,
                    o,
                    r,
                    s,
                    c,
                    l,
                    h,
                    d,
                    p,
                    m,
                    g,
                    v,
                    D,
                    b,
                    A,
                    x,
                    L,
                    C,
                    S,
                    w,
                    T,
                    E;
                  (c = (e - i) / t.timescale), (b = t.maxargs);
                  let P = { ss: [], cc: [] };
                  for (m = 0; m < b; m++)
                    (g = t.max_harmonic[m]) > 0 &&
                      ((p = (y.mods3600(f[m] * c) + M[m]) * u),
                      (P = _(m, p, g, P)));
                  (S = t.arg_tbl),
                    (w = t.lon_tbl),
                    (T = t.lat_tbl),
                    (E = t.rad_tbl),
                    (h = 0),
                    (d = 0),
                    (p = 0);
                  for (var j = 0, U = 0, B = 0, q = 0; !((L = S[j++]) < 0); )
                    if (0 != L) {
                      for (A = 0, s = 0, r = 0, x = 0; x < L; x++)
                        (g = S[j++]),
                          (D = S[j++] - 1),
                          g &&
                            ((v = g),
                            g < 0 && (v = -v),
                            (v -= 1),
                            (a = P.ss[D][v]),
                            g < 0 && (a = -a),
                            (o = P.cc[D][v]),
                            0 == A
                              ? ((r = a), (s = o), (A = 1))
                              : ((l = a * s + o * r),
                                (s = o * s - a * r),
                                (r = l)));
                      for (
                        C = S[j++], o = w[U++], a = w[U++], x = 0;
                        x < C;
                        x++
                      )
                        (o = o * c + w[U++]), (a = a * c + w[U++]);
                      for (
                        h += o * s + a * r, o = T[B++], a = T[B++], x = 0;
                        x < C;
                        x++
                      )
                        (o = o * c + T[B++]), (a = a * c + T[B++]);
                      for (
                        d += o * s + a * r, o = E[q++], a = E[q++], x = 0;
                        x < C;
                        x++
                      )
                        (o = o * c + E[q++]), (a = a * c + E[q++]);
                      p += o * s + a * r;
                    } else {
                      for (C = S[j++], o = w[U++], x = 0; x < C; x++)
                        o = o * c + w[U++];
                      for (h += y.mods3600(o), o = T[B++], x = 0; x < C; x++)
                        o = o * c + T[B++];
                      for (d += o, o = E[q++], x = 0; x < C; x++)
                        o = o * c + E[q++];
                      p += o;
                    }
                  return (
                    (n[0] = u * h),
                    (n[1] = u * d),
                    (n[2] = u * t.distance * p + t.distance),
                    n
                  );
                })(e, t.ptable, a))[0]),
            (t.longitude = c),
            (h = a[1]),
            (T = a[2]),
            (t.distance = T),
            (t.epoch = e),
            (t.equinox = i);
        else {
          if (
            ((p = t.epoch),
            (m = t.inclination),
            (g = t.node * s),
            (v = t.perihelion),
            (D = t.semiAxis),
            (x = t.dailyMotion),
            (L = t.eccentricity),
            (w = t.anomaly),
            1 == L)
          ) {
            for (
              h = (0.0364911624 * (e - p)) / (d = D * Math.sqrt(D)),
                c = 0,
                l = 1;
              Math.abs(l) > 1e-11;

            )
              (l = (d = (2 * c * (d = c * c) + h) / (3 * (1 + d))) - c),
                0 != d && (l /= d),
                (c = d);
            (T = D * (1 + c * c)), (l = Math.atan(c)), (r = (l *= 2) + s * v);
          } else if (L > 1) {
            for (
              c =
                (h =
                  (0.01720209895 * (e - p)) /
                  (d = (D /= L - 1) * Math.sqrt(D))) /
                (L - 1),
                l = 1;
              Math.abs(l) > 1e-11;

            )
              c += (l = -c + L * y.sinh(c) - h) / (1 - L * y.cosh(c));
            (T = D * (L * y.cosh(c) - 1)),
              (d = (L + 1) / (L - 1)),
              (l = Math.sqrt(d) * y.tanh(0.5 * c)),
              (r = (l = 2 * Math.atan(l)) + s * v);
          } else {
            0 == x && (x = 0.9856076686 / (t.semiAxis * Math.sqrt(t.semiAxis))),
              (l = s * (w + (x *= e - p))),
              (l = y.modtp(l)),
              t.longitude &&
                ((t.longitude += x), (t.longitude = y.mod360(t.longitude))),
              (c = l),
              (d = 1);
            do {
              c -= (d = c - L * Math.sin(c) - l) / (1 - L * Math.cos(c));
            } while (Math.abs(d) > 1e-11);
            (d = Math.sqrt((1 + L) / (1 - L))),
              (h = 2 * Math.atan(d * Math.tan(0.5 * c))),
              (h = y.modtp(h)),
              (w *= s),
              (r = t.longitude ? t.longitude * s + h - w - g : h + s * v),
              (T = (D * (1 - L * L)) / (1 + L * Math.cos(h)));
          }
          (E = Math.cos(r)),
            (P = Math.sin(r)),
            (m *= s),
            (h = P * Math.cos(m)),
            (c = y.zatan2(E, h) + g),
            (h = P * Math.sin(m)),
            (h = Math.asin(h));
        }
        (n[2] = T * Math.sin(h)),
          (j = Math.cos(h)),
          (n[1] = T * j * Math.sin(c)),
          (n[0] = T * j * Math.cos(c));
        let U = new b(t.equinox);
        return (
          (h = U.coseps * n[1] - U.sineps * n[2]),
          (l = U.sineps * n[1] + U.coseps * n[2]),
          (n[1] = h),
          (n[2] = l),
          (n = C.calc(n, t.equinox, 1)),
          "earth" == t.key && (T = S.embofs(e, n)),
          (h = (U = new b(i)).coseps * n[1] + U.sineps * n[2]),
          (l = -U.sineps * n[1] + U.coseps * n[2]),
          (c = y.zatan2(n[0], h)),
          (h = Math.asin(l / T)),
          (a[0] = c),
          (a[1] = h),
          (a[2] = T),
          o && (t.position = { rect: n, polar: a }),
          t
        );
      }),
        (S.embofs = (e, t) => {
          var n,
            i,
            a = [];
          const o = L(e);
          for (
            a = x(e, a, [], o),
              a = C.calc(a, e, 1),
              1 / 82.300585,
              n = 0,
              i = 0;
            i < 3;
            i++
          )
            (t[i] = t[i] - (1 / 82.300585) * a[i]), (n += t[i] * t[i]);
          return Math.sqrt(n);
        });
      const w = [
        { key: "sun", type: "sun", weight: 100 },
        { key: "moon", type: "luna" },
        {
          key: "mercury",
          type: "heliocentric",
          epoch: 2446800.5,
          inclination: 7.0048,
          node: 48.177,
          perihelion: 29.074,
          semiAxis: 0.387098,
          dailyMotion: 4.09236,
          eccentricity: 0.205628,
          anomaly: 198.7199,
          equinox: 2446800,
          magnitude: -0.42,
          semiDiameter: 3.36,
          ptable: {
            maxargs: 9,
            max_harmonic: [11, 14, 10, 11, 4, 5, 2, 0, 0],
            max_power_of_t: 6,
            distance: 0.3870983098,
            timescale: 3652500,
            trunclvl: 1,
            lon_tbl: [
              35.85255, -163.26379, 53810162857.56026, 908082.18475, 0.05214,
              -0.07712, 1.07258, 0.04008, 0.49259, 0.0023, 0.02324, 0.05869,
              0.24516, 0.22898, -0.06037, 0.13023, 0.00331, -0.03576, 0.06464,
              89e-5, 0.03103, 0.05078, -0.01133, 0.0152, 0.14654, 0.07538,
              0.25112, -0.24473, -0.17928, -0.53366, -0.06367, 0.20458,
              -0.42985, 0.14848, -0.35317, -0.61364, 0.00325, -0.08617, -0.2318,
              0.08576, 0.22995, 0.43569, 1.92114, 2.89319, -5.55637, 4.70329,
              -4.91411, -5.45521, 0.02607, 0.04468, -0.05439, 0.13476, -0.07329,
              -0.00985, -0.00278, 0.05377, 0.07474, -0.09658, 0.29818, 0.20422,
              -0.29074, 0.44962, -0.15411, -0.04287, 0.29907, -1.02948, 3.62183,
              0.84869, -0.08157, 0.02754, -0.0361, -0.12909, 0.09195, -0.04424,
              -0.08845, 0.09347, -0.2714, 0.08185, 0.24783, 0.19543, -0.25154,
              0.41371, -46e-5, 0.01524, 0.04127, 0.06663, 0.43023, 0.1179,
              0.04427, 0.05329, 0.00411, -0.71074, -0.07111, -0.09824, 0.01264,
              -0.02075, -68e-5, -0.01678, 0.01186, 0.00181, 0.00302, -0.21963,
              -0.06412, -0.10155, -0.36856, 0.2024, 0.32282, 0.65133, -0.07178,
              -0.01876, 0.13399, -0.39522, 1.28413, 0.3379, 0.0504, -0.01679,
              -0.00794, 0.01117, 0.0263, 0.00575, -0.07113, -0.11414, 0.16422,
              -0.2306, 0.35198, 0.05409, 1.11486, -0.35833, 0.87313, 1.66304,
              -1.28434, 0.72067, 0.014, 0.00971, 0.21044, -0.87385, 3.2082,
              0.67957, -0.01716, 0.00111, -0.13776, -0.0265, -0.06778, 0.00908,
              0.00616, -0.0452, -0.31625, -0.61913, 0.36184, 0.09373, 0.00984,
              -0.03292, 0.01944, 0.0053, 0.00243, -0.00123, 0.01589, 0.02223,
              -0.02992, -0.01086, 4356.04809, -5859.86328, 2918.27323,
              -4796.67315, 510.24783, -1220.02233, 127.48927, 250.10654,
              3250.43013, -904.27614, -5667.40042, -22634.00922, -82471.79425,
              18615.92342, 0.01941, 0.00372, 0.0183, -0.00652, -0.02548,
              -0.01157, 0.00635, 0.02343, -0.0098, 0.00961, 0.12137, 0.10068,
              0.16676, -0.07257, -0.07267, -0.13761, 0.25305, -0.28112,
              -0.07974, 0.07866, -0.41726, 0.49991, -1.55187, -1.1415, 1.54754,
              -2.35141, -0.00862, 0.00808, 0.00218, -0.03726, 0.06914, -0.08986,
              -0.00501, 2.09577, -0.01409, -0.01842, 0.04138, 0.05961, -0.12276,
              -0.04929, -0.03963, -0.0608, -0.27697, -0.09329, -0.01011,
              0.00295, -0.01374, 0.01328, -0.00171, 0.25815, 0.01446, 0.00782,
              0.17909, -0.04683, 0.03765, -0.0499, 36e-5, 0.00528, 0.05508,
              -0.01369, -0.11751, -0.10624, -0.14448, 0.10522, -0.00884,
              0.43006, 0.01162, 0.01659, -76e-5, 0.10143, 0.55779, 0.0551,
              0.1235, -0.34025, 0.0132, 0.92985, -26e-5, -0.03426, 0.01305,
              41e-5, 0.13187, -0.11903, 58e-5, 0.09877, -33.1023, -41.96782,
              -268.28908, 174.29259, 731.20089, 1508.07639, 5223.99114,
              -3008.08849, -3909.34957, -9646.69156, 0.02988, 0.03182, 0.07149,
              0.04513, -0.02356, -0.01641, -0.03188, -0.03711, 0.15084,
              -0.22436, 0.61987, 0.25706, 0.02425, 0.012, -0.05543, -0.14435,
              -0.53398, 0.10997, 0.00465, -0.01893, 0.0126, -0.01314, 0.0065,
              -0.05499, -0.06804, 0.01608, 0.02134, 0.0416, 0.00636, 0.01293,
              -0.0347, -0.02697, -0.11323, 0.02409, -0.02618, 0.00827, 0.01879,
              0.16838, 0.08978, 0.01934, -0.23564, 0.05565, 0.03686, 0.02644,
              -0.02471, 0.00558, -140.22669, -120.40692, -501.88143, 434.05868,
              1044.54998, 1162.72084, 1527.78437, -882.37371, -0.00768, 0.02213,
              -0.0409, 0.16718, -0.05923, -0.12595, 0.01154, -25e-5, -0.00776,
              -0.01653, -0.01213, -0.02773, 0.00344, 0.0218, -0.02558, -0.05682,
              -0.0049, 0.0105, 38.75496, -78.17502, -189.907, -136.33371,
              -249.94062, 319.76423, 205.73478, 272.64549, -0.01132, -0.01071,
              -0.04607, -0.0039, 0.02903, -0.0207, 0.01326, -0.00901, 35.38435,
              7.45358, 31.08987, -70.52685, -92.13879, -51.58876, -51.80016,
              48.98102, -0.00124, -0.01159, 0.47335, 13.71886, 23.71637,
              5.55804, 10.0685, -25.65292, -11.853, -10.20802, -4.72861,
              1.27151, -0.47322, 7.46754, 6.99528, 1.79089, 2.05336, -2.90866,
              -1.97528, 0.72236, -0.25084, 1.90269, 0.72127, 0.41354, -0.30286,
              -0.53125, -0.50883, -0.012, -0.08301, 0.18083, -0.04286, -0.10963,
              -0.04544, -0.01645, -13e-5, -0.00986,
            ],
            lat_tbl: [
              68.33369, 422.77623, -2057.26405, -2522.29068, -3e-4, -9e-5,
              0.024, -0.06471, 0.02074, -0.00904, 44e-5, 0.00261, -0.00174,
              -88e-5, -27e-5, 3e-5, 5e-5, -4e-5, -36e-5, 0.002, 0.01432,
              0.01199, 6e-5, -4e-5, 0.00236, 0.00803, 0.01235, 0.00406,
              -0.03253, 0.00179, -0.00243, 0.00132, -0.00352, 11e-5, -0.00146,
              -0.01154, 0.00824, -0.01195, -0.01829, -0.00465, 0.1254, 0.09997,
              0.004, 0.00288, -0.02848, 0.01094, -0.02273, -0.07051, 0.01305,
              0.01078, -0.00119, 0.00136, -0.00107, -66e-5, 97e-5, -0.00315,
              0.0012, 0.0043, -0.0071, -0.00157, 0.06052, -0.04777, 0.00192,
              -0.00229, -0.02077, 0.00647, 0.06907, 0.07644, -0.00717, 0.00451,
              52e-5, -0.00262, 0.00345, 39e-5, -0.00674, 0.00346, -0.0288,
              0.00807, 54e-5, 0.00206, -0.01745, 0.00517, -44e-5, 49e-5,
              0.01749, 0.0123, 0.01703, 0.01563, 0.00934, 0.02372, 0.0161,
              -0.01136, 0.00186, -0.00503, 82e-5, -0.00673, 0.0017, -0.00539,
              42e-5, 37e-5, 0.00415, -0.0043, 0.00258, -0.00914, -0.01761,
              -0.00251, 0.15909, 0.13276, 0.02436, -0.00791, 0.00491, 0.0389,
              -0.02982, 0.05645, -3e-5, 0.00427, -0.00363, 0.00221, 77e-5,
              0.0013, 0.00131, -71e-5, 0.00796, 0.00453, 0.01186, 0.01631,
              0.12949, -0.02546, 0.03613, 0.32854, -0.43001, 0.01417, 34e-5,
              95e-5, -0.03268, 0.04034, 0.11407, 0.15049, -79e-5, -52e-5,
              -0.04009, 0.00988, -0.00259, -85e-5, 0.00221, -0.00133, 3e-5,
              -0.01733, 0.01055, 0.01976, 0.00222, 85e-5, 89e-5, 87e-5, 14e-5,
              1e-5, 0.00145, 0.00802, 0.00122, 68e-5, 947.79367, -1654.3969,
              542.00864, -1281.09901, 90.02068, -318.36115, -87.6709, 92.9196,
              376.98232, -419.10705, 5094.60412, 2476.97098, -18160.57888,
              16010.48165, 0.00621, -0.00128, 0.00186, -0.00153, -0.0079, 11e-5,
              -32e-5, 0.00165, -0.00277, 0.00539, 0.00552, 0.00682, 0.01086,
              -0.00978, -0.02292, -0.013, 0.0294, -0.04427, -0.02051, 0.0486,
              -0.0502, 0.29089, -0.50763, -0.049, 0.11177, -0.41357, -0.00222,
              0.00504, -6e-5, -0.00459, -0.00175, -0.02691, 0.05921, 0.18938,
              -0.00181, -0.00154, 0.00322, 0.00586, -0.01098, -0.0052, -0.00861,
              -0.01342, -0.02694, -0.00706, -0.00103, 12e-5, -0.00284, 0.00797,
              0.00743, 0.02523, 0.00872, 96e-5, 0.03155, -0.01644, 0.00414,
              -0.00583, 29e-5, 66e-5, 0.00935, -0.00619, -0.02498, -0.016,
              -0.03545, 0.07623, 0.01649, 0.06498, 0.00148, 0.00209, 0.00621,
              0.02014, 0.17407, -0.05022, -0.03485, -0.17012, 0.06164, 0.20059,
              -0.00804, -0.01475, 0.00296, -68e-5, 0.0188, -0.03797, 0.00608,
              0.0227, 5.89651, -6.62562, -37.41057, -10.51542, -47.22373,
              95.76862, 494.45951, -5.37252, -3991.04809, -2886.9775, 0.01232,
              0.00487, 0.03163, 0.00561, -0.01847, -0.00207, -0.10138, 0.0143,
              -0.04269, -0.22338, 0.24955, -0.02066, 0.01119, -0.00186, 0.03416,
              0.01805, -0.12498, 0.10385, -0.0021, -0.01011, 0.00346, -0.00682,
              -0.00683, -0.02227, -0.01649, 0.01259, 0.01392, 0.01174, 0.0044,
              0.00351, -0.02871, -0.00375, -0.0317, 0.02246, -0.00833, 0.00596,
              0.04081, 0.06666, 0.054, -0.02387, -0.07852, 0.05781, 0.01881,
              0.00324, -0.00868, 0.00606, -6.52157, -19.74446, -72.46009,
              43.12366, 321.78233, 215.45201, 452.61804, -1025.05619, 0.00119,
              0.01169, 0.02239, 0.09003, -0.05329, -0.03974, 0.00688, -0.00421,
              -0.00676, -0.00515, -0.01171, -0.00952, 0.01337, 0.0127, -0.02791,
              -0.02184, 58e-5, 0.00679, 8.42102, -11.87757, -49.07247,
              -25.34584, -43.54829, 161.26509, 261.70993, 56.25777, 0.00568,
              0.00871, -0.02656, 0.01582, 0.00875, -0.02114, 0.00464, -0.01075,
              9.08966, 1.3781, 3.44548, -27.44651, -59.62749, -0.73611,
              -0.77613, 65.72607, -0.00664, -0.00723, 1.04214, 4.7892, 11.67397,
              -1.84524, -4.16685, -19.14211, -16.14483, 3.02496, -1.9814,
              1.16261, 1.81526, 4.21224, 5.5902, -2.55741, -1.54151, -3.85817,
              -1.08723, 1.23372, 1.12378, 1.51554, 0.88937, -0.57631, -0.50549,
              -0.25617, -0.37618, 0.42163, 0.18902, 0.19575, -0.15402, -0.04062,
              -0.04017, 0.05717, -0.01665, -0.00199,
            ],
            rad_tbl: [
              -8.3049, -11.68232, 86.5488, 4361.05018, 2e-5, -1e-5, -0.01102,
              0.0041, 7e-5, -0.00276, 0.00117, 82e-5, 49e-5, 7e-5, 3e-5, -1e-5,
              12e-5, 5e-5, -0.00186, -0.00534, -0.03301, 0.01808, 8e-5, 5e-5,
              -0.00394, 0.00202, 0.02362, -0.00359, 0.00638, -0.06767, 0.00422,
              -0.00493, 0.0066, 0.00513, -0.00417, 0.00708, 0.05849, -0.00213,
              -0.07647, -0.16162, -0.30551, 0.13856, -0.02789, 0.01811,
              -0.04155, -0.06229, 0.05729, -0.03694, -0.03087, 0.0161, -0.00297,
              -0.00167, 41e-5, -0.00157, -0.00115, 58e-5, 0.00796, 0.00436,
              -0.01393, 0.02921, -0.05902, -0.02363, 0.00459, -0.01512, 0.10038,
              0.02964, -0.08369, 0.3457, -0.00749, -0.02653, 0.01361, -0.00326,
              0.00406, 0.00952, -0.00594, -0.00829, -0.02763, -0.09933,
              -0.04143, 0.05152, -0.08436, -0.05294, -0.00329, -16e-5, -0.0434,
              0.02566, -0.03027, 0.10904, 0.03665, -0.0307, 0.23525, 0.00182,
              0.03092, -0.02212, 0.01255, 0.00777, -0.01025, 42e-5, -65e-5,
              0.0044, 0.08688, 0.00136, 0.057, -0.03616, -0.11272, -0.20838,
              -0.37048, 0.18314, 0.00717, -0.02911, 0.15848, 0.05266, -0.13451,
              0.51639, 0.00688, 0.02029, 0.00596, 0.00423, -0.00253, 0.01196,
              0.05264, -0.03301, 0.10669, 0.07558, -0.02461, 0.16282, -0.18481,
              -0.57118, 0.85303, -0.44876, 0.3709, 0.65915, -0.00458, 0.0066,
              0.41186, 0.09829, -0.31999, 1.51149, -52e-5, -0.00809, 0.01384,
              -0.07114, -0.00435, -0.03237, 0.02162, 0.00294, 0.29742, -0.1543,
              -0.04508, 0.17436, 0.01577, 0.00485, -0.00258, 0.00946, 61e-5,
              0.00119, 0.01095, -0.00788, 0.0053, -0.01478, 2885.0638,
              2152.76256, 2361.91098, 1442.28586, 602.45147, 251.18991,
              -121.68155, 71.20167, 404.94753, 1607.3758, 11211.0409,
              -2905.3734, -9066.27933, -40747.62807, -0.00189, 0.00957, 0.00332,
              0.00907, 0.00574, -0.01255, -0.01134, 0.00291, -0.00666, -0.00615,
              -0.04947, 0.06182, 0.03965, 0.08091, 0.06846, -0.03612, 0.13966,
              0.12543, -0.05494, -0.05043, -0.24454, -0.20507, 0.56201,
              -0.75997, 1.15728, 0.76203, -0.00559, -0.00536, 0.01872, 0.00104,
              0.03044, 0.02504, -1.07241, -0.00288, 0.0095, -0.0076, -0.03211,
              0.02261, 0.02678, -0.06868, 0.03008, -0.02062, 0.04997, -0.15164,
              -0.00176, -0.0058, -0.0073, -0.00676, -0.13906, -89e-5, -0.00362,
              0.00817, 0.02021, 0.07719, 0.02788, 0.02061, -0.00274, 16e-5,
              0.00566, 0.02293, 0.04691, -0.05005, -0.05095, -0.06225, -0.1977,
              -0.00456, -0.00848, 0.00595, -0.04506, -0.00172, -0.0196, 0.22971,
              0.14459, 0.04362, -0.40199, 0.00386, 0.01442, -88e-5, -2e-4,
              0.00544, 0.04768, 0.05222, -0.04069, -3e-5, 15.71084, -12.28846,
              -66.23443, -109.83758, -586.31996, 311.09606, 1070.7504,
              2094.3408, 3839.04103, -1797.34193, -0.01216, 0.01244, -0.01666,
              0.02627, 0.00687, -0.01291, 0.00939, -0.01905, 0.09401, 0.05027,
              -0.09398, 0.23942, -0.00379, 0.00834, 0.05632, -0.01907, -0.04654,
              -0.21243, 0.00255, 0.00179, 0.0054, 0.00497, 0.01427, 0.00243,
              -0.00697, -0.02792, -0.01524, 0.0081, -0.00461, 0.00238, 0.00899,
              -0.01515, -0.01011, -0.0439, -0.00447, -0.00992, -0.0611, 0.00975,
              -0.00261, 0.03415, -0.02336, -0.08776, -0.00883, 0.01346,
              -0.00229, -0.00895, 42.18049, -48.21316, -148.61588, -171.57236,
              -414.27195, 343.09118, 394.59044, 511.79914, -0.00911, -0.0022,
              -0.06315, -0.00988, 0.04357, -0.02389, 4e-5, 0.00232, 0.00581,
              -0.00317, 0.00948, -0.00497, -0.00734, 0.003, 0.01883, -0.01055,
              -0.00365, -0.00126, 24.18074, 12.28004, 43.18187, -58.69806,
              -102.40566, -79.48349, -74.8106, 89.71332, 0.00241, -0.00135,
              -0.00136, -0.01617, 0.00818, 0.00873, 0.00368, 0.00383, -2.25893,
              10.18542, 20.73104, 9.07389, 13.73458, -29.10491, -20.62071,
              -10.63404, 0.00382, -0.00143, -3.77385, 0.12725, -1.30842,
              6.75795, 7.94463, 1.79092, 1.24458, -4.73211, -0.36978, -1.2571,
              -2.06373, 0.06194, -0.00509, 2.08851, 1.07491, 0.04112, -0.28582,
              -0.51413, -0.53312, 0.11936, 0.04447, 0.23945, 0.1245, -0.11821,
              -0.061, -0.12924, -0.05193, 0.02219, 0.01977, -0.02933, -0.00771,
              -0.01077, 0.00109, -0.00273,
            ],
            arg_tbl: [
              0, 3, 3, 1, 1, -10, 3, 11, 4, 0, 2, 2, 5, -5, 6, 2, 3, 5, 1, -14,
              2, 2, 3, 1, 3, 1, 1, -5, 2, 4, 3, 0, 1, 1, 6, 0, 1, 2, 6, 0, 3, 2,
              1, -7, 2, 3, 3, 0, 1, 1, 5, 2, 2, 1, 1, -4, 3, 2, 1, 2, 5, 2, 2,
              2, 1, -5, 2, 2, 1, 3, 5, 0, 2, 4, 1, -10, 2, 1, 2, 3, 1, -8, 2, 0,
              2, 1, 1, -3, 2, 2, 2, 1, 1, -2, 2, 2, 1, 1, 3, 0, 2, 3, 1, -7, 2,
              1, 2, 1, 1, -3, 3, 0, 1, 1, 2, 0, 2, 2, 1, -4, 2, 1, 2, 4, 1, -9,
              2, 0, 1, 2, 3, 0, 2, 1, 1, -2, 3, 0, 2, 1, 1, -4, 2, 0, 2, 1, 1,
              -1, 2, 0, 2, 3, 1, -6, 2, 0, 1, 3, 3, 0, 2, 2, 1, -7, 2, 0, 2, 1,
              1, -2, 4, 0, 2, 1, 1, -1, 3, 0, 1, 2, 2, 2, 2, 2, 1, -3, 2, 2, 2,
              4, 1, -8, 2, 0, 2, 3, 1, -10, 2, 0, 2, 1, 1, -4, 5, 0, 2, 1, 1,
              -3, 5, 2, 2, 1, 1, -5, 2, 2, 2, 1, 1, -5, 6, 0, 2, 1, 1, -2, 5, 1,
              3, 1, 1, -4, 5, 5, 6, 0, 1, 4, 3, 0, 2, 1, 1, -3, 6, 1, 2, 1, 1,
              -1, 5, 0, 2, 1, 1, -2, 6, 0, 2, 1, 1, -1, 6, 0, 2, 1, 1, -2, 7, 0,
              2, 1, 1, -1, 7, 0, 3, 4, 1, -14, 2, 2, 3, 0, 3, 1, 1, 2, 5, -5, 6,
              0, 1, 1, 1, 6, 3, 2, 1, -10, 3, 11, 4, 0, 3, 1, 1, -2, 5, 5, 6, 0,
              3, 6, 1, -14, 2, 2, 3, 0, 2, 1, 1, 1, 6, 0, 2, 1, 1, 2, 6, 0, 2,
              1, 1, 1, 5, 1, 2, 2, 1, -4, 3, 1, 2, 1, 1, 2, 5, 0, 2, 3, 1, -5,
              2, 2, 2, 1, 1, 3, 5, 0, 2, 5, 1, -10, 2, 0, 1, 3, 2, 0, 2, 2, 1,
              -2, 2, 0, 2, 1, 1, 1, 3, 0, 2, 4, 1, -7, 2, 0, 2, 2, 1, -3, 3, 0,
              2, 1, 1, 1, 2, 0, 2, 3, 1, -4, 2, 0, 2, 5, 1, -9, 2, 0, 2, 1, 1,
              2, 3, 0, 2, 2, 1, -2, 3, 0, 1, 4, 2, 0, 2, 2, 1, -1, 2, 0, 2, 4,
              1, -6, 2, 0, 2, 2, 1, -2, 4, 0, 2, 2, 1, -1, 3, 0, 2, 1, 1, 2, 2,
              1, 2, 3, 1, -3, 2, 0, 2, 5, 1, -8, 2, 0, 2, 2, 1, -3, 5, 0, 1, 5,
              2, 1, 2, 2, 1, -2, 5, 0, 2, 1, 1, 4, 3, 0, 2, 2, 1, -3, 6, 0, 2,
              2, 1, -1, 5, 0, 2, 2, 1, -2, 6, 0, 1, 2, 1, 4, 2, 2, 1, 1, 5, 0,
              2, 3, 1, -4, 3, 0, 2, 2, 1, 2, 5, 0, 2, 4, 1, -5, 2, 2, 2, 1, 1,
              3, 2, 0, 2, 3, 1, -2, 2, 1, 2, 3, 1, -3, 3, 0, 2, 2, 1, 1, 2, 0,
              2, 4, 1, -4, 2, 0, 2, 3, 1, -2, 3, 0, 2, 3, 1, -1, 2, 0, 2, 3, 1,
              -1, 3, 0, 2, 2, 1, 2, 2, 0, 2, 4, 1, -3, 2, 0, 2, 3, 1, -3, 5, 0,
              2, 1, 1, 5, 2, 1, 2, 3, 1, -2, 5, 0, 2, 3, 1, -1, 5, 0, 2, 3, 1,
              -2, 6, 0, 1, 3, 1, 3, 2, 4, 1, -4, 3, 0, 2, 5, 1, -5, 2, 0, 2, 4,
              1, -2, 2, 0, 2, 5, 1, -4, 2, 0, 2, 4, 1, -2, 3, 0, 2, 5, 1, -3, 2,
              0, 2, 2, 1, 5, 2, 0, 2, 4, 1, -2, 5, 0, 2, 4, 1, -1, 5, 0, 1, 4,
              1, 3, 2, 6, 1, -5, 2, 1, 2, 5, 1, -2, 2, 0, 2, 5, 1, -2, 5, 0, 1,
              5, 1, 3, 2, 7, 1, -5, 2, 0, 1, 6, 1, 3, 1, 7, 1, 3, 1, 8, 1, 2, 1,
              9, 1, 2, 1, 10, 1, 1, 1, 11, 1, 0, -1,
            ],
          },
        },
        {
          key: "venus",
          type: "heliocentric",
          epoch: 2446800.5,
          inclination: 3.3946,
          node: 76.561,
          perihelion: 54.889,
          semiAxis: 0.723329,
          dailyMotion: 1.60214,
          eccentricity: 0.006757,
          anomaly: 9.0369,
          equinox: 2446800,
          magnitude: -4.4,
          semiDiameter: 8.34,
          ptable: {
            maxargs: 9,
            max_harmonic: [5, 14, 13, 8, 4, 5, 1, 0, 0],
            max_power_of_t: 5,
            distance: 0.72332982,
            timescale: 3652500,
            trunclvl: 1,
            lon_tbl: [
              9.08078, 55.42416, 21066413644.98911, 655127.20186, 0.00329,
              0.10408, 0.00268, -0.01908, 0.00653, 0.00183, 0.15083, -0.21997,
              6.08596, 2.34841, 3.70668, -0.2274, -2.29376, -1.46741, -0.0384,
              0.01242, 0.00176, 0.00913, 0.00121, -0.01222, -1.22624, 0.65264,
              -1.15974, -1.28172, 1.00656, -0.66266, 0.0156, -0.00654, 0.00896,
              69e-5, 0.21649, -0.01786, 0.01239, 0.00255, 84e-5, -0.06086,
              -41e-5, 0.00887, 0.13453, -0.20013, 0.08234, 0.01575, 0.00658,
              -0.00214, 0.00254, 0.00857, -0.01047, -0.00519, 0.63215, -0.40914,
              0.34271, -1.53258, 38e-5, -0.01437, -0.02599, -2.27805, -0.36873,
              -1.01799, -0.36798, 1.41356, -0.08167, 0.01368, 0.20676, 0.06807,
              0.02282, -0.04691, 0.30308, -0.20218, 0.24785, 0.27522, 0.00197,
              -0.00499, 1.43909, -0.46154, 0.93459, 2.99583, -3.43274, 0.05672,
              -0.06586, 0.12467, 0.02505, -0.08433, 0.00743, 0.00174, -0.04013,
              0.17715, -0.00603, -0.01024, 0.01542, -0.02378, 0.00676, 2e-5,
              -0.00168, -4.89487, 0.02393, -0.03064, 9e-4, 0.00977, 0.01223,
              0.00381, 0.28135, -0.09158, 0.1855, 0.58372, -0.67437, 0.01409,
              -0.25404, -0.06863, 0.06763, -0.02939, -9e-5, -0.04888, 0.01718,
              -0.00978, -0.01945, 0.08847, -0.00135, -11.2992, 0.01689,
              -0.04756, 0.02075, -0.01667, 0.01397, 0.00443, -0.28437, 0.076,
              0.17996, -0.44326, 0.29356, 1.41869, -1.58617, 0.03206, 0.00229,
              -0.00753, -0.03076, -2.96766, 0.00245, 0.00697, 0.01063, -0.02468,
              -0.00351, -0.18179, -0.01088, 0.0038, 0.00496, 0.02072, -0.1289,
              0.16719, -0.0682, -0.03234, -60.36135, -11.74485, -11.03752,
              -3.80145, -21.33955, -284.54495, -763.43839, 248.50823,
              1493.02775, 1288.79621, -2091.10921, -1851.1542, -0.00922,
              0.06233, 4e-5, 0.00785, 0.10363, -0.1677, 0.45497, 0.24051,
              -0.28057, 0.61126, -0.02057, 1e-4, 0.00561, 0.01994, 0.01416,
              -0.00442, 0.03073, -0.14961, -0.06272, 0.08301, 0.0204, 7.12824,
              -0.00453, -0.01815, 4e-5, -13e-5, -0.03593, -0.18147, 0.20353,
              -0.00683, 3e-5, 0.06226, -0.00443, 0.00257, 0.03194, 0.03254,
              0.00282, -0.01401, 0.00422, 1.03169, -0.00169, -0.00591, -0.00307,
              0.0054, 0.05511, 0.00347, 0.07896, 0.06583, 0.00783, 0.01926,
              0.03109, 0.15967, 0.00343, 0.88734, 0.01047, 0.32054, 0.00814,
              51e-5, 0.02474, 47e-5, 52e-5, 0.03763, -57.06618, 20.34614,
              -45.06541, -115.20465, 136.46887, -84.67046, 92.93308, 160.44644,
              -2e-4, -82e-5, 0.02496, 0.00279, 0.00849, 0.00195, -0.05013,
              -0.04331, -0.00136, 0.14491, -0.00183, -0.00406, 0.01163, 93e-5,
              -0.00604, -0.0068, -36e-5, 0.06861, -0.0045, -0.00969, 0.00171,
              0.00979, -0.00152, 0.03929, 0.00631, 48e-5, -0.00709, -0.00864,
              1.51002, -0.24657, 1.27338, 2.64699, -2.4099, -0.57413, -23e-5,
              0.03528, 0.00268, 0.00522, -1e-4, 0.01933, -6e-5, 0.011, 0.06313,
              -0.09939, 0.08571, 0.03206, -4e-5, 0.00645,
            ],
            lat_tbl: [
              -23.91858, 31.44154, 25.93273, -67.68643, -0.00171, 0.00123, 1e-5,
              -18e-5, -5e-5, 18e-5, -1e-5, 19e-5, 0.00733, 3e-4, -38e-5, 11e-5,
              0.00181, 0.0012, 1e-4, 2e-5, -12e-5, 2e-5, 21e-5, 4e-5, -0.00403,
              0.00101, 0.00342, -0.00328, 0.01564, 0.01212, 11e-5, 1e-4, -2e-5,
              -4e-5, -0.00524, 79e-5, 11e-5, 2e-5, -1e-5, 3e-5, 1e-5, 0,
              0.00108, 35e-5, 3e-5, 64e-5, -0, -2e-5, -69e-5, 31e-5, 2e-4, 3e-5,
              0.00768, 0.03697, -0.07906, 0.01673, -3e-5, -1e-5, -0.00198,
              -0.01045, 0.01761, -0.00803, -0.00751, 0.04199, 0.0028, -0.00213,
              -0.00482, -0.00209, -0.01077, 0.00715, 48e-5, -4e-5, 0.00199,
              0.00237, 17e-5, -32e-5, -0.07513, -0.00658, -0.04213, 0.16065,
              0.27661, 0.06515, 0.02156, -0.08144, -0.23994, -0.05674, 0.00167,
              69e-5, 0.00244, -0.01247, -0.001, 36e-5, 0.0024, 12e-5, 1e-4,
              18e-5, 0.00208, -98e-5, -0.00217, 0.00707, -0.00338, 0.0126,
              -0.00127, -39e-5, -0.03516, -0.00544, -0.01746, 0.08258, 0.10633,
              0.02523, 77e-5, -0.00214, -0.02335, 0.00976, -19e-5, 3e-5, 41e-5,
              39e-5, 0.00199, -0.01098, 0.00813, -0.00853, 0.0223, 0.00349,
              -0.0225, 0.08119, -0.00214, -52e-5, -0.0022, 0.15216, 0.17152,
              0.08051, -0.01561, 0.27727, 0.25837, 0.07021, -5e-5, -0, -0.02692,
              -47e-5, -7e-5, -16e-5, 0.01072, 0.01418, -76e-5, 0.00379,
              -0.00807, 0.03463, -0.05199, 0.0668, -0.00622, 0.00787, 0.00672,
              0.00453, -10.69951, -67.43445, -183.55956, -37.87932, -102.30497,
              -780.40465, 2572.2199, -446.97798, 1665.42632, 5698.61327,
              -11889.66501, 2814.93799, 0.03204, -0.09479, 14e-5, -1e-5,
              -0.04118, -0.04562, 0.03435, -0.05878, 0.017, 0.02566, -0.00121,
              0.0017, 0.0239, 0.00403, 0.04629, 0.01896, -0.00521, 0.03215,
              -0.01051, 0.00696, -0.01332, -0.08937, -0.00469, -0.00751, 16e-5,
              -35e-5, 0.00492, -0.0393, -0.04742, -0.01013, 65e-5, 21e-5, -6e-5,
              17e-5, 0.06768, -0.01558, -55e-5, 0.00322, -0.00287, -0.01656,
              61e-5, -41e-5, 3e-4, 47e-5, -0.01436, -0.00148, 0.30302, -0.05511,
              -2e-4, -5e-5, 42e-5, -25e-5, 0.0127, 0.00458, -0.00593, -0.0448,
              5e-5, -8e-5, 0.08457, -0.01569, 62e-5, 18e-5, 9.79942, -2.48836,
              4.17423, 6.72044, -63.33456, 34.63597, 39.11878, -72.89581,
              -66e-5, 36e-5, -45e-5, -62e-5, -0.00287, -0.00118, -0.21879,
              0.03947, 86e-5, 0.00671, -0.00113, 0.00122, -0.00193, -29e-5,
              -0.03612, 0.00635, 24e-5, 0.00207, -0.00273, 0.00443, -55e-5,
              3e-4, -0.00451, 0.00175, -0.0011, -15e-5, -0.02608, 0.0048,
              2.16555, -0.70419, 1.74648, 0.97514, -1.1536, 1.73688, 4e-5,
              0.00105, 0.00187, -0.00311, 5e-5, 55e-5, 4e-5, 32e-5, -0.04629,
              0.02292, -0.00363, -0.03807, 2e-5, 2e-4,
            ],
            rad_tbl: [
              -0.24459, 3.72698, -6.67281, 5.24378, 3e-4, 3e-5, -2e-5, -0, -0,
              1e-5, 32e-5, 21e-5, -0.00326, 0.01002, 67e-5, 0.00653, 0.00243,
              -0.00417, -4e-5, -1e-4, -2e-5, -1e-5, 4e-5, -2e-5, -0.00638,
              -0.01453, 0.01458, -0.01235, 0.00755, 0.0103, 6e-5, 14e-5, 0,
              9e-5, 63e-5, 0.00176, 3e-5, -22e-5, 0.00112, 1e-5, -14e-5, -1e-5,
              0.00485, 0.00322, -35e-5, 0.00198, 4e-5, 13e-5, -15e-5, -3e-5,
              11e-5, -25e-5, 0.00634, 0.02207, 0.0462, 0.0016, 45e-5, 1e-5,
              -0.11563, 0.00643, -0.05947, 0.02018, 0.07704, 0.01574, -9e-4,
              -0.00471, -0.00322, 0.01104, 0.00265, -38e-5, 0.01395, 0.02165,
              -0.01948, 0.01713, -57e-5, -19e-5, 0.04889, 0.13403, -0.28327,
              0.10597, -0.02325, -0.35829, 0.01171, -0.00904, 0.00747, 0.02546,
              29e-5, -0.0019, -0.03408, -0.00703, 0.00176, -0.00109, 0.00463,
              0.00293, 0, 0.00148, 1.06691, -54e-5, -0.00935, -0.0079, 0.00552,
              -84e-5, -0.001, 0.00336, 0.02874, 0.08604, -0.17876, 0.05973,
              -0.0072, -0.21195, 0.02134, -0.0798, 0.015, 0.01398, 0.01758,
              -4e-5, 0.00371, 0.0065, -0.03375, -0.00723, 4.65465, -4e-4,
              0.0204, 0.00707, -0.00727, -0.01144, -0.00196, 0.0062, -0.03396,
              -0.12904, 0.2016, 0.08092, -0.67045, 0.14014, -0.01571, -0.75141,
              0.00361, 0.0011, 1.42165, -0.01499, -0.00334, 0.00117, 0.01187,
              0.00507, 0.08935, -0.00174, -0.00211, -0.00525, 0.01035, -0.00252,
              -0.08355, -0.06442, 0.01616, -0.03409, 5.55241, -30.62428,
              2.03824, -6.26978, 143.07279, -10.24734, -125.25411, -380.8536,
              -644.78411, 745.02852, 926.7, -1045.0982, -0.03124, -0.00465,
              -0.00396, 2e-5, 0.08518, 0.05248, -0.12178, 0.23023, -0.30943,
              -0.14208, -5e-5, -0.01054, -0.00894, 0.00233, -0.00173, -0.00768,
              0.07881, 0.01633, -0.04463, -0.03347, -3.92991, 0.00945, 0.01524,
              -0.00422, -11e-5, -5e-5, 0.10842, -0.02126, 0.00349, 0.12097,
              -0.03752, 1e-5, -0.00156, -0.0027, -0.0152, 0.01349, 0.00895,
              0.00186, -0.67751, 0.0018, 0.00516, -0.00151, -0.00365, -0.0021,
              -0.00276, 0.03793, -0.02637, 0.03235, -0.01343, 0.00541, -0.1127,
              0.02169, -0.63365, 0.00122, -0.24329, 0.00428, -4e-4, 0.00586,
              0.00581, 0.01112, -0.02731, 8e-5, -2.69091, 0.42729, 2.78805,
              3.43849, -0.87998, -6.62373, 0.56882, 4.6937, 5e-5, -8e-5,
              -0.00181, 0.01767, -0.00168, 0.0066, 0.01802, -0.01836, -0.11245,
              -61e-5, 0.00199, -7e-4, -76e-5, 0.00919, 0.00311, -0.00165,
              -0.0565, -18e-5, 0.00121, -69e-5, -0.00803, 0.00146, -0.0326,
              -72e-5, -42e-5, 0.00524, 0.00464, -0.00339, -0.06203, -0.00278,
              0.04145, 0.02871, -0.01962, -0.01362, -0.0304, -1e-4, 85e-5,
              -1e-5, -0.01712, -6e-5, -0.00996, -3e-5, -29e-5, 26e-5, 16e-5,
              -5e-5, -0.00594, -3e-5,
            ],
            arg_tbl: [
              0, 3, 2, 2, 5, -5, 6, 0, 3, 2, 2, 1, 3, -8, 4, 0, 3, 5, 1, -14, 2,
              2, 3, 0, 3, 3, 2, -7, 3, 4, 4, 0, 2, 8, 2, -13, 3, 2, 3, 6, 2,
              -10, 3, 3, 5, 0, 1, 1, 7, 0, 2, 1, 5, -2, 6, 0, 2, 1, 2, -3, 4, 2,
              2, 2, 5, -4, 6, 1, 1, 1, 6, 0, 3, 3, 2, -5, 3, 1, 5, 0, 3, 3, 2,
              -5, 3, 2, 5, 0, 2, 1, 5, -1, 6, 0, 2, 2, 2, -6, 4, 1, 2, 2, 5, -3,
              6, 0, 1, 2, 6, 0, 2, 3, 5, -5, 6, 0, 1, 1, 5, 1, 2, 2, 5, -2, 6,
              0, 2, 3, 2, -5, 3, 2, 2, 5, 2, -8, 3, 1, 1, 2, 5, 0, 2, 2, 1, -5,
              2, 1, 2, 6, 2, -10, 3, 0, 2, 2, 2, -3, 3, 2, 2, 1, 2, -2, 3, 1, 2,
              4, 2, -7, 3, 0, 2, 4, 2, -6, 3, 0, 1, 1, 4, 0, 2, 1, 2, -2, 4, 0,
              2, 2, 2, -5, 4, 0, 2, 1, 2, -1, 3, 0, 2, 1, 1, -3, 2, 0, 2, 2, 2,
              -4, 3, 0, 2, 6, 2, -9, 3, 0, 2, 3, 2, -4, 3, 2, 2, 1, 1, -2, 2, 0,
              1, 1, 3, 0, 2, 1, 2, -1, 4, 0, 2, 2, 2, -4, 4, 0, 2, 5, 2, -7, 3,
              0, 2, 2, 2, -2, 3, 0, 2, 1, 2, -3, 5, 0, 2, 1, 2, -3, 3, 0, 2, 7,
              2, -10, 3, 0, 2, 1, 2, -2, 5, 1, 2, 4, 2, -5, 3, 1, 3, 1, 2, 1, 5,
              -5, 6, 0, 2, 1, 2, -1, 5, 0, 3, 1, 2, -3, 5, 5, 6, 0, 2, 1, 2, -2,
              6, 0, 2, 1, 2, -1, 6, 0, 1, 3, 4, 0, 2, 7, 2, -13, 3, 0, 3, 1, 2,
              2, 5, -5, 6, 1, 1, 1, 2, 5, 2, 9, 2, -13, 3, 0, 3, 1, 2, 1, 5, -2,
              6, 0, 2, 2, 2, -3, 4, 2, 2, 3, 2, -6, 4, 0, 2, 1, 2, 1, 5, 0, 2,
              2, 2, -5, 3, 0, 2, 6, 2, -8, 3, 0, 2, 2, 1, -4, 2, 0, 2, 3, 2, -3,
              3, 0, 1, 2, 3, 0, 2, 3, 2, -7, 3, 0, 2, 5, 2, -6, 3, 1, 2, 2, 2,
              -2, 4, 0, 2, 3, 2, -5, 4, 0, 2, 2, 2, -1, 3, 0, 2, 7, 2, -9, 3, 0,
              2, 4, 2, -4, 3, 0, 2, 1, 2, 1, 3, 0, 2, 3, 2, -4, 4, 0, 2, 6, 2,
              -7, 3, 0, 2, 3, 2, -2, 3, 0, 2, 2, 2, -4, 5, 0, 2, 2, 2, -3, 5, 0,
              2, 2, 2, -2, 5, 0, 2, 5, 2, -5, 3, 0, 2, 2, 2, -3, 6, 0, 2, 2, 2,
              -1, 5, 0, 2, 2, 2, -2, 6, 0, 1, 2, 2, 3, 2, 2, 2, 1, 5, 0, 2, 7,
              2, -8, 3, 0, 2, 2, 1, -3, 2, 0, 2, 4, 2, -3, 3, 0, 2, 6, 2, -6, 3,
              0, 2, 3, 2, -1, 3, 0, 2, 8, 2, -9, 3, 0, 2, 5, 2, -4, 3, 0, 2, 7,
              2, -7, 3, 0, 2, 4, 2, -2, 3, 0, 2, 3, 2, -4, 5, 0, 2, 3, 2, -3, 5,
              0, 2, 9, 2, -10, 3, 0, 2, 3, 2, -2, 5, 0, 1, 3, 2, 2, 2, 8, 2, -8,
              3, 0, 2, 5, 2, -3, 3, 0, 2, 9, 2, -9, 3, 0, 2, 10, 2, -10, 3, 0,
              1, 4, 2, 1, 2, 11, 2, -11, 3, 0, -1,
            ],
          },
        },
        {
          key: "earth",
          type: "heliocentric",
          anomaly: 1.1791,
          dailyMotion: 0.985611,
          distance: 0,
          eccentricity: 0.016713,
          epoch: 2446800.5,
          equinox: 2446800,
          inclination: 0,
          longitude: 0,
          magnitude: -3.86,
          node: 0,
          perihelion: 102.884,
          perturbation: 0,
          ptable: {
            maxargs: 12,
            max_harmonic: [
              2, 11, 14, 19, 6, 10, 2, 2, 0, 1, 1, 4, 0, 0, 0, 0, 0, 0,
            ],
            max_power_of_t: 3,
            distance: 1.000139872959708,
            timescale: 3652500,
            trunclvl: 1e-4,
            lon_tbl: [
              -242809, -178223, -6154, -6547, 15526, -79460, 66185, -19531,
              -12754, 4389, 3153, -1151, 768, 1750, -248, 657, -80, 0, -4, -29,
              -3020, 301, -360, 412, -1463, 2266, -41, 30, -39868, -14275,
              -25052, 1583, 15695, 10018, -113, -122, -243, 18, -33, 31, -134,
              -171, 243, -115, 18, 148, -120, -129, 19, -220, -30, 19, 8, 23,
              -162, -124, 189, -315, 73, 77, 32006, -11295, 11595, 5629, -838,
              1728, 0, 4, 38, 15, 142, -228, 92, 32, -2274, -1500, -2277, 3143,
              3204, 127, -20, -11, 5186, 1054, 996, 1769, -231, 163, -88, -19,
              -2, -145, -27, 48, -8, 421, -7, 148, -16, -2, -3964, 4259, -11192,
              -8385, 11513, -13415, 103, -43, -289, -79, -29, 163, -117, 559,
              -190, -15, 7108, 5345, 12933, -7709, 3485, -26023, 11, -5, 311,
              78, 22, 76, 2846, -3922, 2329, 43, 34, 442, 3, -245, -5, -3, -17,
              5, 318, 15963, 2520, 7115, 2548, -9836, -7063, 1950, -4471, -8326,
              4964, -3101, 563, -80, -1444, -472, 8, -22, 1558, -88, 235, 359,
              293, -16, 144, 209, -13, -7, 812, -744, 150, -740, -2569, -956,
              69, -2475, 1009, -55, -1707, -2525, 1071, -1761, 550, 279, -14,
              36, -10442, 3344, -6759, -21551, 24737, -434, 504, -385, 191, 96,
              -2760, -1068, 85, -2617, 1062, -43, 192, -16, 30, 42, -2446, 588,
              -1522, -2933, 1746, -1070, 511, -1401, 139, 729, -12, 29, -2618,
              -2076, 2079, -3711, -21, -2727, -80, -19, 113, 2420, 325, 1058,
              379, -1478, 296, -251, -265, -409, -10, 20, 15, -15, 11, 143, -83,
              19, 266, -17, 40, 59, 19, -105, 5, 48331, 21, -16, -97, -318, 158,
              -171, 456, -351, 168, 85, 12, -2, 20, -15, 15, 2, 385, -1125, 521,
              -23, -815, -2088, 1644, -1329, 7, 14, -582, 234, -67, -467, -167,
              -51, -684, -2302, 1315, -797, 6, -70, -118, -406, 67, -63, -4848,
              3713, -8483, -8776, 13049, -9404, -23, 34, -12, 1, -24, -10, -21,
              0, -1, 24, -3, 28, -3032, -2494, 2498, -4342, -6538, 1899, -4414,
              -13249, 15540, -292, -228, 176, -40, -161, -20, -36, -800, -172,
              -36, -208, -249, -374, -1410, -72118, -745, 213, -23, 196, -14,
              -2, -239, -341, 1015, -291, 33, -94, 90, -20431, 4, -39, 75, 216,
              -23, 41, 116, 24, 5, 26, -45, -4178, -9, -23, 12, 18, 68, -2, 36,
              -19, 42, -8, 6, -106, 4, -38, -73, 259, 107, -293, -12, -44, 37,
              13, 73, -46, 17, 8, 5832, 1989, -1404, 4469, -1619, -743, -1796,
              -2206, 461, -291, 153, 1104, 19195, 652503, 5587, -5252787, 47,
              -17340051, -32, 68926621, 1054, -230, -1601, 356, -562, -998, 124,
              -446, -171, 66, 26, 60, -7, 0, -88, -43, 65, -400, 4, 183, -1014,
              2043, -1076, 126, -41, -205, -127, -85, -15, 68, 0, 0, -320, 75,
              -42, 285, -303, 771, 616, 400, -470, 48, -76, -103, -190, -11,
              -139, -5, -48, -87, -22, -362, -271, 1233, -392, 353, -154, -71,
              -109, 112, 17, 8, 1, -17, -170, 623, -279, 21, 139, -151, -107,
              -55199, 588, -188, 397, 674, -406, 269, 166, -207, 585, 333, -386,
              754, 29, -65, 35, 10, 63, 1291, 62, 8, 239, 1323, -1434, 53, 19,
              -1, 34, 82, -15, -16, 265, -338, -729, -207, 3, 17, 697, 399, 274,
              760, -12, 2, -48, -9, 3, 64, 147, 36, 9, 46, 77, 144, -76, 65,
              2329, 1763, 987, 5506, 66, -123, -41, -24, -12, 1, -19, 94, 19, 8,
              -1, -18, 142, 77, -78, 187, 6, 18, 607, 163, 17, 158, 27, -208,
              154, 27317, 587, -143, 22, -153, 5, -34, 75, 330, 98, -128, -67,
              -6542, -115, -236, 217, -12, 10, -6, -250, 653, 1611, -209, 4,
              1072, -129, 216, 402, 81, 117, 11, 0, 20, 24, -28, 245, 437, -16,
              59, 527952, -74895, 169682, 177186, -376, -362869, -60, 719658,
              -151, -382, -22, -43, 5, -5, 14, 5, -9, 13, 83, 296, -369, -1,
              -14, -6, 42, 8, -31, 7, -354, 634, 1132, 243, -38, 42, -14, 68,
              -6, 31, -36, -13, 7, -2104, 16, 67, 9, -4, 174, 144, 58, 438, -15,
              5, -16, 19, -135, 1642, -140, -11, -4, 27, 253, -382, -651, -221,
              11, 1, -12, -6, 136, 23, -1, 43, 3, 38, -26, -5, 17864, -4244,
              5704, 7754, -36, -7891, -3, 10418, 2, -844, -1, 126, -7, 32, -67,
              -5, 39, 10, 5, 52, -13, 159, -49, -21, 1, -394, 7, -15, -4, -245,
              1, 172, -36, -3, 13, 5, 0, 1, -1, 0, 0, -202, -2, 19, -20, -2, 5,
              3, 0, -110, -12, -1, 0, -62, 0, -36, 0, -22, -13, 3,
            ],
            lat_tbl: [
              -428091, -488399, 746850, 6, 210, -93, 32, 1, -365, 332, -105, 76,
              -7, 2, -8, 14, -1, 2, 0, 0, -65, 12, -17, 7, -1, 1, 0, 0, -15, 65,
              -4, 26, -2, 0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0, 0, -1, -3, 0, 0,
              0, 0, 0, 0, -2, 0, 0, 0, -1, 0, -30, 28, -6, 10, 0, 0, 0, 0, 0, 0,
              2, 0, 0, 0, -16, 20, -6, -41, -9, -3, 0, 0, -6, 2, 2, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -96, 33, -12, 228, -23, -21, 0,
              0, -12, -2, -4, 4, -1, 0, 1, 0, -329, -22, -34, -726, -147, -21,
              0, 0, -2, 4, -1, 0, 2, -7, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 36, 88,
              -162, -19, -11, 21, 31, 37, -31, 53, -5, -15, -3, -11, 9, 3, 0, 0,
              -2, 0, 1, 0, 2, -1, 0, 0, 0, 0, -162, -102, -37, 30, 19, 23, -18,
              9, 1, -6, -6, 22, -2, 3, 1, -2, 0, -1, 26, -25, 66, 52, -641,
              -153, -13, -9, 2, -3, -29, 8, -6, -2, 0, -6, 2, -4, 1, 0, -26,
              -11, -1, -10, -6, -13, 66, -1337, -879, -207, 1, -1, 8, -30, -24,
              -18, -16, 1, 9, 1, -24, -8, 9, -17, -13, 75, 19, -8, -29, 24, 0,
              0, -1, 1, -25, 36, -7, -22, 0, -3, 1, -1, 187, -46, -6, 74, 5,
              -10, -5, -4, -16, 10, -5, -5, 2, -4, 5, -2, -2, 1, -1, 0, -16,
              -12, 1, -13, -17, -111, -186, 73, -1, -2, -277, -77, -27, 106, 16,
              5, -12, -15, -13, -30, -1, 1, 0, 36, -10, 4, 607, 262, 533, -1530,
              -1630, 304, 8, -6, 1, 1, 0, -1, 5, -2, 0, -1, -1, -4, -44, -22,
              -64, -46, 537, 430, 268, -1553, -2040, -486, -3, -23, 20, 41, -1,
              2, -21, -4, -1, -3, -84, 50, -177, 26, 5, -12, 2, -4, 7, 1, -115,
              -305, -310, 138, -186, 246, -96, 17, 0, 0, 4, -2, 1, 1, -3, 2, -1,
              0, -15, 68, 0, 2, -3, 0, -5, 0, -1, 1, -5, 6, 0, 0, 0, 0, -235,
              -98, -2, 2, 9, -40, -1, -2, -33, -9, -5, -4, 5662, -3849, 1941,
              -124, 210, 160, -24721, -72945, 4099, -21914, 1345, -555,
              23637393, -5516830, 17737677, 43330654, -44668315, 14540723, -824,
              -2086, -4423, -41801, 5562, -11664, 960, -125, 2001, -149, 587,
              -350, 23, -52, -3, 3, -248, -148, -40, 86, 2, 0, 21, -82, 11, 8,
              -8, 0, -30, -33, -22, 46, 0, -191, -168, -135, 27, -85, 14, 232,
              217, 59, 5, 12, -5, 2, -24, -26, -52, 13, -3, 18, 26, 45, 32,
              -169, 14, -6, -3, 4, -5, 2, 6, 2, -2, 3, 20, -15, 0, 10, -486, -8,
              4, -114, 102, -188, 23, -67, 6, 12, -43, -1, -32, 2, 15, 9, 16,
              -36, -6, -2, 14, -5, 17, -15, -28, 307, 289, 69, 2, -7, 3, -1, -1,
              1, -16, -811, 287, -68, 0, 0, 0, -1, 16, -7, 0, 0, 0, 2, 0, 0, 0,
              -1, 1, 0, -3, -4, 2, 3, -29, 34, 59, -15, -3, -3, -1, 0, -2, -3,
              3, -19, 0, 0, 0, 0, -15, 1, 5, 2, 0, 0, -1, -5, 0, -1, -120, 84,
              7, -30, -7, -3, -1, 0, 0, -1, 9, -6, -186, -11, 13, -57, 1, 4, 1,
              -1, 0, 0, -5, 796, 46, 5, -1, -6, -10, 228, 5, -6, 1, -5, 0, 0,
              -6, -2, 148, 137, 10, 28, 430546, -279834, 488902, 664558,
              -746515, 243112, -39, -37, -13, -174, 6, -25, 2, -3, -4, -2, 0, 4,
              -5, 70, 82, 20, 0, 1, 1, 1, 0, 1, -27, 430, 226, -53, 1, 1, 0, 1,
              1, -7, 2, 1, -3, -8, 1, 0, -1, 12, -2, -5, 4, 0, 0, 1, 1, 1, 1, 9,
              33, 4, 0, 0, 0, -321, 4, 1, 0, 0, 1, 0, 106, -22, 0, 0, 4, 0, 0,
              2, 7006, -9443, 12833, 11137, -14037, 4575, -2, 0, -1, -6, 1, 1,
              4, 6, 16, 2, 55, -10, 1, 0, 0, 1, 0, 2, 0, -4, -2, 0, -351, 24, 0,
              0, 8, 1, 30, -5, -12, 10, -4, 1, -1, -2, 0, 0, 4, 0, 17, -3, 0,
              -2, 2, 0, 0, -1, 0, -1, 0, 0, 0, 0,
            ],
            rad_tbl: [
              14575, -26192, -144864, 2, -22, 15, -8, -21, -148, -104, -14, -75,
              15, 2, -5, -3, -1, 0, 0, 0, 0, 21, -2, 7, -5, -3, 0, 0, 83, -94,
              9, -67, -29, 50, 1, -1, 3, 2, 0, 0, 4, 3, 1, 1, -1, -1, 0, -1, 2,
              -1, 0, 1, 0, 0, -2, 3, -5, -2, -1, 1, 197, 511, -82, 189, -28,
              -12, 0, 0, 0, -1, 6, -1, 0, 1, 30, -30, -37, -25, 6, 21, 0, 0, 16,
              -139, 43, -28, 4, 6, 0, 3, 4, 0, 1, 1, -13, 0, -4, 0, 0, 1, 150,
              135, -291, 436, -560, -343, 1, 3, 8, -15, -13, -5, -17, -3, 1, -6,
              -314, 428, 606, 758, 1230, -411, 0, -1, 11, -14, 4, 1, 221, 157,
              1, 132, -25, 3, 12, 0, 0, 0, 0, -1, 1487, -108, 707, -79, -950,
              -190, 177, 582, -676, 399, -281, -396, 0, 52, 39, -130, 2, 1, 12,
              148, -34, 23, 1, 27, -20, 13, 1, -1, 198, -34, -21, -80, -99, 332,
              -307, 9, -15, -125, 330, -231, 236, 139, -36, 74, 7, 3, -588,
              -1722, 3623, -1245, 187, 4366, -72, -75, 11, -33, 174, -467, 444,
              9, 11, 180, -6, -39, 8, -7, -126, -500, 599, -317, 224, 355, -590,
              -39, 134, -379, -7, -3, 494, -628, 893, 490, 712, -7, -7, 35,
              -720, 50, -321, 72, 443, 106, 74, 82, 112, -84, -6, -3, 5, 4, 58,
              7, -2, 38, 6, 92, -20, 14, 33, 13, -11189, -2, -11, -8, 106, -35,
              58, 52, 132, 170, -32, 63, -2, -6, 6, 7, -1, 6, 452, 155, 9, 209,
              788, -318, 511, 616, -5, 3, 142, 303, -280, 32, 21, -69, 984,
              -291, 340, 562, 30, 2, 171, -51, 27, 28, -1570, -2053, 3702,
              -3593, 4012, 5467, -14, -9, -1, -6, 4, -11, 0, -9, -11, 0, 15, 2,
              1133, -1366, 1961, 1134, -867, -3010, 6041, -2049, 142, 7138, -79,
              -103, 73, -18, 17, -9, 79, -372, 97, -17, 182, -118, 33577, -675,
              -99, -347, -91, -11, 1, -7, 158, -111, 136, 474, 50, 16, 9739, 51,
              19, 2, -105, 36, -20, -11, -12, 56, -13, 2, 2030, -22, 11, -4, 9,
              -6, 1, 33, 10, 18, 4, 21, 53, 3, 19, 2, 130, 37, -147, -54, -22,
              6, 7, -19, 22, 36, -4, 8, -949, 2911, -2221, -697, 371, -808,
              1203, -1117, 191, 189, -549, 77, -321201, 19788, 2622593, 5990,
              8667033, 114, -34455835, 86, -92, -493, 179, 807, -499, 281, 225,
              51, -34, -88, -30, 13, 0, -3, 20, -43, 201, 33, -93, 2, -1034,
              -518, -63, -545, 104, -20, 43, -64, -34, -7, 0, 0, -61, -159,
              -143, -8, -392, -157, -204, 309, -24, -248, 55, -40, -6, 91, -16,
              57, -41, 18, 197, -20, -668, -150, -192, -216, 39, -84, -62, -59,
              -4, 8, -7, -1, -352, -100, -10, -158, 61, 55, 32493, -49, 107,
              344, -395, 227, -154, -238, 123, 104, -205, 348, -449, -236, -54,
              -19, -6, 21, -790, 27, -5, 30, -846, 154, -26, -920, 0, 12, -54,
              21, 11, -10, 137, 132, 109, -337, -11, 2, -272, 467, -511, 179,
              -1, -8, 7, -32, -44, 2, -26, 101, -32, 6, -98, 48, -42, -53,
              -1222, 1601, -3775, 656, 83, 46, 16, -28, 0, 7, -66, -14, -6, 13,
              12, 0, -58, 91, -123, -58, -12, 4, -114, 423, -111, 12, 112, 27,
              -19072, 71, 100, 410, 107, 15, 24, 3, -214, 30, 49, 44, 5017, -27,
              167, -80, 8, 153, 4, 7, -219, -35, 244, 694, -762, 2, -84, -49,
              -28, 158, -4, 56, -14, 0, 9, 12, 7, 18, 2, -7, -15426, 91, 25800,
              -15, 144767, -53, -287824, -24, 19, -9, 6, 7, 0, 0, -3, 8, -5, -3,
              -232, 53, -1, -271, 4, -12, -8, 30, -8, -25, -253, -150, -105,
              470, -37, -29, -59, -6, -24, -5, 9, -18, 1784, 3, -54, 13, -12, 7,
              -116, 144, -353, 52, -4, -12, -17, -14, -1340, -64, 10, -116, -24,
              -2, 190, 131, 130, -307, -1, 9, 5, -7, -10, 56, -33, 0, -14, 3, 2,
              -12, -635, -160, 64, -44, 2712, -3, -3606, -1, 774, 1, 133, -1,
              -19, 0, 5, -59, -5, 14, -45, 5, -140, -8, 15, -28, 379, 1, 6, 3,
              55, 0, -54, 0, 3, -33, -3, 4, 0, -4, 0, -1, 200, 0, -17, -1, 2,
              -20, -2, 0, 111, 0, 1, -12, 64, 0, 38, 0, 23, 0, 3, 13,
            ],
            arg_tbl: [
              0, 3, 3, 4, 3, -8, 4, 3, 5, 1, 2, 2, 5, -5, 6, 2, 4, 4, 3, -8, 4,
              5, 5, -5, 6, 1, 3, 2, 2, 1, 3, -8, 4, 0, 3, 3, 2, -7, 3, 4, 4, 2,
              3, 7, 3, -13, 4, -1, 5, 0, 2, 8, 2, -13, 3, 2, 3, 1, 3, -2, 4, 2,
              6, 0, 3, 1, 2, -8, 3, 12, 4, 1, 3, 6, 2, -10, 3, 3, 5, 1, 1, 1, 7,
              0, 2, 1, 5, -2, 6, 1, 2, 1, 5, -3, 6, 0, 3, 1, 3, -2, 4, 1, 5, 0,
              3, 3, 3, -6, 4, 2, 5, 1, 3, 1, 1, -5, 2, 4, 3, 0, 2, 8, 3, -15, 4,
              2, 3, 4, 3, -7, 4, -3, 5, 0, 3, 2, 2, -7, 3, 7, 4, 0, 2, 2, 5, -4,
              6, 1, 1, 1, 6, 2, 2, 2, 5, -6, 6, 0, 2, 9, 3, -17, 4, 2, 3, 3, 2,
              -5, 3, 1, 5, 0, 3, 2, 3, -4, 4, 2, 5, 0, 3, 2, 3, -4, 4, 1, 5, 0,
              3, 3, 2, -5, 3, 2, 5, 0, 2, 1, 5, -1, 6, 0, 3, 3, 2, -6, 3, 2, 4,
              0, 2, 1, 3, -2, 4, 2, 2, 2, 5, -3, 6, 0, 1, 2, 6, 1, 2, 3, 5, -5,
              6, 1, 1, 1, 5, 2, 3, 4, 3, -8, 4, 2, 5, 0, 2, 1, 5, -5, 6, 1, 2,
              7, 3, -13, 4, 2, 2, 2, 5, -2, 6, 0, 2, 10, 3, -19, 4, 0, 2, 3, 5,
              -4, 6, 0, 2, 3, 2, -5, 3, 2, 2, 2, 3, -4, 4, 2, 2, 5, 2, -8, 3, 1,
              2, 3, 5, -3, 6, 0, 2, 6, 3, -11, 4, 1, 2, 1, 1, -4, 3, 1, 2, 4, 5,
              -5, 6, 0, 1, 2, 5, 1, 2, 3, 3, -6, 4, 2, 2, 5, 3, -9, 4, 2, 2, 6,
              2, -10, 3, 0, 2, 2, 2, -3, 3, 2, 2, 4, 3, -8, 4, 1, 2, 4, 3, -7,
              4, 2, 2, 5, 3, -10, 4, 1, 2, 3, 3, -5, 4, 2, 2, 1, 2, -2, 3, 1, 2,
              7, 2, -11, 3, 0, 2, 2, 3, -3, 4, 1, 2, 1, 3, -1, 4, 0, 2, 4, 2,
              -7, 3, 0, 2, 4, 2, -6, 3, 2, 1, 1, 4, 1, 2, 8, 3, -14, 4, 0, 2, 1,
              3, -5, 5, 0, 2, 1, 3, -3, 4, 1, 2, 7, 3, -12, 4, 1, 2, 1, 2, -1,
              3, 1, 2, 2, 3, -5, 4, 0, 2, 1, 3, -4, 5, 1, 2, 6, 3, -10, 4, 1, 2,
              3, 3, -7, 4, 0, 3, 1, 3, -4, 5, 2, 6, 0, 3, 1, 3, -1, 5, -5, 6, 0,
              2, 5, 3, -8, 4, 1, 2, 1, 3, -3, 5, 1, 3, 1, 3, -5, 5, 5, 6, 0, 2,
              2, 2, -4, 3, 1, 2, 6, 2, -9, 3, 0, 2, 4, 3, -6, 4, 1, 3, 1, 3, -3,
              5, 2, 6, 0, 2, 1, 3, -5, 6, 1, 2, 1, 3, -2, 5, 2, 3, 1, 3, -4, 5,
              5, 6, 0, 3, 1, 3, -1, 5, -2, 6, 0, 3, 1, 3, -3, 5, 3, 6, 0, 2, 1,
              3, -4, 6, 0, 3, 1, 3, -2, 5, 1, 6, 0, 2, 5, 2, -9, 3, 0, 2, 3, 3,
              -4, 4, 1, 2, 3, 2, -4, 3, 2, 2, 1, 3, -3, 6, 1, 3, 1, 3, -2, 5, 2,
              6, 0, 3, 1, 3, 1, 5, -5, 6, 1, 2, 1, 3, -1, 5, 1, 3, 1, 3, -3, 5,
              5, 6, 1, 3, 1, 3, 2, 5, -7, 6, 0, 2, 1, 3, -2, 6, 1, 2, 2, 3, -2,
              4, 1, 3, 3, 2, -4, 3, 1, 5, 0, 2, 10, 3, -17, 4, 1, 3, 1, 3, 2, 5,
              -6, 6, 1, 2, 1, 3, -1, 6, 0, 3, 1, 3, -2, 5, 4, 6, 0, 2, 7, 3,
              -15, 4, 0, 2, 1, 3, -2, 7, 0, 3, 1, 3, 1, 5, -3, 6, 0, 2, 1, 3,
              -2, 8, 0, 2, 1, 3, -1, 7, 0, 2, 1, 3, -1, 8, 0, 2, 8, 2, -14, 3,
              1, 3, 3, 2, -8, 3, 4, 4, 1, 3, 1, 3, 4, 5, -10, 6, 1, 3, 1, 3, 2,
              5, -5, 6, 2, 3, 5, 3, -8, 4, 3, 5, 2, 1, 1, 12, 3, 3, 3, 3, -8, 4,
              3, 5, 2, 3, 1, 3, -2, 5, 5, 6, 2, 3, 3, 2, -6, 3, 4, 4, 0, 2, 8,
              2, -12, 3, 1, 3, 1, 3, 1, 5, -2, 6, 0, 2, 9, 3, -15, 4, 2, 2, 1,
              3, 1, 6, 1, 2, 1, 10, -1, 11, 0, 1, 2, 4, 1, 2, 1, 3, 1, 5, 1, 2,
              8, 3, -13, 4, 1, 2, 3, 2, -6, 3, 0, 2, 1, 3, -4, 4, 1, 2, 5, 2,
              -7, 3, 1, 2, 7, 3, -11, 4, 1, 2, 1, 1, -3, 3, 0, 2, 1, 3, 2, 5, 0,
              2, 2, 3, -6, 4, 0, 2, 6, 3, -9, 4, 1, 2, 2, 2, -2, 3, 1, 2, 5, 3,
              -7, 4, 2, 2, 4, 3, -5, 4, 2, 2, 1, 2, -3, 3, 0, 2, 7, 2, -10, 3,
              0, 2, 3, 3, -3, 4, 0, 2, 2, 3, -1, 4, 0, 2, 4, 2, -5, 3, 1, 2, 1,
              3, 1, 4, 0, 2, 2, 3, -5, 5, 0, 2, 8, 3, -12, 4, 0, 1, 1, 2, 1, 3,
              2, 3, -5, 5, 2, 6, 0, 2, 2, 3, -4, 5, 1, 3, 2, 3, -6, 5, 5, 6, 0,
              2, 7, 3, -10, 4, 0, 3, 2, 3, -4, 5, 2, 6, 0, 3, 2, 3, -1, 5, -5,
              6, 1, 2, 6, 3, -8, 4, 1, 2, 2, 3, -3, 5, 1, 3, 2, 3, -5, 5, 5, 6,
              1, 2, 2, 2, -5, 3, 0, 2, 6, 2, -8, 3, 0, 3, 2, 3, -4, 5, 3, 6, 0,
              3, 2, 3, -3, 5, 1, 6, 0, 2, 5, 3, -6, 4, 1, 3, 2, 3, -3, 5, 2, 6,
              0, 2, 2, 3, -5, 6, 1, 2, 2, 3, -2, 5, 1, 3, 2, 3, -4, 5, 5, 6, 1,
              2, 2, 3, -4, 6, 0, 2, 4, 3, -4, 4, 0, 2, 3, 2, -3, 3, 1, 2, 2, 3,
              -3, 6, 1, 3, 2, 3, -2, 5, 2, 6, 0, 2, 2, 3, -1, 5, 1, 2, 2, 3, -2,
              6, 0, 2, 3, 3, -2, 4, 1, 2, 2, 3, -1, 6, 0, 2, 2, 3, -2, 7, 0, 3,
              2, 3, 2, 5, -5, 6, 0, 3, 6, 3, -8, 4, 3, 5, 1, 1, 2, 12, 3, 3, 2,
              3, -8, 4, 3, 5, 1, 3, 2, 3, -2, 5, 5, 6, 0, 2, 8, 2, -11, 3, 0, 2,
              2, 3, 1, 5, 0, 2, 5, 2, -6, 3, 1, 2, 8, 3, -11, 4, 0, 2, 1, 1, -2,
              3, 0, 2, 7, 3, -9, 4, 0, 2, 2, 2, -1, 3, 1, 2, 6, 3, -7, 4, 0, 2,
              5, 3, -5, 4, 0, 2, 7, 2, -9, 3, 0, 2, 4, 3, -3, 4, 0, 2, 4, 2, -4,
              3, 0, 2, 3, 3, -5, 5, 0, 2, 1, 2, 1, 3, 0, 2, 3, 3, -4, 5, 1, 2,
              8, 3, -10, 4, 0, 2, 7, 3, -8, 4, 0, 2, 3, 3, -3, 5, 0, 2, 6, 2,
              -7, 3, 0, 2, 6, 3, -6, 4, 0, 2, 3, 3, -2, 5, 1, 2, 3, 3, -4, 6, 0,
              2, 5, 3, -4, 4, 0, 2, 3, 2, -2, 3, 0, 2, 3, 3, -3, 6, 0, 2, 3, 3,
              -1, 5, 0, 2, 3, 3, -2, 6, 0, 1, 3, 12, 3, 2, 5, 2, -5, 3, 0, 2, 1,
              1, -1, 3, 0, 1, 2, 2, 0, 2, 7, 2, -8, 3, 0, 2, 4, 2, -3, 3, 0, 2,
              4, 3, -5, 5, 0, 2, 4, 3, -4, 5, 0, 2, 4, 3, -3, 5, 0, 2, 6, 2, -6,
              3, 0, 2, 4, 3, -2, 5, 0, 1, 4, 12, 1, 2, 8, 2, -9, 3, 0, 2, 5, 2,
              -4, 3, 0, 1, 1, 1, 0, 2, 7, 2, -7, 3, 1, 2, 5, 3, -5, 5, 0, 2, 9,
              2, -10, 3, 0, 2, 6, 2, -5, 3, 0, 2, 8, 2, -8, 3, 0, 2, 10, 2, -11,
              3, 0, 2, 9, 2, -9, 3, 0, 2, 10, 2, -10, 3, 0, 2, 11, 2, -11, 3, 0,
              2, 2, 1, -1, 3, 0, -1,
            ],
          },
          semiAxis: 0.999999,
          semiDiameter: 0,
        },
        {
          key: "mars",
          type: "heliocentric",
          epoch: 2446800.5,
          inclination: 1.8498,
          node: 49.457,
          perihelion: 286.343,
          semiAxis: 1.52371,
          dailyMotion: 0.524023,
          eccentricity: 0.093472,
          anomaly: 53.1893,
          equinox: 2446800,
          magnitude: -1.52,
          semiDiameter: 4.68,
          ptable: {
            maxargs: 9,
            max_harmonic: [0, 5, 12, 24, 9, 7, 3, 2, 0],
            max_power_of_t: 5,
            distance: 1.53033488271,
            timescale: 3652500,
            trunclvl: 1,
            lon_tbl: [
              43471.6614, 21291.11063, 2033.37848, 6890507597.78366,
              1279543.73631, 317.74183, 730.69258, -15.26502, 277.5696,
              -62.96711, 20.96285, 1.01857, -2.19395, 3.75708, 3.65854, 0.01049,
              1.09183, -0.00605, -0.04769, 0.41839, 0.10091, 0.03887, 0.11666,
              -0.03301, 0.02664, 0.38777, -0.56974, 0.02974, -0.15041, 0.02179,
              -0.00808, 0.08594, 0.09773, -0.00902, -0.04597, 0.00762, -0.03858,
              -0.00139, 0.01562, 0.02019, 0.01878, -0.01244, 0.00795, 0.00815,
              0.03501, -0.00335, -0.0297, -0.00518, -0.01763, 0.17257, 0.14698,
              -0.14417, 0.26028, 62e-5, -0.0018, 13.35262, 39.38771, -15.49558,
              22.0015, -7.71321, -4.20035, 0.62074, -1.42376, 0.07043, -0.0667,
              0.1696, -0.06859, 0.07787, 0.01845, -0.01608, -0.00914, 5.60438,
              -3.44436, 5.88876, 6.77238, -5.29704, 3.48944, 0.01291, 0.0128,
              -0.53532, 0.86584, 0.79604, 0.31635, -3.92977, -0.94829, -0.74254,
              -1.37947, 0.17871, -0.12477, 0.00171, 0.11537, 0.02281, -0.03922,
              -0.00165, 0.02965, 1.59773, 1.24565, -0.35802, 1.37272, -0.44811,
              -0.08611, 3.04184, -3.39729, 8.8627, 6.65967, -9.1058, 10.66103,
              0.02015, -0.00902, -0.01166, -0.23957, -0.12128, -0.0464,
              -0.07114, 0.14053, -0.04966, -0.01665, 0.28411, -0.37754,
              -1.26265, 1.01377, 3.70433, -0.21025, -0.00972, 0.0035, 0.00997,
              0.0045, -2.15305, 3.18147, -1.81957, -0.02321, -0.0256, -0.35188,
              3e-5, -0.0111, 0.00244, -0.05083, -0.00216, -0.02026, 0.05179,
              0.04188, 5.92031, -1.61316, 3.72001, 6.98783, -4.1769, 2.6125,
              0.04157, 2.76453, -1.34043, 0.74586, -0.20258, -0.30467, 0.00733,
              0.00376, 1.728, 0.76593, 1.26577, -2.02682, -1.14637, -0.91894,
              -2e-5, 36e-5, 2.54213, 0.89533, -0.04166, 2.36838, -0.97069,
              0.05486, 0.46927, 0.045, 0.23388, 0.35005, 1.61402, 2.30209,
              -0.99859, 1.63349, -0.5149, -0.26112, 0.27848, -0.261, -0.07645,
              -0.22001, 0.92901, 1.12627, -0.39829, 0.7712, -0.23716, -0.11245,
              -0.02387, 0.0396, -0.00802, 0.02179, 2.86448, 1.00246, -0.14647,
              2.80278, -1.14143, 0.05177, 1.68671, -1.23451, 3.16285, 0.7007,
              0.25817, 3.17416, 0.07447, -0.08116, -0.03029, -0.02795, 0.00816,
              0.01023, 0.00685, -0.01075, -0.34268, 0.0368, -0.05488, -0.0743,
              -41e-5, -0.02968, 3.13228, -0.83209, 1.95765, 3.78394, -2.26196,
              1.3852, -0.00401, -0.01397, 1.01604, -0.99485, 0.62465, 0.22431,
              -0.05076, 0.12025, 4.35229, -5.04483, 14.87533, 9.00826,
              -10.37595, 19.26596, 0.40352, 0.19895, 0.09463, -0.10774,
              -0.17809, -0.08979, -0.00796, -0.04313, 0.0152, -0.03538, 1.53301,
              -1.75553, 4.87236, 3.23662, -3.62305, 6.42351, -0.00439, -0.01305,
              0.17194, -0.64003, 0.26609, 0.066, 0.01767, -0.00251, -0.08871,
              -0.15523, 0.01201, -0.03408, -0.29126, -0.07093, -0.00998,
              -0.07876, 1.05932, -25.3865, -0.29354, 0.04179, -0.01726, 0.07473,
              -0.07607, -0.08859, 0.00842, -0.02359, 0.47858, -0.39809, 1.25061,
              0.87017, -0.82453, 1.56864, -0.00463, 0.02385, -0.2907, 8.56535,
              -0.12495, 0.0658, -0.03395, -0.02465, -1.06759, 0.47004, -0.40281,
              -0.23957, 0.03572, -0.07012, 0.00571, -0.00731, 0.18601, -1.34068,
              0.03798, -0.00532, 0.00448, -0.01147, 1.41208, -0.00668, 0.25883,
              1.23788, -0.57774, 0.09166, -2.49664, -0.25235, -0.53582,
              -0.80126, 0.10827, -0.08861, -0.03577, 0.06825, -0.00143, 0.04633,
              0.01586, -0.01056, -0.02106, 0.03804, -88e-5, -0.03458, -33e-5,
              -0.01079, 0.05821, -0.02445, 0.00602, 0.00721, -0.00315, -0.01021,
              -0.65454, 1.08478, -0.44593, -0.21492, -1.35004, 4.47299, -4.1917,
              3.51236, 1946.04629, 13960.88247, 576.24572, 8023.81797,
              2402.48512, -753.87007, -6376.99217, -10278.88014, -25743.89874,
              15506.87748, 15609.59853, 35173.63133, -3.7037, 6.29538, -4.84183,
              -0.76942, -0.02465, -0.0384, 0.00565, -0.06071, 0.01174, 0.00253,
              -0.0023, 0.05252, -0.02813, 0.01359, 0.23208, 0.03393, 0.01734,
              0.04838, -0.4634, -0.18941, 0.25428, -0.56925, 0.05213, 0.24704,
              0.12922, -0.01531, 0.06885, -0.0851, 0.01853, -0.0039, 0.01196,
              -0.3053, 0.13117, -0.03533, 1.79597, -0.42743, 0.98545, 2.13503,
              -1.32942, 0.68005, -0.01226, 0.00571, 0.31081, 0.34932, 0.34531,
              -0.32947, -0.00548, 0.00186, -0.00157, -65e-5, 0.30877, -0.03864,
              0.04921, 0.06693, 0.01761, -0.04119, 1.28318, 0.38546, 0.06462,
              1.18337, -0.48698, 0.07086, 0.26031, -0.22813, 0.10272, 0.04737,
              -0.04506, -0.38581, -0.16624, -0.04588, 0.00992, 0.00722,
              -0.21041, 0.2056, -0.09267, -0.03438, 0.32264, -0.07383, 0.09553,
              -0.3873, 0.17109, -0.01342, -0.02336, -0.01286, 0.0023, 0.04626,
              0.01176, 0.01868, -0.15411, -0.32799, 0.22083, -0.14077, 1.98392,
              1.68058, -0.02526, -0.13164, -0.04447, -0.00153, 0.01277, 0.00553,
              -0.26035, -0.11362, 0.14672, -0.32242, 0.16686, -0.69957, 0.40091,
              -0.06721, 0.00837, 0.09635, -0.08545, 0.25178, -0.22486, 16.03256,
              0.3413, -0.06313, 0.01469, -0.09012, -0.00744, -0.0251, -0.08492,
              -0.13733, -0.0762, -0.15329, 0.13716, -0.03769, 2.01176, -1.35991,
              -1.04319, -2.97226, -0.01433, 0.61219, -0.55522, 0.38579, 0.31831,
              0.81843, -0.04583, -0.14585, -0.10218, 0.16039, -0.06552,
              -0.01802, 0.0648, -0.06641, 0.01672, -0.00287, 0.00308, 0.09982,
              -0.05679, -0.00249, -0.36034, 0.52385, -0.29759, 0.59539,
              -3.59641, -1.02499, -547.53774, 734.1147, 441.8676, -626.68255,
              -2255.81376, -1309.01028, -2025.6959, 2774.69901, 1711.21478,
              1509.99797, -0.99274, 0.61858, -0.47634, -0.33034, 0.00261,
              0.01183, -38e-5, 0.11687, 0.00994, -0.01122, 0.03482, -0.01942,
              -0.11557, 0.38237, -0.17826, 0.0083, 0.01193, -0.05469, 0.01557,
              0.01747, 0.0273, -0.01182, -0.11284, 0.12939, -0.05621, -0.01615,
              0.04258, 0.01058, -0.01723, 0.00963, 0.20666, 0.11742, 0.0783,
              -0.02922, -0.10659, -0.05407, 0.07254, -0.13005, -0.02365,
              0.24583, 0.31915, 1.2706, 9e-5, -0.21541, -0.55324, -0.45999,
              -1.45885, 0.8653, 0.85932, 1.92999, -0.00755, -0.00715, -0.02004,
              -0.00788, 0.01539, 0.00837, 0.27652, -0.50297, -0.26703, -0.28159,
              0.0395, 0.07182, -0.07177, 0.1414, 0.07693, 0.07564, -0.01316,
              -0.01259, 0.01529, 0.07773, -90.74225, -378.15784, -510.3019,
              -52.35396, -89.15267, 415.56828, 181.52119, 54.0157, -0.01093,
              -0.05931, -0.01344, -0.0239, 0.01432, -0.0247, -0.01509, -0.01346,
              0.03352, 0.02248, 0.02588, -0.00948, 0.0361, 0.17238, 0.02909,
              -0.04065, 0.00155, -0.07025, -0.09508, 0.14487, 0.12441, 0.16451,
              1e-5, -5e-5, -0.00982, -0.01895, -0.16968, 0.36565, 0.20234,
              0.17789, -0.04519, -0.00588, 0.01268, 0.00107, -56.32137,
              -58.22145, -80.5527, 28.14532, 11.43301, 52.05752, 17.7948,
              -2.61997, -5e-5, -0.02629, 0.0108, -0.0039, 0.00744, 0.03132,
              0.01156, -0.01621, 0.02162, 0.02552, 75e-5, -0.02497, 0.02495,
              0.0083, 0.0323, 0.00103, -14.84965, -4.502, -9.73043, 9.40426,
              4.08054, 5.38571, 1.53731, -1.01288, 0.21076, 1.74227, 0.7976,
              0.39583, 0.09879, -0.16736, -0.00723, -0.01536,
            ],
            lat_tbl: [
              -364.4938, -47.17612, -554.97858, -430.63121, 596.44312, -3.94434,
              -7.43169, -0.06665, -2.23987, 0.10366, -0.05567, -0.01463,
              0.01908, -0.02611, -0.0035, -0.01057, -0.0061, -15e-5, 2e-5, 1e-4,
              33e-5, 7e-5, -0, -1e-4, -4e-5, 12e-5, 2e-5, -14e-5, -48e-5, -3e-5,
              -7e-5, 8e-5, -5e-5, -43e-5, -3e-5, -1e-4, -4e-5, 1e-5, 1e-5,
              -3e-5, -3e-5, 4e-5, 7e-5, -41e-5, 31e-5, 76e-5, 62e-5, 1e-5,
              -2e-5, 35e-5, 53e-5, 26e-5, 19e-5, 2e-4, 1e-4, 0.02936, 0.09624,
              -0.01153, 0.01386, 0.00551, -0.0069, 0.00196, 0.00148, -0.00408,
              -0.00673, -67e-5, -0.00152, -14e-5, -5e-5, 0, 5e-5, -0.00116,
              0.00276, -0.00391, 0.00983, -0.01327, -0.01986, -3e-5, 1e-5,
              0.01104, 0.00631, -0.01364, 0.01152, -0.00439, 0.01103, -0.00546,
              0.00181, -39e-5, -83e-5, 7e-5, 2e-5, -1e-4, -8e-5, 5e-5, 2e-5,
              -0.00584, 0.00512, -0.00722, -0.00174, 0.00101, -0.00316,
              -0.02229, -0.02797, -0.10718, 0.05741, 0.11403, 0.10033, 36e-5,
              -22e-5, 0.00787, 0.01191, 0.01756, -0.02121, -0.00169, -0.00364,
              7e-4, -51e-5, 0.0185, -0.06836, 0.21471, 0.00162, -0.29165,
              0.16799, -2e-5, 11e-5, -75e-5, -77e-5, -0.00675, -0.00814, 29e-5,
              -0.00599, 0.00107, 13e-5, 1e-4, -2e-5, 5e-5, 2e-4, 0.00355,
              0.00306, -13e-5, -61e-5, -0.0295, -0.00847, 0.01037, -0.04783,
              0.04237, 0.11662, -0.00331, 0.00207, -0.00107, -0.00264, 72e-5,
              -23e-5, -0.00151, 0.00146, -0.12847, 0.02294, 0.03611, 0.19705,
              0.16855, -0.28279, -0, -2e-5, -0.00525, -0.03619, 0.05048,
              -0.00481, -0.00745, 0.04618, 0.00286, 0.00443, 0.00521, -0.00351,
              0.002, 0.00474, -0.00149, 31e-5, -3e-5, 29e-5, 0.00686, 0.02467,
              0.04275, -0.02223, 0.02282, -0.04228, 0.03312, 0.01847, -0.01253,
              0.01601, 76e-5, 91e-5, 45e-5, 35e-5, 0.00658, 0.01586, -0.0031,
              0.00628, -45e-5, 0.00316, -0.01602, -0.0034, -0.01744, 0.04907,
              0.06426, 0.02275, -0.00217, -0.00377, -91e-5, 37e-5, 4e-4, -3e-5,
              -17e-5, -27e-5, 0.00366, 0.02693, -0.00934, 0.00386, 0.00616,
              -37e-5, 0.02028, 0.0212, -0.01768, 0.02421, 0.00102, 0.00877,
              12e-5, 3e-4, -19e-5, -0.02165, 0.01245, -0.00742, 0.00172, 0.0032,
              -0.17117, -0.12908, -0.43134, 0.15617, 0.21216, 0.56432, 0.01139,
              -0.00937, -58e-5, -0.00337, -0.00999, 0.01862, -0.00621, -8e-4,
              -25e-5, -0.0014, 0.0925, 0.01173, -0.03549, 0.14651, -0.01784,
              0.00945, 0, -6e-5, -0.005, 86e-5, 0.01079, -2e-5, -12e-5, -29e-5,
              -0.02661, 0.0014, -0.00524, -0.0046, -0.00352, -0.00563, -0.00277,
              -52e-5, -0.10171, -0.02001, 45e-5, 0.00265, -82e-5, 0.0016,
              -0.00302, -0.00434, -22e-5, -0.00134, 0.03285, 0.02964, -0.05612,
              -0.00668, -0.01821, 0.0659, 39e-5, 61e-5, -0.13531, -0.03831,
              0.02553, 0.0213, -0.00336, 0.00468, -0.04522, -0.0554, 0.00129,
              -0.01767, 0.00181, 31e-5, -11e-5, -34e-5, -0.00146, 0.01101,
              -3e-4, 0.0024, -39e-5, 72e-5, -0.01954, -0.03822, 0.09682,
              -0.04541, -0.01567, 0.09617, -0.03371, 0.33028, -0.12102, 0.05874,
              -0.0099, -0.02236, 0.00109, 0.00158, -0.00482, 19e-5, -36e-5,
              4e-5, 24e-5, 0.00201, 17e-5, 11e-5, -12e-5, 2e-5, -0.00323,
              -0.01062, -0.0013, 91e-5, 56e-5, -17e-5, 0.00774, 0.00601, 0.0255,
              0.017, -0.84327, 0.77533, -0.71414, -0.50643, -473.30877,
              -1504.79179, -458.52274, -865.82237, -417.34994, -681.03976,
              765.50697, -1653.67165, 4427.33176, 710.53895, -5016.39367,
              4280.60361, 0.33957, 0.3839, -0.38631, 0.81193, 0.00154, -43e-5,
              0.01103, -17e-5, -46e-5, 0.00221, 59e-5, 14e-5, 0.0016, 0.00475,
              0.06191, -0.13289, 0.02884, -0.00566, -0.01572, 0.2378, -0.0514,
              -0.03228, -0.00716, -0.00978, -0.01048, 0.01317, -0.01267,
              -0.01198, 37e-5, -0.0033, -0.02305, 0.00355, -0.00121, -0.00496,
              -0.04369, -0.01343, 0.05347, -0.12433, 0.0209, 0.17683, 28e-5,
              -0.0049, -0.02778, -0.05587, -0.01658, 0.05655, 0.00204, -92e-5,
              2e-4, 14e-5, -0.00603, -0.03829, 0.00778, -0.00588, -0.00266,
              97e-5, -0.02158, -0.07742, 0.09306, -0.01827, -0.01048, 0.07885,
              -0.02485, -0.02505, 0.00471, -0.01026, 0.06663, 0.0111, 0.00469,
              -0.05347, -16e-5, -13e-5, 0.02622, 0.02273, -0.01009, 0.01391,
              -0.01042, -0.00444, -0.04293, -0.00767, -0.00154, -0.01739,
              0.00353, -0.00763, -6e-4, 1e-4, -53e-5, -0.00146, -0.05317,
              0.0576, -0.01801, -0.02099, -0.02611, -0.01836, -0.00256, 0.00812,
              -0.00145, 54e-5, -8e-5, 15e-5, -0.04087, 0.0886, -0.05385,
              -0.02134, 0.02771, 0.02441, -0.00234, 0.01571, -0.0026, 97e-5,
              0.10151, 0.49378, -0.28555, 0.11428, -0.00286, 0.01224, 0.0016,
              69e-5, 0, -4e-4, -0.13286, 0.00448, 0.01225, -0.00568, 0.00341,
              0.00224, -0.23483, -0.07859, 0.30733, -0.21548, -0.02608, 0.00756,
              0.09789, 0.02878, -0.11968, 0.08981, 0.02046, -0.00888, 0.02955,
              0.01486, -0.00981, 0.01542, -0.01674, -0.0154, 19e-5, -0.00449,
              -0.0214, 0.00638, 0.00112, -0.0073, -0.08571, 0.13811, -0.16951,
              -0.02917, -0.03931, -0.32643, -68.64541, -81.00521, -47.97737,
              15.7529, 181.76392, -36.00647, -48.32098, -259.02226, -265.57466,
              554.05904, 0.09017, 0.18803, -0.12459, 0.10852, 0.00211, 2e-5,
              0.00304, -0.0037, 0.00174, 0.00279, 0.00139, 95e-5, 0.04881,
              0.00262, -0.0102, 0.03762, 0.00987, 0.00612, 54e-5, -36e-5, 9e-5,
              -94e-5, 0.02279, 0.01785, -0.00778, 0.01263, 4e-4, -0.00112,
              -0.00452, -0.00662, 0.00483, -3e-4, -54e-5, -0.00205, -52e-5,
              -0.00362, -0.00215, -0.00247, 0.02893, -0.01965, -4e-5, 0.04114,
              -0.00284, -0.00103, 0.01827, -0.07822, 0.1801, 0.04805, -0.21702,
              0.18808, 95e-5, -0.00132, -0.01488, 0.00746, 0.00198, 0.0019,
              0.01032, 0.03392, 0.04318, -0.07332, -0.01004, 0.00787, -0.00308,
              -0.01177, -0.01431, 0.02659, 0.00273, -0.00374, -0.02545, 0.00644,
              28.68376, 13.74978, 29.60401, -47.98255, -65.91944, -18.48404,
              -1.7358, 64.67487, -0.02492, 0.00104, -0.00829, -0.00134, 77e-5,
              5e-5, -0.00513, 0.00403, 71e-5, -47e-5, -23e-5, -63e-5, 0.0012,
              0.0037, -38e-5, -37e-5, 8e-4, -18e-5, 0.00866, 0.00156, -0.01064,
              0.02131, 0, -1e-5, 38e-5, -68e-5, -0.00909, -0.02187, -0.02599,
              0.05507, -22e-5, -0.01468, 32e-5, 0.005, 9.86233, -2.85314,
              -2.25791, -13.83444, -12.38794, 3.79861, 2.76343, 6.63505, 66e-5,
              7e-5, -16e-5, -39e-5, 14e-5, 59e-5, -31e-5, -24e-5, -0.00168,
              0.00259, 7e-5, -5e-5, -52e-5, 0.00558, 0.0011, 0.01037, 1.59224,
              -2.37284, -2.00023, -2.2828, -1.49571, 1.48293, 0.60041, 0.56376,
              -0.54386, 0.03568, -0.10392, 0.31005, 0.09104, 0.03015, 0.00826,
              -0.00524,
            ],
            rad_tbl: [
              -816.07287, -381.41365, -33.69436, 177.22955, 0.1863, -8.29605,
              -11.15519, -0.57407, -3.53642, 0.16663, -0.06334, -0.03056,
              0.02767, -0.04161, 0.03917, -0.02425, 0.00204, -34e-5, 23e-5,
              58e-5, -0.00111, 39e-5, -15e-5, 6e-5, -23e-5, 0.00237, 0.00191,
              0.00154, -29e-5, 9e-5, 11e-5, -41e-5, 37e-5, -1e-4, -64e-5, 15e-5,
              -5e-5, 12e-5, -3e-5, -34e-5, 26e-5, 11e-5, -7e-5, -0.00158, 87e-5,
              0.00278, 0.00137, 24e-5, -2e-4, 0.0053, -0.00448, 0.0078, 0.00408,
              62e-5, 35e-5, -1.35261, 0.79891, -0.81597, -0.43774, 0.14713,
              -0.27415, 0.05298, 0.0223, -0.02089, -0.0107, -0.00374, 0.00342,
              -0.00142, 0.0027, -39e-5, 63e-5, 0.16024, 0.27088, -0.32127,
              0.27467, -0.16615, -0.2446, -73e-5, 32e-5, -0.0571, -0.05265,
              -0.06025, 0.0512, -0.05295, 0.23477, -0.08211, 0.04575, -0.00769,
              -0.01067, -0.0057, 15e-5, -0.00251, -0.0014, -0.00131, -18e-5,
              -0.12246, 0.15836, -0.13065, -0.03222, 0.00795, -0.04232,
              -0.36585, -0.31154, 0.68504, -0.96006, 1.19304, 0.88631, 0.00132,
              46e-5, 0.13105, 0.04252, 0.05164, -0.06837, -0.01351, -0.01458,
              0.00376, -0.00557, 0.28532, -0.1729, -0.53946, -0.79365, -0.95246,
              0.74984, 19e-5, 0.00132, -0.00163, -0.00295, -0.40106, -0.26573,
              -0.00155, -0.22655, 0.04349, -0.00376, 0.00149, -1e-5, 0.00523,
              78e-5, 0.01203, 0.00558, -0.00708, 0.0052, -0.36428, -1.28827,
              1.50845, -0.83063, 0.58802, 0.89998, -0.55256, 0.01255, -0.15169,
              -0.26715, 0.06061, -0.04122, -0.00397, 0.00534, -0.52576, 1.22031,
              1.44098, 0.92406, 0.67214, -0.85486, -1e-4, 1e-5, 0.2882,
              -0.84198, 0.78291, 0.00251, 0.02398, 0.32093, -0.02331, 0.10109,
              -0.07555, 0.03557, -0.6158, 0.43399, -0.43779, -0.2639, 0.06885,
              -0.13803, 0.17694, 0.19245, 0.15119, -0.051, 0.49469, -0.45028,
              0.3359, 0.15677, -0.04702, 0.10265, -0.00942, -0.0058, -0.00555,
              -0.00252, -0.32933, 0.92539, -0.91004, -0.0449, -0.01812,
              -0.37121, 0.34695, 0.50855, -0.24721, 0.86063, -0.84747, 0.01983,
              0.01948, 0.02039, 0.00748, -0.00727, -0.00271, 0.0022, 0.00309,
              0.00196, 0.0203, 0.17201, -0.03716, 0.02801, 0.01871, 2e-5,
              0.31736, 1.17319, -1.42245, 0.73416, -0.52302, -0.85056, 0.00522,
              -0.00126, 0.33571, 0.34594, -0.07709, 0.21114, -0.04066, -0.01742,
              1.72228, 1.46934, -3.06437, 5.06723, -6.538, -3.55839, -0.06933,
              0.13815, 0.03684, 0.03284, -0.04841, 0.09571, -0.0235, 0.00418,
              0.01302, 0.00579, 0.73408, 0.64718, -1.37437, 2.04816, -2.70756,
              -1.52808, 0.00523, -0.00166, 0.25915, 0.069, -0.02758, 0.10707,
              62e-5, 0.00744, -0.08117, 0.0484, -0.01806, -0.00637, 0.03034,
              -0.12414, 0.03419, -0.00388, 10.92603, 0.48169, -0.01753,
              -0.12853, -0.03207, -0.00801, 0.03904, -0.03326, 0.01033, 0.00366,
              0.17249, 0.20846, -0.38157, 0.54639, -0.68518, -0.36121, -0.01043,
              -0.00186, -3.33843, -0.16353, 0.03462, 0.06669, -0.01305, 0.01803,
              -0.22703, -0.52219, 0.11709, -0.19628, 0.0341, 0.01741, 0.00338,
              0.00265, 0.63213, 0.08944, 0.00236, 0.01829, 0.00546, 0.00218,
              73e-5, -0.7257, 0.63698, -0.1334, 0.04698, 0.29716, -0.13126,
              1.27705, -0.4098, 0.274, -0.04525, -0.05529, -0.03249, -0.01696,
              -0.02314, -76e-5, 0.0051, 0.00764, -0.01847, -0.01021, 0.01688,
              -44e-5, 0.00531, -16e-5, -0.01219, -0.02903, -0.00361, 0.00299,
              0.00504, -0.00153, -0.53625, -0.3246, 0.10642, -0.2207, -2.21651,
              -0.66036, -1.74652, -2.08198, -6810.78679, 967.02869, -3915.9714,
              291.65905, 372.99563, 1196.01966, 5108.01033, -3172.64698,
              -7685.78246, -12789.43898, -17474.50562, 7757.84703, 3.13224,
              1.84743, -0.38257, 2.4059, 0.0186, -0.01217, 0.03004, 0.00278,
              -0.00125, 0.00579, -0.02673, -0.00112, 0.00662, 0.01374, -0.02729,
              0.13109, -0.02836, 0.00877, 0.12171, -0.27475, 0.34765, 0.15882,
              -0.12548, 0.02603, 0.0071, 0.06538, -0.04039, -0.03257, -0.00186,
              -0.0088, 0.16643, 0.00707, 0.01918, 0.07156, -0.20459, -0.85107,
              1.01832, -0.47158, 0.32582, 0.63002, -0.00282, -0.00711, -0.19695,
              0.15053, 0.15676, 0.17847, 71e-5, 0.00286, -39e-5, 83e-5, 0.02009,
              0.17859, -0.03894, 0.02805, 0.02379, 0.00752, 0.17529, -0.57783,
              0.53257, -0.02829, 0.03211, 0.21777, 0.13813, 0.16305, -0.02996,
              0.06303, 0.21058, -0.02659, 0.02596, -0.08808, -0.00389, 0.00586,
              0.08986, 0.09204, -0.0148, 0.04031, 0.06115, 0.18366, 0.25636,
              0.06905, 0.00719, 0.11391, 0.00636, -0.01113, -0.02808, 0.0015,
              -0.01219, 0.00832, 0.28626, -0.09573, 0.10481, 0.16559, -0.94578,
              1.26394, 0.08846, -0.01623, 82e-5, -0.0264, -0.00347, 0.00798,
              0.12873, -0.21248, 0.27999, 0.14348, 0.44082, 0.10453, 0.04362,
              0.25332, -0.06077, 0.00555, -0.06947, -0.05511, -10.08703,
              -0.10614, 0.04059, 0.21355, 0.05632, 0.00871, 0.01599, -0.00531,
              0.36835, -0.0353, 0.09519, -0.04961, 0.02568, 0.08613, 0.57033,
              0.84599, 1.27123, -0.41266, -0.36937, -0.00655, -0.16547, -0.24,
              -0.35213, 0.13345, 0.0587, -0.01524, 0.06419, 0.04136, -0.00681,
              0.02606, -0.02519, -0.02732, -0.00105, -0.00677, -0.03891,
              0.00106, 87e-5, -0.02256, -0.20834, -0.14624, -0.23178, -0.11786,
              0.32479, -1.41222, -303.74549, -202.79324, 260.2029, 184.8432,
              536.68016, -881.56427, -1125.64824, -791.09928, -596.61162,
              659.35664, 0.24561, 0.39519, -0.12601, 0.18709, -0.007, 0.00136,
              0.3075, 9e-5, 0.00443, 0.00384, 0.0117, 0.02078, 0.15043, 0.04802,
              0.00386, 0.06942, 0.02107, 0.00495, -0.01067, 0.00951, 0.00937,
              0.01996, 0.04922, 0.04337, -0.00583, 0.0211, -0.00691, 0.02793,
              -0.00364, -0.00682, -0.09143, 0.15369, 0.02043, 0.05451, 0.04053,
              -0.08179, 0.09645, 0.0533, -0.10149, -0.01594, -0.96773, 0.1366,
              0.17326, 13e-5, 0.2099, -0.23184, -0.38407, -0.64733, -0.84754,
              0.38889, 0.0031, -0.0034, 0.0097, -0.00788, -0.01111, 0.00677,
              0.18147, 0.09968, 0.1017, -0.09233, -0.03165, 0.0179, -0.04727,
              -0.02364, -0.02546, 0.02451, 0.00442, -0.00426, -0.0254, 0.00471,
              130.42585, -31.30051, 17.99957, -174.75585, -142.96798, -27.89752,
              -19.42122, 59.14872, -0.01899, 0.00388, -0.01265, 0.00694,
              0.01966, 0.0114, -0.00439, 0.00503, -0.01867, 0.02826, 0.00752,
              0.02012, -0.14734, 0.01909, 0.03312, 0.02327, 0.05843, 61e-5,
              -0.06958, -0.05798, -0.09174, 0.06242, 3e-5, 1e-5, 0.0067,
              -0.00305, -0.13637, -0.06058, -0.06372, 0.07257, 0.00209,
              -0.01369, -44e-5, 0.00355, 17.90079, -17.4827, -8.77915,
              -24.54483, -15.67123, 3.62668, 0.52038, 5.1322, 0.02574, 3e-5,
              0.00339, 0.00919, -0.02778, 0.00464, 0.01429, 0.01003, -0.01661,
              0.01327, 0.02216, 34e-5, -0.00389, 0.01076, -35e-5, 0.00983,
              1.23731, -4.18017, -2.61932, -2.66346, -1.4554, 1.1031, 0.23322,
              0.40775, -0.43623, 0.06212, -0.099, 0.19456, 0.03639, 0.02566,
              0.00309, -0.00116,
            ],
            arg_tbl: [
              0, 4, 3, 4, 3, -8, 4, 3, 5, 2, 3, 5, 2, -6, 3, -4, 4, 0, 2, 2, 5,
              -5, 6, 1, 3, 12, 3, -24, 4, 9, 5, 0, 3, 2, 2, 1, 3, -8, 4, 1, 3,
              11, 3, -21, 4, 2, 5, 0, 3, 3, 2, -7, 3, 4, 4, 0, 3, 7, 3, -13, 4,
              -1, 5, 1, 3, 1, 3, -2, 4, 2, 6, 0, 3, 1, 2, -8, 3, 12, 4, 1, 3, 1,
              4, -8, 5, 4, 6, 0, 3, 1, 4, -7, 5, 2, 6, 0, 3, 1, 4, -9, 5, 7, 6,
              0, 1, 1, 7, 0, 2, 1, 5, -2, 6, 0, 3, 1, 3, -2, 4, 1, 5, 0, 3, 3,
              3, -6, 4, 2, 5, 1, 3, 12, 3, -23, 4, 3, 5, 0, 2, 8, 3, -15, 4, 3,
              2, 1, 4, -6, 5, 2, 3, 2, 2, -7, 3, 7, 4, 0, 2, 1, 2, -3, 4, 2, 2,
              2, 5, -4, 6, 0, 1, 1, 6, 1, 2, 9, 3, -17, 4, 2, 3, 2, 3, -4, 4, 2,
              5, 0, 3, 2, 3, -4, 4, 1, 5, 0, 2, 1, 5, -1, 6, 0, 2, 2, 2, -6, 4,
              2, 2, 1, 3, -2, 4, 2, 2, 2, 5, -3, 6, 0, 1, 2, 6, 1, 2, 3, 5, -5,
              6, 1, 1, 1, 5, 2, 3, 4, 3, -8, 4, 2, 5, 0, 2, 1, 5, -5, 6, 0, 2,
              7, 3, -13, 4, 2, 2, 3, 2, -9, 4, 0, 2, 2, 5, -2, 6, 0, 1, 3, 6, 0,
              2, 1, 4, -5, 5, 0, 2, 2, 3, -4, 4, 2, 2, 6, 3, -11, 4, 2, 2, 4, 5,
              -5, 6, 0, 1, 2, 5, 2, 3, 1, 4, -3, 5, -3, 6, 0, 2, 3, 3, -6, 4, 2,
              2, 1, 4, -4, 5, 1, 2, 5, 3, -9, 4, 2, 1, 3, 5, 1, 2, 4, 3, -8, 4,
              2, 3, 1, 4, -4, 5, 2, 6, 0, 3, 1, 4, -1, 5, -5, 6, 0, 2, 4, 3, -7,
              4, 2, 2, 1, 4, -3, 5, 2, 3, 1, 4, -5, 5, 5, 6, 1, 3, 1, 4, -4, 5,
              3, 6, 0, 3, 1, 4, -3, 5, 1, 6, 0, 2, 5, 3, -10, 4, 1, 1, 4, 5, 0,
              2, 3, 3, -5, 4, 2, 3, 1, 4, -3, 5, 2, 6, 0, 2, 1, 4, -5, 6, 2, 2,
              1, 4, -2, 5, 2, 3, 1, 4, -4, 5, 5, 6, 1, 2, 6, 3, -12, 4, 1, 2, 1,
              4, -4, 6, 0, 2, 2, 3, -3, 4, 2, 2, 10, 3, -18, 4, 0, 2, 1, 4, -3,
              6, 1, 3, 1, 4, -2, 5, 2, 6, 0, 2, 7, 3, -14, 4, 1, 3, 1, 4, 1, 5,
              -5, 6, 1, 2, 1, 4, -1, 5, 0, 3, 1, 4, -3, 5, 5, 6, 1, 3, 1, 4, 2,
              5, -7, 6, 1, 2, 1, 4, -2, 6, 2, 3, 1, 4, -2, 5, 3, 6, 0, 2, 1, 3,
              -1, 4, 0, 2, 2, 2, -7, 4, 1, 2, 9, 3, -16, 4, 2, 2, 1, 4, -3, 7,
              0, 2, 1, 4, -1, 6, 0, 3, 1, 4, -2, 5, 4, 6, 1, 2, 1, 2, -4, 4, 2,
              2, 8, 3, -16, 4, 2, 2, 1, 4, -2, 7, 0, 3, 3, 3, -5, 4, 2, 5, 0, 3,
              1, 4, 1, 5, -3, 6, 0, 2, 1, 4, -2, 8, 0, 2, 1, 4, -1, 7, 0, 2, 1,
              4, -1, 8, 0, 3, 3, 2, -7, 3, 3, 4, 0, 3, 2, 2, 1, 3, -7, 4, 0, 3,
              1, 4, 1, 6, -3, 7, 0, 3, 1, 4, 2, 5, -5, 6, 1, 3, 4, 3, -7, 4, 3,
              5, 1, 1, 1, 4, 5, 3, 4, 3, -9, 4, 3, 5, 1, 3, 1, 4, -2, 5, 5, 6,
              0, 3, 3, 2, -7, 3, 5, 4, 0, 3, 1, 3, -1, 4, 2, 6, 0, 3, 1, 4, 1,
              5, -2, 6, 0, 3, 3, 3, -7, 4, 2, 5, 0, 2, 8, 3, -14, 4, 1, 2, 1, 2,
              -2, 4, 1, 2, 1, 4, 1, 6, 1, 2, 9, 3, -18, 4, 1, 2, 2, 2, -5, 4, 1,
              2, 1, 3, -3, 4, 2, 2, 1, 4, 2, 6, 0, 2, 1, 4, 1, 5, 1, 3, 4, 3,
              -9, 4, 2, 5, 1, 2, 7, 3, -12, 4, 1, 2, 2, 4, -5, 5, 0, 2, 2, 3,
              -5, 4, 2, 2, 6, 3, -10, 4, 1, 2, 1, 4, 2, 5, 1, 3, 2, 4, -5, 5, 2,
              6, 0, 2, 3, 3, -7, 4, 1, 2, 2, 4, -4, 5, 0, 2, 5, 3, -8, 4, 1, 2,
              1, 4, 3, 5, 0, 3, 2, 4, -4, 5, 2, 6, 0, 3, 2, 4, -1, 5, -5, 6, 0,
              2, 4, 3, -6, 4, 1, 2, 2, 4, -3, 5, 0, 3, 2, 4, -5, 5, 5, 6, 1, 3,
              2, 4, -4, 5, 3, 6, 0, 2, 3, 3, -4, 4, 1, 2, 2, 4, -5, 6, 2, 2, 2,
              4, -2, 5, 1, 3, 2, 4, -4, 5, 5, 6, 1, 2, 2, 4, -4, 6, 0, 2, 2, 3,
              -2, 4, 0, 2, 2, 4, -3, 6, 1, 2, 2, 4, -1, 5, 1, 2, 2, 4, -2, 6, 0,
              1, 1, 3, 1, 2, 2, 4, -1, 6, 0, 2, 1, 2, -5, 4, 1, 2, 8, 3, -17, 4,
              1, 3, 2, 4, 2, 5, -5, 6, 1, 3, 4, 3, -6, 4, 3, 5, 1, 3, 10, 3,
              -17, 4, 3, 6, 0, 1, 2, 4, 4, 3, 4, 3, -10, 4, 3, 5, 1, 2, 8, 3,
              -13, 4, 0, 2, 1, 2, -1, 4, 0, 2, 2, 4, 1, 6, 0, 2, 2, 2, -4, 4, 0,
              2, 1, 3, -4, 4, 1, 2, 2, 4, 1, 5, 0, 2, 7, 3, -11, 4, 0, 2, 3, 4,
              -5, 5, 0, 2, 2, 3, -6, 4, 1, 2, 6, 3, -9, 4, 0, 2, 2, 4, 2, 5, 0,
              2, 3, 4, -4, 5, 0, 2, 5, 3, -7, 4, 0, 2, 4, 3, -5, 4, 1, 2, 3, 4,
              -3, 5, 1, 2, 3, 3, -3, 4, 0, 2, 3, 4, -2, 5, 2, 3, 3, 4, -4, 5, 5,
              6, 0, 2, 2, 3, -1, 4, 0, 2, 3, 4, -3, 6, 0, 2, 3, 4, -1, 5, 1, 2,
              3, 4, -2, 6, 0, 2, 1, 3, 1, 4, 1, 2, 3, 4, -1, 6, 0, 3, 4, 3, -5,
              4, 3, 5, 0, 1, 3, 4, 3, 3, 4, 3, -11, 4, 3, 5, 0, 1, 1, 2, 0, 2,
              2, 2, -3, 4, 0, 2, 1, 3, -5, 4, 0, 2, 4, 4, -5, 5, 0, 2, 6, 3, -8,
              4, 0, 2, 4, 4, -4, 5, 0, 2, 5, 3, -6, 4, 0, 2, 4, 3, -4, 4, 0, 2,
              4, 4, -3, 5, 1, 3, 6, 3, -8, 4, 2, 5, 0, 2, 3, 3, -2, 4, 0, 2, 4,
              4, -2, 5, 1, 2, 4, 4, -1, 5, 0, 2, 1, 3, 2, 4, 0, 1, 4, 4, 3, 2,
              2, 2, -2, 4, 0, 2, 7, 3, -9, 4, 0, 2, 5, 4, -5, 5, 0, 2, 6, 3, -7,
              4, 0, 2, 5, 4, -4, 5, 0, 2, 5, 3, -5, 4, 0, 2, 5, 4, -3, 5, 0, 2,
              5, 4, -2, 5, 0, 1, 5, 4, 3, 1, 6, 4, 2, 1, 7, 4, 0, -1,
            ],
          },
        },
        {
          key: "jupiter",
          type: "heliocentric",
          epoch: 2446800.5,
          inclination: 1.3051,
          node: 100.358,
          perihelion: 275.129,
          semiAxis: 5.20265,
          dailyMotion: 0.0830948,
          eccentricity: 0.0481,
          anomaly: 344.5086,
          equinox: 2446800,
          magnitude: -9.4,
          semiDiameter: 98.44,
          ptable: {
            maxargs: 9,
            max_harmonic: [0, 0, 1, 0, 9, 16, 7, 5, 0],
            max_power_of_t: 6,
            distance: 5.2026032092,
            timescale: 3652500,
            trunclvl: 1,
            lon_tbl: [
              153429.13855, 130818.16897, 18120.42948, -8463.12663, -5058.91447,
              1092566021.02148, 123671.25097, -5.43364, 12.06012, 30428.31077,
              -74667.61443, 46848.16236, -66373.44474, 24312.54264,
              -26045.64766, 18353.92564, -4022.13679, 4037.97936, 10059.82468,
              -4622.55896, 1383.21617, -187.25468, -1171.66028, -62e-5,
              -0.21713, -1198.83945, 1178.62445, -1492.07393, 153.07155,
              -245.57966, -391.9401, 82.264, -40.92104, 3.7252, 10.57242,
              -0.0472, -0.04448, -0.04329, -0.06043, -0.03905, 0.15712,
              -0.05644, -0.00129, -0.00342, 0.02473, 0.00434, -0.01862, 0.00431,
              -0.03993, -0.03159, -0.15982, -0.09928, 0.0443, -0.00357, 0.31312,
              -0.01346, -0.0018, -0.09107, 0.01215, 0.02485, 0.01024, 27.29869,
              2.70896, 12.91956, 19.21726, -6.91384, 5.12954, -1.07533,
              -1.71691, -0.01423, 0.03121, -32.48652, -26.13483, 46.78162,
              -62.02701, 94.96809, 81.73791, -20.13673, 131.05065, -0.00798,
              0.01786, 13.99591, 16.87756, -8.51726, 21.5949, -14.28833,
              -9.4553, 7.73954, -6.53078, 0.03175, -0.04295, 3.06742, -0.11838,
              1.0363, 0.94004, -0.14085, 0.14434, -0.03363, 0.00993, -7e-5,
              -0.02748, 26.01507, -7.37178, 16.96955, 6.24203, -0.40481,
              3.72456, -0.53597, -0.14938, 37.82081, 26.15887, -2.82115,
              78.26478, -63.39155, -5.52419, 13.11482, -43.54977, 15.6494,
              6.67505, -10.25616, -7.39672, -12.37441, 12.24417, 8.54922,
              9.68451, -0.03658, -0.00963, 1.65523, 0.43093, 0.32023, 0.71365,
              -0.12226, 0.03759, 0.10388, 0.47212, -0.02791, 0.09929, -0.04116,
              -0.03125, -0.1024, -0.23199, -0.03524, -0.13625, 7.52726, 6.86314,
              0.01239, 13.4653, -5.22256, 1.56116, -0.15925, -1.19571, 3.26302,
              0.06097, -0.14444, -0.20301, 1.93822, -80.12566, 0.98665,
              -7.52986, 3.86703, -2.43028, 0.6418, 0.78351, 0.0019, -0.00633,
              -0.00321, -0.04403, 0.19018, 0.14335, 0.10315, 0.53154, -62e-5,
              -0.00464, -0.00109, 0.0215, 1.19993, 47.21638, -24.56067,
              25.06332, -7.50751, -6.3625, 1.39443, -1.23806, 0.04951, 0.02176,
              0.02802, -0.01665, -0.10698, -0.13635, 73.54797, -52.34968,
              74.98754, 86.56283, -69.01463, 44.56866, 0.04387, -0.05925,
              -0.03732, -0.03264, 0.00967, 0.02143, 10.59429, 26.48226, 34.0347,
              3.9616, 4.15919, -20.22616, -5.25903, -3.40177, 0.05111, -0.06788,
              0.06497, 1.21024, -0.29607, 0.49991, -0.06055, -0.03464, 0.0295,
              0.16429, 0.00722, -0.90806, -0.02161, 0.00902, -0.00261, 77e-5,
              0.00434, -0.29231, 0.00456, 0.04781, 1.33214, -2.62015, 0.79761,
              -0.8185, 0.06371, 0.00119, 0.03049, -0.03553, 0.02373, -0.01411,
              -189.06132, -169.1794, 5.27464, -227.72664, 83.72511, -12.04794,
              0.23965, 23.75496, -3.43532, -0.34276, -1.3588, 0.45053, -0.34298,
              -0.11441, -0.16328, 0.07423, 481.4815, 79.82461, 453.82764,
              941.94205, -635.83924, 397.29087, -81.54066, -417.2242, 149.91822,
              10.5349, -0.1321, 0.3674, 0.33777, 0.15893, -2562.04968,
              2442.77844, -2602.66709, 2838.87348, 723.50715, -1284.58208,
              -4557.23362, -4514.611, -8960.81693, 4663.55087, -4947.6153,
              19377.42027, -0.16786, -0.19514, 0.321, 0.91502, 4.966, -1.11836,
              307.38057, 175.14618, 16.02093, 444.42376, -219.80047, 62.39286,
              -18.14266, -52.23698, 0.02111, 0.00469, -20.97409, -34.48296,
              -2.03906, -27.0756, 3.73818, -3.00599, 0.24112, 0.4143, -0.03552,
              0.00394, -0.00217, 0.02307, 0.03686, 0.0051, 34.46537, 10.23293,
              9.9952, 28.88781, -11.3121, 3.52646, -0.48062, -2.93641, -0.00987,
              -0.0531, -38.39539, 0.04568, -31.73684, -1.83151, -24.97332,
              -1.71244, 0.33498, 7.03899, -4.15247, 200.43434, -0.008, 0.04462,
              37.83113, -13.40661, 9.49434, -35.41588, -14.72767, -3.84674,
              -0.31412, 3.97734, 0.02908, -0.00353, 1.89935, -14.31774, 7.77051,
              -7.08945, 1.90915, 1.78908, -0.41445, 0.30506, -14.43121, 7.30707,
              -11.97842, -17.64121, 13.38962, -7.20982, -5.23362, 2.11364,
              -0.45605, 4.08835, 1.42683, 0.24838, -0.00605, 0.03199, -0.17609,
              -1.43091, 0.32444, -0.51371, 0.06182, 0.03733, 0.00696, -0.13438,
              4.67581, 4.42379, -1.52602, 4.20659, -1.31757, -0.7291, 1.29012,
              0.9778, 2.25895, -0.85306, 1.7412, -5.09507, 0.28107, -0.0504,
              0.05508, -0.06349, -61e-5, 0.48249, -2.37749, 1.7818, -1.67423,
              -0.35618, 0.05789, -0.35287, 0.56252, -0.66584, 0.61979, 4.84016,
              -4.64462, 17.48002, 0.40982, -4.19214, -1.55252, -1.87505,
              -0.3107, 0.15554, -34e-5, 0.11102, 0.01116, -0.04166, 9.27689,
              -4.3209, 6.84888, 1.78741, -0.09306, 1.68391, -0.27482, -0.04197,
              -7.83068, 37.71086, -37.53346, 7.18559, 0.74427, -24.29751,
              10.87837, 1.35503, 0.00998, -0.03395, -133.52206, -150.11329,
              4.27494, -173.79469, 150.87961, -356.29181, -330.17873,
              -426.29809, -607.98186, 126.35464, -299.69623, 556.41055,
              -0.00342, 0.04411, 44.65946, 42.07312, 85.71397, 5.9513, 24.98064,
              -41.20026, -14.0597, -10.46101, -2.24038, 2.89211, 0.06175,
              0.08128, 0.00705, 0.01939, -1.08361, -0.08213, -0.20868, -0.36268,
              -4.96489, -2.05966, -6.16586, 3.65514, -3.12555, 12.20821,
              -1.11236, -1.73772, -1.34045, -0.22774, -0.08639, 0.27355, -0.077,
              1.0626, -0.46013, 0.31916, -0.04969, -0.09488, -1.54, 0.04949,
              -0.07616, -0.95933, 0.93303, 3.43183, -0.82917, -0.82042,
              -0.68158, 0.17083, 0.06942, 0.17491, -0.02699, -0.01051, 0.00657,
              0.03063, -0.52595, 0.84035, -0.88323, -0.70188, 0.60928, -0.48179,
              0.3829, 0.04482, 0.26456, -0.32369, -0.00615, 0.03218, -0.32943,
              0.14675, -0.10782, -0.09036, -0.58003, 0.72888, -0.46654, 1.17977,
              0.00222, 0.01541, -0.19226, -0.0777, -0.01829, -0.0507, -1.75385,
              -1.32969, 0.52361, -1.36036, 0.67222, 1.34612, 6.96841, -29.24025,
              -23.769, -39.91647, -41.01215, -2.23638, -18.81024, 20.77095,
              -0.68592, -2.26212, -1.14065, -0.76493, -0.18044, 0.15193,
              -0.20669, -0.44387, 0.25697, -0.1788, -0.53097, 0.43181, -0.35187,
              0.71934, -0.14962, 0.0922, -0.05031, -0.03924, 0.06571, 0.29487,
              0.0517, 0.36847, 0.02754, -0.00411, -0.08313, -0.16907, 0.10273,
              -0.07315, -0.02312, 0.04912, -0.01062, -0.02713, 0.03806, 0.13401,
              -1.79865, -2.0454, -2.69965, -0.65706, -1.17916, 0.79292, 0.02415,
              0.14001, -0.01767, 0.04209, 0.05212, -0.01795, 0.01285, 0.04028,
              0.01075, 0.05533, 0.02323, -0.00864, -0.04691, 0.03128, 0.00548,
              0.02254, 11e-5, 0.12033,
            ],
            lat_tbl: [
              548.59659, 594.29629, 219.97664, 59.71822, 23.62157, 40.77732,
              227.0738, 0.00293, -0.00745, -307.33226, -347.92807, -309.49383,
              -428.18929, -96.59506, -191.36254, 2.11014, -34.44145, 2.23085,
              6.7711, -5.43468, -0.28391, 0.28355, -1.8169, 36e-5, 78e-5,
              -1.83259, 1.17464, -2.66976, -0.92339, -0.23645, -1.20623,
              0.25248, -0.04958, 64e-5, 0.03599, -79e-5, 4e-5, -5e-5, -1e-4,
              -24e-5, 51e-5, 1e-5, 5e-5, 15e-5, 1e-4, 17e-5, -4e-5, 0.00113,
              -11e-5, 21e-5, 87e-5, 0.0012, -0.00114, -0.00881, -2e-4, -5e-5,
              9e-5, 5e-5, 7e-5, 2e-5, -33e-5, -0.00554, -0.32274, 0.23695,
              -0.11184, 0.0405, 0.09929, -0.02189, 0.00305, -0.00142, -55e-5,
              0.66623, 0.3459, 0.74913, -0.23202, -1.08316, -1.40407, 1.72287,
              -0.07604, 24e-5, 4e-5, 0.03592, 0.91143, -1.11848, -0.17473,
              0.915, -1.34912, 0.85229, 0.69029, -19e-5, 75e-5, 0.03615,
              0.30768, -0.08733, 0.12016, -0.01716, -0.01138, 21e-5, 4e-5,
              0.00531, 98e-5, -0.14354, -0.02364, -0.05559, -0.07561, 0.01419,
              -0.01141, 14e-5, 0.00218, -0.36564, 0.13498, -0.13283, -0.11462,
              0.23741, 0.1496, -0.23173, 0.25148, 0.00763, -0.05987, -0.00857,
              0.20312, -0.29399, 0.34831, -1.33166, -0.46808, -27e-5, 46e-5,
              0.15729, 0.01367, 0.04093, 0.07447, -0.01598, 0.00785, 0.00583,
              0.00324, 53e-5, 0.0016, -3e-4, 43e-5, -0.00208, 0.00334, -0.00316,
              0.00136, 0.23086, 0.05711, 0.19558, 0.05897, 0.0107, 0.05021,
              -0.00818, -0.02242, 0.06301, -0.26483, 0.66177, 0.02125, 0.13477,
              0.19376, -0.3652, 0.83588, -0.69848, -0.00877, 0.01626, -0.23878,
              -0.00373, 44e-5, 8e-5, -4e-5, -0.00374, -0.00283, 0.01104,
              -0.00619, 4e-5, 15e-5, 26e-5, 13e-5, 0.0463, -0.11815, 0.00773,
              0.03796, -0.05172, 0.00149, 0.00444, -0.01493, -64e-5, -44e-5,
              -33e-5, 2e-5, -12e-5, 0.00284, -0.15622, -0.92158, -0.8269,
              -1.52101, -0.55934, 0.69375, -0.00171, 31e-5, 0.00129, -13e-5,
              -24e-5, -83e-5, 0.66101, -0.21764, -0.43967, 0.30157, 0.53389,
              1.59141, 1.94286, 0.14146, -64e-5, -6e-5, 0.2185, -0.02912,
              0.08594, 0.08734, -0.01678, 0.01629, 0.00133, 0.00562, 0.00128,
              -25e-5, -5e-5, 27e-5, 32e-5, 1e-5, 37e-5, 42e-5, 7e-4, 3e-5,
              0.00275, -0.13096, 0.02329, -0.05582, 0.00405, -0.00251, 0.01316,
              -0.01165, 0.00279, -0.00374, -39.62783, 20.91467, -28.97236,
              3.7756, -3.30029, 0.11472, -0.48216, 1.05814, -0.21607, -0.03055,
              -0.64162, -0.57355, -0.05861, -0.18592, -0.12207, -0.06279,
              -38.55325, -125.74207, -47.22357, 41.75842, -119.38841, 18.88515,
              -11.0483, -50.98851, 16.64895, 1.76553, 0.09474, 0.03714, 0.02593,
              0.07967, -1187.61854, -1094.91786, -1011.21939, -1102.25998,
              -575.88672, -107.8486, -890.58889, -807.06589, 971.78461,
              -1287.2456, -4601.44669, -849.54329, -0.00904, 0.06233, -0.19456,
              -0.05521, -0.36915, 1.15363, 32.64763, -85.19705, 114.34437,
              -13.37747, 15.92865, 55.84857, -13.10538, 3.07629, -0.00327,
              0.00104, -7.81035, 6.1996, -6.36096, 1.00493, -0.66971, -0.84572,
              0.09943, -0.04583, 0.002, -32e-5, -0.00265, 47e-5, -53e-5, 46e-5,
              -0.24396, 0.20664, -0.3082, -0.04917, 0.06184, -0.12642, 0.03053,
              0.05054, 35e-5, 12e-5, 0.42063, -0.58254, 0.90517, -0.66276,
              0.64765, 0.39338, -1.40645, 0.33017, -1.43377, -0.67089, -45e-5,
              -36e-5, 0.2369, 0.07185, 0.28386, -0.04397, 0.02836, -0.13082,
              -0.00978, 0.00108, 46e-5, 83e-5, -0.01665, 0.32499, -0.0998,
              0.18611, -0.02561, 0.00239, -84e-5, -0.0011, 0.46854, -0.35113,
              0.69908, 0.53244, 0.12875, 0.01115, 0.1393, 0.02747, -0.10587,
              -0.17759, -0.2685, 0.044, 1e-4, -15e-5, 0.00164, -0.01308,
              0.00488, -0.01046, 0.0017, 24e-5, 84e-5, 14e-5, -0.08481,
              -0.02547, -0.0229, -0.02281, -0.03946, -0.0281, 0.01298, 0.08658,
              0.05575, -0.01081, 1.09695, 0.35441, -0.03127, 0.07946, 0.01245,
              0.02578, -0.00524, -27e-5, 0.08217, -0.31742, 0.15273, -0.07804,
              0.01197, 0.03053, 0.81596, 0.3864, -0.89777, 0.59499, -0.39581,
              -0.87375, 0.02096, 0.49772, 0.29986, 0.2421, 0.14038, -0.03016,
              -0.00208, 45e-5, 0.01024, 0.00114, 1.2301, 1.75663, -0.12741,
              1.44996, -0.31607, 0.03151, 0.00259, -0.04741, -11.57091, 8.00331,
              -9.24028, -6.36906, 4.71248, -2.43695, 0.3863, 1.90625, 0.01401,
              0.00114, 33.5669, -55.17784, 33.21425, -52.57002, 27.04138,
              13.7861, 69.60307, -81.16312, 27.5396, -158.28336, -205.94418,
              -95.08051, -0.01407, -0.00364, -18.56128, 6.0227, -10.11059,
              24.69471, 12.31878, 9.94393, 3.81994, -4.84109, -1.0844, -0.72136,
              0.03731, -0.02094, 0.00789, -0.00176, 0.09673, -0.11181, 0.03112,
              -65e-5, -0.29167, -0.82083, 0.40866, -0.77487, -2.23349, -0.46973,
              0.41024, -0.14274, 0.07755, -0.24895, -0.04965, -0.01197,
              -0.02264, 0.05917, -0.02817, 0.01242, -0.0025, -0.00247, -0.14414,
              -0.03739, 0.14708, -0.07908, 0.05843, 0.15173, -0.01601, -0.07844,
              -0.05957, -0.03143, -0.0183, 0.01257, -0.00109, -0, 0.00174, 5e-4,
              -0.02119, 0.06918, -0.0247, 0.00185, 0.02372, -0.02417, 0.01081,
              0.05222, 0.0982, 0.05931, -0.00588, -86e-5, 0.01688, -0.00133,
              -73e-5, 41e-5, -0.0228, -0.05706, -0.17694, -0.12027, 0.00196,
              -6e-4, 51e-5, -0.02426, 0.00314, -0.00302, 0.17923, -0.78343,
              0.52073, -0.02398, -0.03978, 0.20841, 6.51325, 3.37139, 12.88844,
              -6.72098, 3.40949, -14.34313, -9.68278, -7.85143, 1.06886,
              -0.21727, 0.36675, -0.49815, -0.07289, -0.07537, 0.01107,
              -0.00644, 0.01013, -0.00306, -0.00708, -0.13488, -0.23041,
              -0.10698, -49e-5, -0.00692, -0.00142, -0.00211, -0.04021, 0.01805,
              0.00479, 0.0062, 0.00739, 0.00566, -0.00101, -22e-5, 0.00261,
              -0.00188, -0.01812, -0.01205, -61e-5, -61e-5, -0.02479, 0.01157,
              0.91642, -0.65781, 0.39969, -1.13699, -0.43337, -0.57828, 0.00145,
              0.00281, -0.01675, -0.00975, 0.00119, -74e-5, -0.00343, 0.00139,
              61e-5, 86e-5, 54e-5, -46e-5, -0.01996, -0.02689, 34e-5, 37e-5,
              -6e-5, 1e-5,
            ],
            rad_tbl: [
              -734.58857, -1081.0446, -551.6575, -148.79782, -25.23171,
              164.64781, 248.64813, -0.05163, -0.02413, -1306.61004, 560.02437,
              -1622.58047, 589.92513, -812.39674, 166.8534, -157.92826,
              -107.14755, 68.989, -18.95875, -0.16183, 36.24345, -9.19972,
              -2.29315, -0.00316, 0.00222, 10.95234, 21.37177, -6.2955,
              21.83656, -7.70755, 1.38228, -0.2177, -1.49525, 0.17951, 0.01043,
              62e-5, 0.00208, -66e-5, 5e-4, 0.00313, 0.00187, 1e-4, 0.00131,
              0.00102, 47e-5, 0.00102, 12e-5, 12e-5, -37e-5, 0.00808, 27e-5,
              -0.01219, -0.00961, -0.04166, -0.00327, -1e-5, -0.00146, -92e-5,
              -0.00989, -0.00135, 0.00196, 0.19216, 2.48442, -1.43599, 1.39651,
              -0.48549, -0.53272, 0.14066, -0.10352, 0.00141, 66e-5, 2.96838,
              -3.09575, 6.27741, 5.24306, -8.7708, 9.03247, -10.9835, -3.58579,
              -0.00168, -0.001, 0.20234, -0.75737, 0.36838, -0.58241, 0.4143,
              -0.35784, 0.47038, -0.10586, 0.00539, 0.0049, -0.01375, -0.0195,
              0.00145, 0.00723, -0.00391, 0.00391, -0.00131, -0.00568, 0.01317,
              0.00319, 1.31006, 5.89394, -1.61753, 3.68814, -0.80644, -0.14747,
              0.04481, -0.11361, -4.3613, 7.92488, -16.29047, -1.52163, 2.14492,
              -14.38028, 9.65573, 3.56881, -1.87208, 3.36213, 1.84499, -2.41575,
              -2.77076, -3.23915, -3.34573, 1.40979, 0.00217, -0.00841, 0.29313,
              -0.36246, 0.22043, 0.02328, -0.01182, 0.04074, -0.15728, 0.02468,
              -0.03185, -0.01099, 0.01059, -0.01274, 0.07362, -0.02642, 0.04035,
              -0.00968, -2.14457, 2.53297, -4.34196, -0.11421, -0.38757,
              -1.73872, 0.39784, -0.01397, -0.03311, 0.97723, 0.1606, -0.07486,
              25.96413, 0.75088, -3.04736, 0.3034, -1.43451, -1.35136, 0.26526,
              -0.40247, -0.0046, -56e-5, 0.01633, -0.00128, -0.05197, 0.07002,
              -0.1945, 0.03737, 0.00188, -37e-5, -0.00903, -59e-5, -19.73809,
              0.58424, -10.42034, -10.14579, 2.6599, -3.07889, 0.50884, 0.58508,
              -0.0097, 0.02099, 0.00716, 0.01161, 0.05751, -0.04515, 22.08042,
              30.82415, -36.2743, 31.40265, -18.3015, -29.16403, 0.02454,
              0.01834, -0.01312, 0.01576, -0.00928, 0.0033, -11.78094, 4.06738,
              -2.5159, 15.05277, 9.12747, 2.88088, 2.32916, -2.08271, 0.02872,
              0.02194, 0.60494, -0.04597, 0.24749, 0.15971, -0.02185, 0.03384,
              -0.07075, 0.01287, 0.40201, 0.00347, -0.0041, -0.00998, -5e-5,
              -0.00121, 0.1377, 0.00186, -0.02268, 0.0021, 1.26291, 0.65546,
              0.38885, 0.3888, -0.00184, 0.03067, 0.01273, 0.01136, 0.00557,
              0.01117, 94.13171, -88.37882, 120.53292, 8.32903, 7.77313,
              43.46523, -11.66698, 0.44639, 0.15092, -1.68367, -0.30833,
              -0.4903, 0.01971, -0.14144, -0.04019, -0.0511, -39.70024,
              272.91667, -468.46263, 256.77696, -200.6313, -307.98554,
              206.56301, -41.76039, -4.74242, 74.19909, 0.18474, 0.05547,
              -0.06732, 0.16515, -1156.31285, -1102.97666, -1346.99288,
              -1121.0109, 666.8455, 421.92305, 2259.4974, -2268.69758,
              -2325.87639, -4476.46256, -9683.77583, -2472.92565, -0.104,
              0.08075, -0.45225, 0.16621, 0.57789, 2.43804, 85.21675,
              -154.17208, 219.91042, -9.71116, 31.1324, 108.60117, -25.85622,
              8.98402, -0.00233, 0.0103, -17.01324, 10.41588, -13.34449,
              1.08782, -1.48199, -1.81734, 0.20334, -0.11734, -0.0023, -0.01869,
              -0.01182, -0.00129, -0.00281, 0.02021, -5.75973, 19.13309,
              -16.1369, 5.53382, -1.96585, -6.29211, 1.63105, -0.26089, 0.02935,
              -0.00555, 0.307, -19.96182, 0.99825, -16.32664, 0.83052,
              -13.76201, -3.15609, 0.1736, -111.81423, -2.05419, -0.02455,
              -0.00478, 7.45114, 21.53296, 19.90263, 5.6942, 2.31253, -8.15116,
              -2.1744, -0.23014, 0.00168, 0.0159, 8.78005, 0.71418, 4.48561,
              4.5068, -1.05713, 1.1788, -0.19327, -0.24877, -5.0087, -8.66354,
              10.51902, -7.71011, 4.65486, 8.05673, -1.39635, -3.07669,
              -2.40347, -0.11167, -0.04064, 0.83512, -0.02041, -0.00351,
              0.97375, -0.15795, 0.36361, 0.19913, -0.02142, 0.04193, 0.08801,
              0.00475, -2.8101, 3.11341, -2.79191, -0.93313, 0.4457, -0.88287,
              -0.51815, 0.54776, 0.29736, 0.99779, 2.28957, 0.82183, 0.03386,
              0.12855, 0.03124, 0.02454, -0.31958, 7e-4, -1.48184, -1.28195,
              0.03965, -1.12026, 0.2391, 0.01293, 0.36146, -0.64483, -1.8847,
              0.21469, -11.79819, -1.87287, 2.65699, -0.36287, 0.88148,
              -1.26883, -0.19657, -0.14279, -0.07536, -4e-5, 0.01496, 0.00537,
              2.48352, 3.75581, -0.34909, 3.26696, -0.82105, 0.11287, -0.00755,
              -0.13764, -15.34429, -2.79957, -3.22976, -15.46084, 10.66793,
              -0.26054, -0.12188, 5.06211, 0.01313, 0.00424, 84.34332,
              -57.05646, 92.6815, -0.02024, 149.62698, 59.14407, 174.04569,
              -129.26785, -55.99789, -238.01484, -212.51618, -115.94914,
              -0.0172, -0.00158, -13.65602, 17.47396, 0.16714, 32.66367,
              16.30095, 9.18345, 3.98555, -5.39985, -1.09958, -0.86072, 0.02752,
              -0.02474, 0.00671, -0.00278, -0.2103, -0.73658, 0.20708, -0.21378,
              0.78462, -2.14051, -1.6007, -2.60915, -5.02441, -1.19246, 0.67622,
              -0.41889, 0.0743, -0.53204, -0.11214, -0.03417, -0.72636,
              -0.15535, -0.16815, -0.35603, 0.0753, -0.02521, -0.01261,
              -0.94883, 0.3993, -0.0537, -2.77309, 0.38431, 0.72127, -0.5203,
              -0.01804, -0.51188, -0.11993, 0.02189, 0.00928, -0.02129, -0.0276,
              0.00441, -0.56832, -0.48114, 0.64192, -0.65656, 0.37483, 0.51883,
              -0.08474, 0.20324, 0.12783, 0.13041, -0.01545, -0.00282, -0.16196,
              -0.2698, 0.06584, -0.09987, -0.36305, -0.2761, -0.57074, -0.13607,
              -0.00824, 0.00369, 0.06094, -0.12214, 0.03581, -0.00876, 0.49346,
              -0.74596, 0.47814, 0.18201, -1.0064, 0.24465, 10.09808, 2.30496,
              13.63359, -7.94007, 0.29792, -13.55724, -6.48556, -5.99581,
              0.69686, -0.22434, 0.23198, -0.35579, -0.04736, -0.05683, 0.3671,
              -0.16571, 0.14876, 0.21824, -0.1894, -0.15063, -0.23692, -0.0999,
              -0.08923, -0.12222, 0.02998, -0.0456, -0.16229, 0.04552, -0.33051,
              0.02585, -0.00622, 0.01583, 0.15436, -0.07109, 0.06429, 0.09218,
              -0.01277, -19e-5, 0.02345, -0.01057, -0.07294, 0.02506, 0.62063,
              -0.52533, 0.16814, -0.77168, -0.20614, -0.31828, -0.12856,
              0.01316, -0.01522, -0.00126, 0.01558, 0.04765, -0.02776, 0.01166,
              -0.05185, 0.00674, 0.00754, 0.02183, -0.00645, -0.0105, -0.02155,
              0.00375, 0.1204, -4e-5,
            ],
            arg_tbl: [
              0, 6, 3, 2, 5, -6, 6, 3, 7, 0, 2, 2, 5, -5, 6, 6, 3, 1, 5, -2, 6,
              -3, 8, 0, 2, 4, 5, -10, 6, 4, 3, 2, 5, -4, 6, -3, 7, 1, 3, 3, 5,
              -10, 6, 7, 7, 0, 2, 6, 5, -15, 6, 0, 3, 1, 5, -4, 6, 4, 7, 0, 3,
              3, 5, -8, 6, 2, 7, 0, 3, 1, 5, -3, 6, 1, 7, 0, 3, 1, 5, -3, 6, 2,
              7, 0, 1, 1, 7, 1, 2, 5, 5, -12, 6, 0, 3, 2, 5, -7, 6, 7, 7, 0, 3,
              1, 5, -1, 6, -3, 7, 0, 2, 3, 5, -7, 6, 3, 3, 1, 5, -4, 6, 3, 7, 0,
              2, 1, 5, -2, 6, 3, 3, 3, 5, -8, 6, 3, 7, 0, 2, 1, 5, -3, 6, 3, 3,
              1, 5, -3, 6, 3, 7, 0, 2, 3, 5, -8, 6, 2, 3, 2, 5, -5, 6, 2, 7, 0,
              1, 2, 7, 0, 2, 4, 5, -9, 6, 3, 2, 2, 5, -4, 6, 4, 1, 1, 6, 2, 3,
              2, 5, -5, 6, 3, 7, 0, 2, 2, 5, -6, 6, 2, 2, 5, 5, -11, 6, 1, 3, 1,
              5, -2, 7, -2, 8, 0, 2, 1, 5, -3, 7, 1, 2, 3, 5, -6, 6, 3, 2, 1, 5,
              -1, 6, 2, 2, 1, 5, -4, 6, 2, 2, 3, 5, -9, 6, 0, 3, 2, 5, -4, 6, 2,
              7, 0, 2, 1, 5, -2, 7, 1, 2, 6, 5, -13, 6, 0, 3, 2, 5, -2, 6, -3,
              7, 0, 2, 4, 5, -8, 6, 3, 2, 3, 6, -3, 7, 0, 3, 6, 5, -14, 6, 3, 7,
              0, 3, 1, 5, -2, 7, 1, 8, 0, 2, 2, 5, -3, 6, 2, 3, 1, 5, -4, 7, 5,
              8, 0, 3, 2, 5, -8, 6, 3, 7, 0, 3, 4, 5, -9, 6, 3, 7, 0, 1, 2, 6,
              3, 3, 2, 5, -4, 6, 3, 7, 0, 2, 2, 5, -7, 6, 2, 2, 1, 5, -2, 8, 0,
              2, 1, 5, -1, 7, 0, 3, 3, 5, -6, 6, 2, 7, 0, 3, 4, 5, -8, 6, 2, 8,
              0, 2, 1, 5, -1, 8, 0, 3, 2, 5, -3, 6, 1, 7, 0, 2, 7, 5, -15, 6, 2,
              3, 3, 5, -4, 6, -3, 7, 1, 2, 5, 5, -10, 6, 4, 3, 1, 5, 1, 6, -3,
              7, 1, 3, 7, 5, -16, 6, 3, 7, 0, 2, 3, 5, -5, 6, 4, 3, 1, 5, -6, 6,
              3, 7, 0, 3, 5, 5, -11, 6, 3, 7, 0, 1, 1, 5, 5, 3, 3, 5, -11, 6, 3,
              7, 0, 3, 3, 5, -6, 6, 3, 7, 0, 2, 2, 5, -7, 7, 0, 2, 1, 5, -5, 6,
              3, 3, 1, 5, -1, 6, 3, 7, 0, 2, 3, 5, -10, 6, 3, 3, 2, 5, -3, 6, 2,
              7, 0, 2, 1, 5, 1, 7, 0, 3, 2, 5, -1, 6, -3, 7, 0, 2, 4, 5, -7, 6,
              3, 2, 4, 6, -3, 7, 0, 2, 2, 5, -2, 6, 4, 3, 4, 5, -8, 6, 3, 7, 0,
              1, 3, 6, 3, 3, 2, 5, -3, 6, 3, 7, 0, 2, 5, 5, -9, 6, 3, 2, 3, 5,
              -4, 6, 2, 2, 1, 5, 1, 6, 2, 2, 2, 5, -4, 7, 0, 2, 6, 5, -11, 6, 2,
              2, 2, 5, -3, 7, 0, 2, 4, 5, -6, 6, 2, 2, 2, 5, -1, 6, 2, 1, 4, 6,
              1, 2, 2, 5, -2, 7, 0, 2, 5, 5, -8, 6, 2, 2, 3, 5, -3, 6, 2, 2, 1,
              5, 2, 6, 2, 2, 2, 5, -2, 8, 0, 2, 2, 5, -1, 7, 0, 2, 6, 5, -10, 6,
              3, 2, 4, 5, -5, 6, 3, 2, 6, 6, -3, 7, 0, 1, 2, 5, 5, 3, 4, 5, -6,
              6, 3, 7, 0, 1, 5, 6, 4, 2, 2, 5, -10, 6, 1, 2, 5, 5, -7, 6, 1, 2,
              3, 5, -2, 6, 2, 2, 1, 5, 3, 6, 2, 2, 6, 5, -9, 6, 2, 2, 4, 5, -4,
              6, 2, 2, 2, 5, 1, 6, 2, 2, 7, 5, -11, 6, 0, 2, 3, 5, -3, 7, 0, 2,
              5, 5, -6, 6, 2, 2, 3, 5, -1, 6, 1, 2, 3, 5, -2, 7, 0, 2, 6, 5, -8,
              6, 1, 2, 4, 5, -3, 6, 1, 2, 2, 5, 2, 6, 0, 2, 7, 5, -10, 6, 1, 2,
              5, 5, -5, 6, 2, 1, 3, 5, 3, 2, 1, 5, 5, 6, 2, 2, 6, 5, -7, 6, 1,
              2, 4, 5, -2, 6, 1, 2, 7, 5, -9, 6, 1, 2, 5, 5, -4, 6, 0, 2, 6, 5,
              -6, 6, 0, 2, 4, 5, -1, 6, 0, 2, 7, 5, -8, 6, 1, 2, 5, 5, -3, 6, 0,
              2, 8, 5, -10, 6, 0, 2, 6, 5, -5, 6, 0, 1, 4, 5, 2, 2, 7, 5, -7, 6,
              0, 2, 5, 5, -2, 6, 0, 2, 8, 5, -9, 6, 0, 2, 7, 5, -6, 6, 0, 2, 8,
              5, -8, 6, 0, 2, 9, 5, -10, 6, 0, 1, 5, 5, 0, 2, 9, 5, -9, 6, 0, 2,
              1, 3, -1, 5, 0, -1,
            ],
          },
        },
        {
          key: "saturn",
          type: "heliocentric",
          epoch: 2446800.5,
          inclination: 2.4858,
          node: 113.555,
          perihelion: 337.969,
          semiAxis: 9.5405,
          dailyMotion: 0.033451,
          eccentricity: 0.052786,
          anomaly: 159.6327,
          equinox: 2446800,
          magnitude: -8.88,
          semiDiameter: 82.73,
          ptable: {
            maxargs: 9,
            max_harmonic: [0, 0, 1, 0, 8, 18, 9, 5, 0],
            max_power_of_t: 7,
            distance: 9.55758135486,
            timescale: 3652500,
            trunclvl: 1,
            lon_tbl: [
              1788381.2624, 2460423.68044, 1370113.15868, 415406.99187,
              72040.39885, 12669.58806, 439960754.85333, 180256.80433, 18.71177,
              -40.37092, 66531.01889, -195702.70142, 57188.02694, -179110.60982,
              -19803.0652, -58084.15705, -9055.13344, -31146.10779, 11245.43286,
              -3247.59575, 459.4867, 2912.82402, -4.06749, -13.53763, -30.55598,
              -4.51172, 1.48832, 0.37139, 597.35433, 1193.44545, -297.50957,
              976.38608, -263.26842, 34.84354, -6.77785, -29.92106, -0.16325,
              -0.18346, -0.15364, -0.08227, 0.2018, 0.02244, 0.04672, -0.29867,
              -0.04143, -0.0076, -0.17046, -0.00778, 0.042, 0.23937, -98e-5,
              -0.05236, -0.02749, -0.01813, 0.00637, 0.01256, -0.04506, 0.04448,
              -0.00105, 0.06224, 0.01157, 0.17057, -0.03214, 0.18178, -0.22059,
              -0.01472, -0.24213, 0.04309, 0.03436, 0.44873, 0.0135, -0.01931,
              -0.80618, -0.56864, 0.29223, -0.03101, 0.04171, 0.02264, -0.01264,
              -0.01645, 0.01774, 0.06374, -0.01925, -0.03552, 0.10473, -0.04119,
              0.08045, 0.04635, -3.01112, -9.26158, 8.13745, 1.88838, -0.15184,
              0.16898, -0.22091, 0.2907, -0.03259, 0.06938, -0.08499, -0.21688,
              0.01848, -0.05594, 0.501, -27e-5, 0.133, 0.12055, 0.03039,
              0.03854, -1.55287, 2.55618, -0.45497, -0.29895, -0.93268, 0.83518,
              -0.32785, 7.03878, -1.66649, 2.75564, -0.29459, 0.0105, 0.08293,
              -0.03161, -0.1275, -0.04359, 0.04217, 0.0748, -114.43467,
              49.47867, -66.5234, -26.27841, 15.4819, -13.06589, 3.28365,
              5.02286, -0.17155, -0.07404, 0.00924, -0.07407, -0.02922, 0.06184,
              108.04882, 86.09791, -155.12793, 208.10044, -311.7281, -268.92703,
              74.57561, -420.03057, -0.07893, 0.09246, -0.66033, -0.39026,
              -0.13816, -0.0849, -36.79241, -78.88254, 71.88167, -68.05297,
              51.71616, 65.7797, -43.59328, 23.51076, -0.02029, -0.32943,
              -8.82754, 1.48646, -3.12794, 2.12866, -0.06926, 0.44979, 0.00621,
              -0.5172, -3.82964, -1.48596, -0.11277, -3.21677, 0.81705,
              -0.19487, -0.06195, 0.10005, -0.02208, 0.00108, 0.00455, -0.03825,
              0.01217, -0.00599, -0.17479, -0.4729, 0.85469, 1.12548, -0.80648,
              -0.44134, -0.01559, -0.07061, 0.01268, -0.01773, 0.01308,
              -0.03461, -0.71114, 1.9768, -0.78306, -0.23052, 0.94475, -0.10743,
              0.18252, -8.03174, 0.00734, 0.04779, 0.12334, -0.03513, 0.01341,
              0.02461, 0.02047, -0.03454, 0.02169, -0.01921, -1.12789, 0.09304,
              0.14585, 0.36365, 0.03702, 0.10661, -0.00464, -1.72706, -0.00769,
              -0.04635, -0.01157, 99e-5, 10.92646, 1.96174, 2.91142, 4.74585,
              -0.29832, 0.75543, 0.05411, 1.0585, 0.38846, -0.16265, 1.52209,
              0.12185, 0.1865, 0.35535, -278.33587, -82.58648, -160.00093,
              -225.55776, 35.17458, -77.56672, 10.61975, 3.33907, 0.0609,
              2.17429, -4.32981, -5.84246, 11.43116, 20.61395, -0.65772,
              1.28796, 1224.46687, -3113.15508, 3798.33409, -137.28735,
              -256.89302, 2227.35649, -779.78215, -260.37372, 11.73617,
              -13.2505, -0.75248, -2.87527, -8.38102, 17.21321, -61784.69616,
              39475.02257, -54086.68308, 54550.8549, -16403.69351, 29602.70098,
              14672.06363, 16234.17489, 15702.37109, -22086.303, -22889.89844,
              -1245.88352, 1.48864, 19.75, 0.78646, 3.29343, -1058.13125,
              4095.02368, -2793.78506, 1381.93282, -409.19381, -772.5427,
              161.67509, -34.1591, -514.27437, 27.34222, -311.04046, 48.0103,
              -43.36486, 16.19535, -0.73816, -0.81422, 287.32231, -110.44135,
              200.4361, 37.9817, 17.73719, 34.40023, -2.46337, 1.48125, 0.09042,
              -0.11788, 0.37284, 0.51725, 0.00597, 0.1459, -0.01536, 0.0098,
              0.00721, 0.02023, 27e-5, 0.02451, -0.72448, -0.71371, 0.29322,
              0.18359, 0.72719, -0.37154, 0.14854, -0.0253, 0.23052, 0.04258,
              4.82082, 0.01885, 3.11279, -0.63338, 0.10559, -0.02146, -0.01672,
              0.03412, 0.00605, 0.06415, -0.89085, 1.51929, -0.36571, 0.39317,
              12.0525, -3.79392, 3.96557, -3.51272, -0.17953, 12.30669,
              -0.05083, -0.11442, 0.02013, -0.02837, -0.02087, -0.01599, 0.4919,
              0.3036, 0.01316, 0.17649, 0.21193, -0.09149, -0.07173, -0.05707,
              4.24196, -1.25155, 1.81336, 0.68887, -0.01675, 0.20772, -0.04117,
              -0.03531, -0.0269, -0.02766, 37.54264, 10.95327, 8.0561, 30.5821,
              -12.68257, 1.72831, 0.13466, -3.27007, 0.01864, -0.00595, 0.03676,
              0.14857, -0.07223, 0.06179, 0.44878, -1.64901, -20.06001, 0.63384,
              -4.97849, 4.78627, 29.8737, 7.29899, 47e-5, -0.00155, 0.00314,
              0.01425, -0.17842, -0.08461, -1.6102, -8.4771, 6.85048, -4.38196,
              1.05809, 2.68088, -0.01027, -0.00833, 0.06834, -0.04205, 0.0333,
              -0.01271, 0.01301, -0.01358, 0.03537, 0.03612, 0.02962, 0.62471,
              -0.304, -0.64857, 0.01773, 0.0189, 0.01426, -0.00226, -0.50957,
              -0.01955, -0.09702, 1.09983, 0.64387, -0.02755, 0.26604, 0.30684,
              0.06354, 0.05114, -58e-5, -0.04672, -0.00828, 0.00712, -0.0044,
              29e-5, -0.01601, 0.03566, 0.13398, -0.02666, -0.06752, -0.43044,
              0.07172, -0.01999, -0.01761, -0.05357, 0.06104, 0.29742, -0.08785,
              0.05241, -6.57162, -4.20103, 0.03199, -6.46187, 1.32846, -0.51137,
              0.06358, 0.37309, -1.46946, 2.34981, -0.18712, 0.11618, 240.62965,
              -107.21962, 219.81977, 84.04246, -62.22931, 68.35902, -9.4846,
              -32.62906, 5.57483, -1.82396, 1.00095, -0.39774, 7.87054,
              11.45449, -432.67155, 55064.72398, 12444.62359, 54215.28871,
              8486.03749, 12297.48243, -333.27968, 1147.93192, 1403.73797,
              990.40885, -3.84938, -722.43963, 16.83276, 96.48787, 7.04834,
              38.22208, 0.63843, 2.61007, 230.73221, 171.64166, 1.96751,
              287.80846, -85.21762, 31.33649, -2.25739, -11.28441, 0.04699,
              0.06555, -0.08887, 1.70919, 0.09477, 0.26291, -0.1549, 0.16009,
              1.93274, 1.01953, 0.3638, 1.29582, -0.13911, 0.14169, -0.00491,
              -3e-4, -0.08908, -0.10216, -0.03265, -0.03889, 0.40413, -1.12715,
              -0.94687, -0.04514, 0.02487, -0.01048, 0.39729, 2.82305, -0.611,
              1.11728, -0.13083, -0.04965, -0.00602, -0.02952, -6.13507,
              13.73998, -15.70559, -1.28059, 2.64422, -9.33798, 3.2647, 1.56984,
              -0.00572, 0.09992, -8.80458, -8.2389, -11.51628, 9.47904,
              11.31646, 4.29587, -2.41367, -0.05883, -0.80022, -1.02706,
              0.21461, -0.06864, 0.01882, 0.01798, 0.27614, -0.01007, 0.04362,
              0.0756, 0.05519, 0.23435, -0.09389, 0.01613, 0.01298, 0.04691,
              -0.02665, -0.03582, 0.6008, -4.28673, 1.87316, -1.0584, 0.13248,
              0.40887, -0.67657, 0.67732, 0.05522, 0.07812, -0.17707, -0.0751,
              0.24885, 10.63974, -7.40226, -2.33827, 2.75463, -32.51518, 0.0514,
              0.01555, 180.43808, 263.28252, 384.50646, -76.53434, -93.50706,
              -220.50123, -81.9161, 103.92061, 30.90305, -2.89292, -0.06634,
              -0.37717, -0.01945, -0.05936, 29.27877, -59.73705, 35.86569,
              -18.36556, 3.88812, 4.8209, -0.70903, 0.06615, 0.01558, -0.01854,
              0.16209, 0.12682, 0.02508, 0.02406, -0.03078, -0.01737, -33e-5,
              -2e-4, 0.01023, 0.05972, -0.03373, -0.07289, -2.08162, -0.14717,
              -0.64233, -0.75397, 0.11752, -0.09202, 4.42981, -4.19241, 5.02542,
              5.03467, -4.22983, 2.80794, 3.03016, -2.74373, -1.1149, -2.72378,
              -0.63131, 0.74864, -0.00759, -0.00675, 0.03615, -0.01806, -2.7192,
              -1.50954, 0.54479, -1.92088, 0.66427, 0.32228, -2.55188, -0.65332,
              -2.73798, 2.10182, 1.54407, 3.01357, 38.76777, 23.54578, 27.29884,
              -14.93005, -7.50931, -5.66773, 0.30142, 1.52416, 0.00634, 0.09697,
              -0.00748, 0.01433, 0.02936, 0.53228, -0.03603, 0.06345, 0.30816,
              -1.07925, 0.46709, -0.21568, 0.01663, 0.1081, -0.42511, 0.35872,
              -0.19662, -6.74031, 1.05776, 1.86205, 1.08919, 0.10483, -0.03368,
              -0.21535, 0.07556, -0.27104, 0.05142, -0.03812, 1.20189, -1.36782,
              1.35764, 1.39387, -1.19124, 0.77347, -0.5476, -0.26295, -0.07473,
              0.23043, 2.82621, -0.23524, 0.47352, -0.81672, -0.08515, 0.047,
              0.55355, -0.40138, 0.22255, 0.12236, -0.0911, 0.31982, 0.39404,
              -0.17898, -56e-5, 14e-5, -0.02012, 0.03102, 0.43236, -0.10037,
              -0.00961, 0.0744, -0.07076, -1.97272, 0.25555, -0.21832, -0.00837,
              -0.08393, 0.01531, 0.00627, 0.33193, 0.70765, -0.43556, 0.28542,
              -0.2319, -0.04293, -0.08062, 0.13427, 0.23763, -0.17092, 0.09259,
              0.05155, 0.08065, -0.11943, -0.02174, -0.68899, -0.01875,
              -0.01746, 0.13604, 0.2928, -0.17871, 0.11799, 0.02003, 0.04065,
              0.01343, -0.0606, -0.0129, -0.26068, -0.09033, 0.02649, -92e-5,
              -0.03094, -0.0077, -0.10447, -0.04113, 0.01259, -0.00469,
              -0.04346, -1e-4, 0.06547,
            ],
            lat_tbl: [
              -567865.62548, -796277.29029, -410804.00791, -91793.12562,
              -6268.13975, 398.64391, -710.67442, 175.29456, -0.8726, 0.18444,
              -1314.88121, 20709.97394, -1850.41481, 20670.34255, -896.96283,
              6597.16433, -179.80702, 613.45468, 17.37823, -13.62177, -0.36348,
              12.3474, 0.47532, 0.48189, 0.27162, -0.20655, -0.23268, 0.05992,
              46.94511, 15.78836, 21.57439, 23.11342, -0.25862, 5.2141,
              -0.22612, -0.05822, -0.00439, -0.01641, -0.01108, -0.00608,
              0.00957, 0.00272, -0.00217, 1e-5, -0.00534, -0.00545, 0.00277,
              -0.00843, 0.00167, -0.00794, 32e-5, -0.00242, -2e-5, -41e-5,
              -25e-5, 31e-5, 62e-5, -6e-4, 83e-5, 32e-5, 0.00527, -0.00211,
              54e-5, 4e-5, -0.02769, -0.01777, 0.00247, 97e-5, 2e-4, -0.00232,
              44e-5, -35e-5, -72e-5, 0.01341, 0.00325, -0.01159, 79e-5, -78e-5,
              -9e-5, 66e-5, 0.00222, 2e-5, 13e-5, -0.00161, 0.01374, -0.05305,
              0.00478, -0.00283, 0.16033, 0.13859, 0.33288, -0.16932, -0.00316,
              0.00625, -0.00309, 0.01687, 1e-5, 0.00486, 0.00401, -0.01805,
              -48e-5, -0.00407, -0.01329, 0.01311, -0.00591, 0.00166, 0.0083,
              0.00665, -0.80207, 0.22994, -0.34687, 0.0846, -0.11499, -0.01449,
              -0.01574, 0.78813, -0.03063, 0.28872, -0.00337, 0.01801, -0.01703,
              -0.00929, -0.00738, 0.03938, 0.05616, -0.00516, -3.09497,
              30.13091, -3.14968, 17.62201, -0.73728, 2.46962, -0.11233, 0.0345,
              -0.07837, -0.01573, -0.01595, 0.00394, 0.00174, 0.0147, 6.8356,
              -2.37594, 4.95125, 3.24711, 2.44781, 5.17159, 1.9982, -2.38419,
              0.0084, 0.03614, -0.00209, -0.30407, -0.02681, -0.06128, 1.50134,
              11.82856, 4.39644, 6.9885, -4.17679, 5.73436, -9.66087, 1.98221,
              -0.29755, 0.08019, -0.24766, -8.54956, -1.74494, -3.36794,
              -0.32661, -0.00722, 0.14141, 0.01023, -1.21541, -2.5847, 0.38983,
              -1.70307, 0.31209, -0.10345, 0.02593, 0.02178, 0.00289, 0.00393,
              -0.00236, -0.00373, -0.0027, -49e-5, -0.06282, -0.00443, -0.02439,
              -0.02254, -0.0222, 0.03532, -72e-5, 1e-4, -49e-5, -0.00112, 86e-5,
              0.00112, 0.10135, -0.10972, 0.08357, 0.00155, 0.04363, -0.00201,
              -0.01996, -0.01341, -39e-5, -42e-5, -0.00294, 7e-4, 5e-5, -27e-5,
              7e-4, -76e-5, 0.00234, -0.00239, -0.08365, -0.08531, -0.03531,
              0.15012, -0.01995, -0.01731, -0.0037, -0.00745, -0.00315, -79e-5,
              -0.0012, -0.00145, -0.99404, -1.31859, 0.03584, -0.83421, 0.1072,
              -0.05768, 0.06664, -0.09338, -0.01814, -3e-5, -0.05371, -0.06458,
              -0.001, -0.01298, -7.0871, -23.13374, 4.18669, -19.94756, 4.85584,
              -3.37187, 0.58851, 0.31363, 0.01994, 0.27494, -1.37112, 2.61742,
              0.52477, -0.4652, -0.13183, 0.26777, 836.904, -484.65861,
              815.99098, 236.54649, -32.38814, 288.95705, -68.17178, -18.87875,
              -1.79782, -3.68662, -1.2731, -0.65697, -3.6753, 2.10471,
              -13758.97795, 4807.62301, -14582.14552, 9019.73021, -3202.60105,
              4570.16895, 2078.68911, 2892.62326, -2399.35382, 3253.16198,
              -8182.38152, -3588.7768, -0.16505, 1.08603, 0.53388, 0.87152,
              61.53677, 538.43813, -407.32927, 322.27446, -148.71585,
              -179.37765, 54.07268, -34.12281, -14.76569, -17.95681, -10.82061,
              -6.39954, -2.10954, 0.67063, 0.22607, -0.43648, 20.90476,
              -45.48667, 30.39436, -14.20077, 5.17385, 5.12726, -0.66319,
              0.55668, 0.02269, -16e-5, 0.07811, 0.00111, 0.01603, 0.0102,
              -0.00107, 0.00494, -77e-5, -84e-5, -0.00196, 81e-5, -0.03776,
              0.01286, -0.00652, -0.0145, 0.05942, -0.08612, 0.01093, -0.01644,
              0.02147, -0.00592, 0.3635, -0.00201, 0.14419, -0.1007, -0.00491,
              -0.01771, -53e-5, -33e-5, 0.00146, 48e-5, 0.00582, 0.04423,
              -0.00549, 0.00983, 0.27355, -0.38057, 0.24001, -0.05441, -0.07706,
              0.14269, -59e-5, -0.00154, -13e-5, -88e-5, -46e-5, 29e-5,
              -0.00276, -0.00507, 75e-5, -76e-5, 0.01806, 0.00862, -0.0051,
              -0.01364, -29e-5, -0.12664, 0.03899, -0.03562, 0.00318, 0.00514,
              57e-5, 0.00201, 28e-5, 14e-5, -0.47022, -0.74561, 0.40155,
              -0.16471, -0.18445, 0.34425, -0.07464, -0.13709, -0.01018,
              -0.00748, -0.0121, -0.04274, -0.00579, -0.00692, -11.09188,
              -1.67755, -6.62063, -13.84023, 12.75563, -6.73501, 8.31662,
              5.40196, 52e-5, 34e-5, 0.00128, 85e-5, -0.02202, -0.00599,
              -0.33458, -1.65852, 1.47003, -1.02434, 0.87885, 1.15334, -0.00241,
              -0.00721, 0.03154, 0.00612, 0.00318, -0.02521, 42e-5, 0.00213,
              -0.01094, 0.05417, -0.03989, -0.00567, 0.00123, -0.00244, 0.00108,
              0.00242, -0.00138, -99e-5, 0.04967, 0.01643, -0.00133, 0.02296,
              0.12207, 0.05584, 0.00437, -0.04432, -0.00176, -0.00922, -0.00252,
              0.00326, -2e-4, -5e-4, -0.00263, -84e-5, -0.01971, 0.00297,
              0.03076, 0.01736, -0.01331, 0.01121, -0.00675, 0.0034, -0.00256,
              0.00327, -0.00946, 0.03377, -0.0077, 0.00337, 0.61383, 0.71128,
              -0.02018, 0.62097, -0.07247, 0.04418, -0.02886, -0.03848,
              -0.44062, 0.03973, -0.00999, -0.04382, 57.94459, 117.45112,
              -71.22893, 126.39415, -62.33152, -31.90754, 12.17738, -16.46809,
              -1.13298, 0.08962, -0.20532, 0.1632, -1.5511, -1.44757,
              -3102.08749, -7452.61957, -5009.53858, -7216.29165, -2476.87148,
              -1880.58197, -574.49433, 227.45615, 144.50228, 379.15791,
              225.3613, -443.47371, -8.51989, -3.75208, -4.25415, -1.59741,
              -0.43946, -0.06595, 150.42986, 6.54937, 87.67736, 92.32332,
              -21.97187, 29.87097, -4.21636, -5.72955, -0.03879, -0.01071,
              -0.45985, 0.02679, -0.02448, 0.02397, -0.06551, -0.01154, 1.97905,
              -0.82292, 1.1014, 0.30924, 0.03389, 0.1423, 3e-5, 0.00119,
              -0.01117, 0.00665, -0.00132, -0.00576, -0.08356, 0.08556,
              -0.26362, -0.1245, 0.00509, 0.00165, 0.02591, 0.162, -0.03318,
              0.06463, -0.00899, -0.00462, 0.00102, 4e-5, -0.73102, 0.08299,
              -0.52957, -0.35744, 0.14119, -0.24903, 0.20843, 0.14143, 31e-5,
              -0.00234, -0.42643, -2.02084, 1.58848, -1.57963, 0.68418, 2.07749,
              -0.45888, 0.19859, -0.30277, -0.22591, 0.11607, -0.09705, 4e-4,
              0.00431, -0.02683, 0.03158, -0.01302, -0.00541, 0.01742, -6e-5,
              -0.02231, -0.01128, -0.008, 0.02055, -0.00346, 0.00151, 0.56732,
              -0.68995, 0.27701, -0.16748, 0.01002, 43e-5, 0.26916, -0.57751,
              0.15547, -0.15825, -0.02074, -0.07722, -8.23483, -4.02022,
              0.69327, -5.91543, 1.7244, 1.0209, 24e-5, -53e-5, 20.03959,
              14.79136, 76.43531, -14.42019, -7.82608, -69.96121, -54.94229,
              23.5514, 26.60767, 14.68275, 0.05118, -0.10401, -75e-5, -0.01942,
              -3.84266, -26.23442, 10.20395, -14.77139, 3.40853, 2.07297,
              -0.53348, 0.40635, 0.00716, -0.00189, 0.12472, -0.02903, 0.02254,
              -0.00183, -0.00175, -0.01522, 3e-5, -0.00339, 0.00383, -0.00168,
              0.01327, -0.03657, -0.08458, -0.00115, -0.03991, -0.02629,
              0.00243, -0.00505, 0.33875, -0.16744, 0.05183, 0.01744, -0.24427,
              0.15271, 0.3755, -0.17378, 0.09198, -0.27966, -0.2216, 0.16426,
              32e-5, -0.0031, -22e-5, -0.00144, -0.0617, -0.01195, -0.00918,
              0.02538, 0.03602, 0.03414, -0.14998, -0.44351, 0.45512, -0.11766,
              0.35638, 0.27539, 5.93405, 10.55777, 12.42596, -1.8253, -2.36124,
              -6.04176, -0.98609, 1.67652, -0.09271, 0.03448, -0.01951, 0.00108,
              0.33862, 0.21461, 0.02564, 0.06924, 0.01126, -0.01168, -0.00829,
              -0.0074, 0.00106, -0.00854, -0.08404, 0.02508, -0.02722, -0.06537,
              0.01662, 0.11454, 0.06747, 0.00742, -0.01975, -0.02597, -97e-5,
              -0.01154, 0.00164, -0.00274, 0.02954, -0.05161, -0.02162,
              -0.02069, -0.06369, 0.03846, 0.00219, -0.01634, -0.04518, 0.06696,
              1.21537, 0.995, 0.68376, -0.28709, -0.11397, -0.06468, 0.00607,
              -0.00744, 0.01531, 0.00975, -0.03983, 0.02405, 0.07563, 0.00356,
              -18e-5, -9e-5, 0.00172, -0.00331, 0.01565, -0.03466, -0.0023,
              0.00142, -0.00788, -0.01019, 0.01411, -0.01456, -0.00672,
              -0.00543, 59e-5, -11e-5, -0.00661, -0.00496, -0.01986, 0.01271,
              -0.01323, -0.00764, 41e-5, 0.01145, 0.00378, -0.00137, 0.00652,
              0.00412, 0.01946, -0.00573, -0.00326, -0.00257, -0.00225, 9e-4,
              -0.00292, -0.00317, -0.00719, 0.00468, 0.00245, 0.00189, 0.00565,
              -0.0033, -0.00168, -47e-5, -0.00256, 0.0022, 0.0018, -0.00162,
              -85e-5, -3e-5, -0.001, 98e-5, -43e-5, 7e-5, -3e-5, -13e-5,
            ],
            rad_tbl: [
              -38127.94034, -48221.08524, -20986.93487, -3422.75861, -8.97362,
              53.34259, -404.15708, -0.05434, 0.46327, 0.16968, -387.16771,
              -146.07622, 103.77956, 19.11054, -40.21762, 996.16803, -702.22737,
              246.36496, -63.89626, -304.82756, 78.23653, -2.58314, -0.11368,
              -0.06541, -0.34321, 0.33039, 0.05652, -0.16493, 67.44536,
              -29.43578, 50.85074, 18.68861, 0.39742, 13.64587, -1.61284,
              0.11482, 0.01668, -0.01182, -0.00386, 0.01025, 0.00234, -0.0153,
              -0.02569, -0.00799, -0.00429, -0.00217, -0.00672, 0.0065, 0.01154,
              0.0012, -0.00515, 0.00125, 0.00236, -0.00216, -98e-5, 9e-5,
              -0.0046, -0.00518, 0.006, 3e-5, 0.00834, 95e-5, 0.01967, 0.00637,
              -0.00558, -0.06911, -0.01344, -0.06589, -0.05425, -0.00607,
              -0.00247, -0.00266, 0.0879, -0.08537, -0.00647, 0.04028, -0.00325,
              0.00488, 0.00111, -44e-5, -0.00731, 0.00127, -0.00417, 0.00303,
              0.05261, 0.01858, -0.00807, 0.01195, 1.26352, -0.38591, -0.34825,
              1.10733, -0.02815, -0.02148, -0.05083, -0.04377, -0.01206,
              -0.00586, 0.03158, -0.01117, 0.00643, 0.00306, -0.01186, -0.05161,
              0.01136, -0.00976, -0.00536, 0.01949, -1.4168, -0.8129, -0.09254,
              -0.24347, -0.14831, -0.34381, -2.44464, 0.41202, -0.9924,
              -0.33707, -0.0193, -0.08473, 0.0083, 0.01165, -0.01604, -0.02439,
              0.00227, 0.04493, -42.7531, -22.65155, -9.93679, -18.36179,
              2.73773, 3.24126, -1.20698, 1.07731, 0.00434, -0.1036, -0.02359,
              54e-5, -0.02664, -0.00122, -19.7952, 33.1177, -53.56452,
              -35.41902, 67.95039, -82.46551, 117.31843, 14.08609, 0.06447,
              0.03289, 0.40365, -0.33397, 0.07079, -0.09504, -30.36873, 6.23538,
              -14.25988, -44.91408, 38.53146, -16.31919, 6.99584, 22.47169,
              -0.13313, 0.28016, 6.83715, -6.01384, 1.68531, -3.62443, -0.22469,
              -0.29718, 0.25169, 0.1378, -3.64824, 1.2242, -2.48963, -1.12515,
              -0.0151, -0.5618, -0.03306, 0.01848, -0.00103, -77e-5, -0.01681,
              -0.00227, -0.00402, -0.00287, 0.04965, -0.1619, -0.40025, 0.20734,
              0.15819, -0.25451, 0.02467, -0.00495, 0.00597, 0.0049, -0.01085,
              -0.0046, -0.71564, -0.26624, 0.03797, -0.28263, 0.0351, 0.30014,
              2.7981, 0.07258, -0.01618, 0.00337, 0.00876, 0.04438, 0.00742,
              -0.00455, -0.01163, -0.00683, 0.0095, 0.01275, -0.02124, -0.67527,
              -0.23635, 0.06298, -0.03844, 0.0101, 0.73588, -0.00271, 0.01742,
              -0.00467, 17e-5, -0.00505, -0.27482, 5.00521, -1.92099, 1.55295,
              -0.35919, -0.09314, -0.47002, 0.06826, 0.07924, 0.16838, -0.04221,
              0.7151, -0.16482, 0.08809, 41.76829, -125.79427, 106.65271,
              -71.30642, 36.18112, 17.36143, -1.63846, 5.02215, -1.08404, 61e-5,
              2.45567, -2.42818, -9.88756, 5.36587, -0.61253, -0.35003,
              1523.5479, 602.82184, 68.66902, 1878.261, -1098.78095, -120.726,
              127.30918, -383.96064, -7.00838, -6.09942, -1.54187, 0.34883,
              -9.47561, -4.35408, -21541.63676, -32542.09807, -29720.82604,
              -28072.21231, -15755.56255, -8084.58657, -8148.87315, 7434.89857,
              11033.30133, 7827.94658, 610.18256, -11411.93624, -9.87426,
              0.94865, -1.63656, 0.41275, 1996.5715, 511.48468, 669.78228,
              1363.6761, -379.72037, 198.84438, -16.63126, -79.37624, -2.30776,
              -246.0782, -16.85846, -148.18168, -6.89632, -20.49587, 0.39892,
              -0.34627, -57.81309, -136.96971, 15.25671, -96.61153, 16.09785,
              -8.79091, 0.70515, 1.16197, 0.05647, 0.04684, 0.25032, -0.19951,
              0.07282, -0.00696, 0.00493, 0.00733, -0.01085, 0.00422, -0.01309,
              0.00262, 0.37616, -0.36203, -0.11154, 0.18213, 0.15691, 0.29343,
              0.00485, 0.06106, -0.01492, 0.09954, 0.28486, 2.2719, 0.33102,
              1.50696, -0.01926, 0.04901, 0.01827, 0.00863, -0.03315, 0.00178,
              -0.776, -0.48576, -0.21111, -0.19485, 1.90295, 6.44856, 1.71638,
              2.1298, -7.19585, -0.08043, 0.07004, -0.02764, 0.01604, 0.01158,
              0.00936, -0.01199, 0.18396, -0.29234, 0.10422, -0.0072, 0.05196,
              0.10753, 0.02859, -0.03602, 0.63828, 1.9628, -0.31919, 0.85859,
              -0.10218, -0.00673, 0.01748, -0.0219, 0.01266, -0.02729, -4.8022,
              8.90557, -5.94059, 2.28577, -0.19687, -1.28666, 0.32398, 0.14879,
              -0.02619, -0.02056, -0.04872, -0.07011, -0.04082, -0.0474,
              0.60167, -2.20365, -0.27919, -0.45957, -1.31664, -2.22682,
              176.89871, 13.03918, 0.00568, 0.0056, 0.01093, 0.00486, -0.00948,
              -0.31272, -11.87638, -3.68471, -1.74977, -9.60468, 2.94988,
              -0.57118, 0.00307, -0.01636, 0.02624, 0.03032, -0.00464, -0.01338,
              0.00935, 0.0053, -0.11822, 0.03328, -0.41854, 0.04331, 0.4134,
              -0.21657, -0.00865, 0.00849, -0.00374, -0.00899, 0.01227,
              -0.23462, -0.71894, -0.04515, 47e-5, 0.28112, -0.12788, 0.11698,
              -0.0203, 0.02759, 0.02967, -92e-5, 0.00454, 0.00565, -26e-5,
              0.00164, -0.01405, -0.00862, 0.01088, 0.05589, 0.18248, -0.06931,
              -11e-5, 0.03713, 0.01932, -0.00982, -0.13861, 0.09853, -0.03441,
              -0.02492, 2.26163, -5.94453, 4.14361, -0.94105, 0.39561, 0.75414,
              -0.17642, 0.03724, -1.32978, -0.5661, -0.03259, -0.06752,
              39.07495, 80.25429, -28.15558, 82.69851, -37.53894, -17.88963,
              6.98299, -13.04691, -0.48675, -1.8453, -0.07985, -0.33004,
              -3.39292, 2.73153, -17268.46134, 1144.22336, -16658.48585,
              5252.94094, -3461.47865, 2910.56452, -433.49442, -305.74268,
              -383.45023, 545.16136, 313.83376, 27.00533, -31.41075, 7.9057,
              -12.40592, 3.01833, -0.83334, 0.23404, 59.26487, -112.74279,
              113.29402, -15.37579, 14.03282, 32.74482, -4.73299, 1.30224,
              -0.00866, 0.01232, -0.53797, 0.00238, -0.07979, 0.04443, -0.05617,
              -0.05396, 0.10185, -1.05476, 0.43791, -0.32302, 0.06465, 0.03815,
              28e-5, -0.00446, 0.09289, -0.06389, 0.01701, -0.01409, 0.47101,
              0.16158, 0.01036, -0.39836, 0.00477, 0.01101, -2.06535, 0.33197,
              -0.82468, -0.41414, 0.03209, -0.09348, 0.00843, -3e-4, -9.49517,
              -3.82206, 0.66899, -10.28786, 6.33435, 1.73684, -0.98164, 2.25164,
              -0.07577, -0.00277, 1.02122, 0.75747, 1.79155, -0.77789, -2.5678,
              -2.07807, 0.19528, 0.77118, -0.28083, 0.3213, -0.0435, -0.07428,
              -0.01161, 0.01387, 0.02074, 0.19802, -0.036, 0.04922, -0.19837,
              0.02572, -0.00682, -0.04277, -0.01805, 0.00299, 0.03283, -0.02099,
              3.57307, 1.17468, 0.65769, 1.88181, -0.39215, 0.08415, -0.53635,
              -0.19087, -0.12456, 0.02176, 0.01182, -0.07941, -2.43731, 2.44464,
              1.03961, -1.81936, 30.3314, 0.92645, 0.00508, -0.01771, -81.06338,
              66.43957, 33.16729, 131.44697, 76.63344, -34.34324, -35.33012,
              -28.04413, -1.4744, 13.09015, 0.13253, -0.01629, 0.02187,
              -0.00963, -21.4747, -9.44332, -7.21711, -12.59472, 1.76195,
              -1.63911, 0.0906, 0.28656, 0.00635, 0.00536, 0.0347, -0.06493,
              0.00666, -0.01084, 0.01116, -0.01612, -0.00102, 0.00208, -0.05568,
              0.00628, 0.02665, -0.01032, 0.21261, -1.90651, 0.72728, -0.57788,
              0.08662, 0.10918, 3.39133, 3.97302, -4.63381, 4.2667, -2.50873,
              -3.76064, 1.28114, 1.81919, 1.48064, -0.37578, -0.26209, -0.47187,
              0.00282, -0.00499, 0.01749, 0.03222, 1.60521, -1.79705, 1.61453,
              0.68886, -0.29909, 0.55025, -0.07894, 0.1988, -0.15635, 0.46159,
              2.09769, 1.52742, -7.60312, 11.34886, 4.3564, 8.61048, 2.15001,
              -2.15303, -0.61587, -0.1195, -0.03289, -0.0052, -0.00501,
              -0.00445, 0.15294, -0.05277, 0.02455, 0.00408, 1.19601, 0.43479,
              0.20422, 0.57125, -0.1279, 0.01318, -0.15275, -0.43856, 6.99144,
              -0.08794, -1.69865, 0.82589, -0.20235, 0.9704, 0.20903, 0.00675,
              0.26943, 0.08281, 0.03686, 0.05311, 1.28468, 1.21735, -1.38174,
              1.2957, -0.75899, -1.17168, 0.44696, -0.32341, -0.06378, -0.27573,
              -0.06406, 0.87186, 0.21069, 0.19724, 0.00119, -0.04147, 0.39279,
              0.51437, -0.11035, 0.2145, -0.04309, 0.02359, 0.2049, 0.1421,
              7e-5, -17e-5, -0.03529, -0.02644, 0.1071, 0.44476, -0.02632,
              -0.01817, 2.11335, -0.04432, 0.18206, 0.27335, 0.08867, 0.00313,
              -0.00692, 0.01595, -0.72957, 0.3208, -0.29291, -0.44764, 0.12767,
              -0.05778, 0.04797, -0.00223, 0.17661, 0.22427, -0.04914, 0.09114,
              0.12236, 0.00708, 0.74315, -0.01346, 0.02245, -0.02555, -0.30446,
              0.13947, -0.1234, -0.18498, -0.04099, 0.02103, 0.06337, -0.01224,
              0.28181, -0.01019, -0.02794, -0.09412, 0.03272, -0.01095, 0.11247,
              -0.0065, -0.01319, -0.04296, 0.04653, -0.00423, 0.06535, 14e-5,
            ],
            arg_tbl: [
              0, 7, 3, 2, 5, -6, 6, 3, 7, 0, 2, 2, 5, -5, 6, 5, 3, 1, 6, -4, 7,
              2, 8, 0, 2, 1, 6, -3, 7, 0, 3, 1, 6, -2, 7, -2, 8, 0, 2, 4, 5,
              -10, 6, 3, 3, 1, 5, -1, 6, -4, 7, 0, 3, 2, 5, -4, 6, -3, 7, 0, 3,
              2, 6, -8, 7, 4, 8, 0, 3, 3, 5, -10, 6, 7, 7, 0, 2, 6, 5, -15, 6,
              0, 2, 2, 6, -6, 7, 0, 3, 1, 5, -4, 6, 4, 7, 1, 3, 1, 5, -2, 6, -1,
              7, 0, 3, 2, 5, -5, 6, 1, 8, 0, 3, 3, 5, -8, 6, 2, 7, 0, 3, 1, 5,
              -3, 6, 2, 8, 0, 3, 1, 5, -3, 6, 1, 7, 1, 1, 1, 8, 0, 3, 1, 5, -3,
              6, 2, 7, 1, 3, 1, 5, -2, 6, -2, 7, 0, 2, 2, 6, -5, 7, 1, 3, 2, 6,
              -6, 7, 2, 8, 0, 3, 2, 6, -7, 7, 4, 8, 0, 3, 2, 5, -4, 6, -2, 7, 0,
              3, 1, 5, -1, 6, -5, 7, 0, 3, 2, 6, -7, 7, 5, 8, 0, 3, 1, 6, -1, 7,
              -2, 8, 0, 2, 1, 6, -2, 7, 1, 3, 1, 6, -3, 7, 2, 8, 0, 3, 1, 6, -4,
              7, 4, 8, 1, 3, 2, 5, -5, 6, 2, 8, 1, 3, 2, 5, -6, 6, 2, 7, 1, 2,
              2, 7, -2, 8, 0, 1, 1, 7, 2, 2, 5, 5, -12, 6, 2, 3, 2, 6, -5, 7, 1,
              8, 0, 3, 1, 5, -1, 6, -3, 7, 0, 3, 7, 5, -18, 6, 3, 7, 0, 2, 3, 5,
              -7, 6, 3, 3, 1, 6, 1, 7, -5, 8, 0, 3, 1, 5, -4, 6, 3, 7, 0, 3, 5,
              5, -13, 6, 3, 7, 0, 2, 1, 5, -2, 6, 3, 3, 3, 5, -9, 6, 3, 7, 0, 3,
              3, 5, -8, 6, 3, 7, 1, 2, 1, 5, -3, 6, 3, 3, 5, 5, -14, 6, 3, 7, 0,
              3, 1, 5, -3, 6, 3, 7, 2, 2, 3, 6, -7, 7, 0, 2, 3, 5, -8, 6, 2, 3,
              2, 5, -3, 6, -4, 7, 1, 3, 2, 5, -8, 6, 7, 7, 0, 2, 5, 5, -13, 6,
              0, 2, 2, 6, -4, 7, 2, 3, 2, 6, -5, 7, 2, 8, 0, 3, 2, 5, -4, 6, -1,
              7, 0, 3, 2, 5, -7, 6, 4, 7, 0, 2, 1, 6, -2, 8, 2, 2, 1, 6, -1, 7,
              0, 3, 1, 6, -2, 7, 2, 8, 0, 3, 2, 5, -5, 6, 2, 7, 0, 3, 2, 5, -6,
              6, 2, 8, 0, 3, 2, 5, -6, 6, 1, 7, 0, 2, 3, 7, -2, 8, 0, 1, 2, 7,
              1, 2, 1, 6, -1, 8, 1, 3, 1, 5, -2, 6, 1, 7, 0, 3, 1, 5, -2, 6, 2,
              8, 0, 2, 3, 6, -6, 7, 2, 2, 6, 5, -14, 6, 0, 3, 3, 6, -7, 7, 2, 8,
              0, 3, 2, 5, -3, 6, -3, 7, 1, 2, 4, 5, -9, 6, 3, 3, 2, 6, -2, 7,
              -2, 8, 0, 2, 2, 6, -3, 7, 1, 3, 2, 6, -4, 7, 2, 8, 0, 2, 2, 5, -4,
              6, 3, 3, 2, 5, -7, 6, 3, 7, 1, 3, 1, 6, 1, 7, -2, 8, 0, 1, 1, 6,
              5, 3, 2, 5, -5, 6, 3, 7, 1, 2, 2, 5, -6, 6, 3, 1, 3, 7, 3, 2, 4,
              5, -11, 6, 3, 2, 1, 5, -4, 7, 0, 3, 2, 5, -5, 6, -3, 7, 1, 2, 6,
              5, -16, 6, 0, 3, 3, 5, -7, 6, 2, 7, 0, 3, 3, 6, -4, 7, -2, 8, 0,
              2, 3, 6, -5, 7, 1, 3, 3, 6, -6, 7, 2, 8, 1, 3, 3, 6, -7, 7, 4, 8,
              0, 3, 2, 5, -3, 6, -2, 7, 2, 3, 2, 5, -8, 6, 5, 7, 0, 2, 2, 6, -4,
              8, 0, 3, 2, 6, -1, 7, -2, 8, 1, 2, 2, 6, -2, 7, 2, 3, 2, 6, -3, 7,
              2, 8, 0, 3, 2, 5, -4, 6, 1, 7, 0, 3, 2, 5, -4, 6, 2, 8, 0, 3, 2,
              5, -7, 6, 2, 7, 1, 2, 1, 6, 1, 7, 1, 2, 5, 5, -11, 6, 2, 3, 1, 5,
              -2, 7, -2, 8, 0, 2, 1, 5, -3, 7, 0, 2, 3, 5, -6, 6, 3, 3, 2, 6, 1,
              7, -5, 8, 0, 2, 2, 6, -3, 8, 1, 2, 1, 5, -1, 6, 3, 3, 2, 5, -7, 6,
              3, 8, 0, 3, 3, 5, -7, 6, 3, 7, 0, 3, 2, 5, -1, 6, -7, 7, 0, 2, 1,
              5, -4, 6, 2, 3, 1, 5, -2, 6, 3, 7, 0, 2, 4, 6, -7, 7, 0, 2, 3, 5,
              -9, 6, 0, 3, 2, 5, -2, 6, -4, 7, 0, 2, 3, 6, -4, 7, 2, 3, 2, 5,
              -3, 6, -1, 7, 0, 3, 2, 5, -8, 6, 4, 7, 0, 2, 2, 6, -2, 8, 1, 2, 2,
              6, -1, 7, 0, 3, 2, 6, -2, 7, 2, 8, 1, 3, 2, 5, -4, 6, 2, 7, 0, 3,
              2, 5, -7, 6, 2, 8, 0, 3, 2, 5, -7, 6, 1, 7, 0, 2, 1, 6, 2, 7, 0,
              2, 2, 6, -1, 8, 0, 2, 4, 6, -6, 7, 1, 2, 6, 5, -13, 6, 0, 3, 2, 5,
              -2, 6, -3, 7, 1, 2, 4, 5, -8, 6, 2, 3, 3, 6, -2, 7, -2, 8, 0, 2,
              3, 6, -3, 7, 0, 3, 3, 6, -4, 7, 2, 8, 0, 2, 2, 5, -3, 6, 3, 3, 2,
              5, -8, 6, 3, 7, 1, 3, 2, 6, 1, 7, -2, 8, 0, 1, 2, 6, 5, 3, 2, 5,
              -4, 6, 3, 7, 2, 2, 2, 5, -7, 6, 3, 3, 1, 6, 4, 7, -2, 8, 0, 2, 1,
              6, 3, 7, 1, 3, 1, 6, 2, 7, 2, 8, 0, 2, 4, 5, -12, 6, 2, 2, 5, 6,
              -8, 7, 0, 2, 4, 6, -5, 7, 0, 3, 2, 5, -2, 6, -2, 7, 0, 2, 3, 6,
              -2, 7, 1, 3, 3, 6, -3, 7, 2, 8, 0, 2, 5, 5, -10, 6, 2, 3, 1, 5, 1,
              6, -3, 7, 0, 2, 3, 5, -5, 6, 3, 2, 3, 6, -3, 8, 0, 1, 1, 5, 2, 2,
              1, 5, -5, 6, 2, 2, 5, 6, -7, 7, 0, 2, 4, 6, -4, 7, 2, 2, 3, 6, -2,
              8, 0, 2, 3, 6, -1, 7, 0, 2, 5, 6, -6, 7, 0, 2, 4, 5, -7, 6, 2, 2,
              4, 6, -3, 7, 2, 2, 2, 5, -2, 6, 2, 3, 2, 6, -9, 7, 3, 8, 0, 1, 3,
              6, 4, 3, 2, 5, -3, 6, 3, 7, 1, 2, 2, 5, -8, 6, 3, 3, 2, 6, 4, 7,
              -2, 8, 0, 2, 4, 5, -13, 6, 1, 2, 6, 6, -8, 7, 1, 2, 5, 6, -5, 7,
              0, 2, 4, 6, -2, 7, 0, 2, 5, 5, -9, 6, 2, 2, 3, 5, -4, 6, 2, 2, 1,
              5, 1, 6, 2, 2, 6, 5, -11, 6, 0, 3, 6, 6, -7, 7, 2, 8, 0, 2, 4, 5,
              -6, 6, 2, 2, 2, 5, -1, 6, 2, 1, 4, 6, 3, 3, 2, 5, -2, 6, 3, 7, 1,
              2, 2, 5, -9, 6, 1, 2, 5, 5, -8, 6, 2, 2, 3, 5, -3, 6, 1, 2, 1, 5,
              2, 6, 2, 2, 6, 5, -10, 6, 1, 2, 4, 5, -5, 6, 2, 1, 2, 5, 1, 1, 5,
              6, 2, 2, 5, 5, -7, 6, 1, 2, 3, 5, -2, 6, 1, 3, 1, 5, 2, 6, 3, 7,
              0, 2, 6, 5, -9, 6, 0, 2, 4, 5, -4, 6, 2, 2, 2, 5, 1, 6, 1, 2, 7,
              5, -11, 6, 0, 2, 5, 5, -6, 6, 1, 2, 3, 5, -1, 6, 1, 2, 6, 5, -8,
              6, 1, 2, 4, 5, -3, 6, 0, 2, 5, 5, -5, 6, 0, 1, 3, 5, 0, 2, 6, 5,
              -7, 6, 1, 2, 7, 5, -9, 6, 0, 2, 5, 5, -4, 6, 0, 2, 6, 5, -6, 6, 0,
              2, 7, 5, -8, 6, 0, 2, 6, 5, -5, 6, 0, 2, 7, 5, -7, 6, 0, 2, 8, 5,
              -9, 6, 0, 2, 8, 5, -8, 6, 0, 2, 1, 3, -1, 6, 0, -1,
            ],
          },
        },
        {
          key: "uranus",
          type: "heliocentric",
          epoch: 2446800.5,
          inclination: 0.7738,
          node: 73.994,
          perihelion: 98.746,
          semiAxis: 19.2233,
          dailyMotion: 0.0116943,
          eccentricity: 0.045682,
          anomaly: 84.8516,
          equinox: 2446800,
          magnitude: -7.19,
          semiDiameter: 35.02,
          ptable: {
            maxargs: 9,
            max_harmonic: [0, 0, 0, 0, 5, 10, 9, 12, 0],
            max_power_of_t: 6,
            distance: 19.2184460618,
            timescale: 3652500,
            trunclvl: 1,
            lon_tbl: [
              21.56, -4652.06828, 154246324.90417, 1130486.0508, 330.11531,
              -3020.20235, -8.03769, -122.02019, 212.4513, 254.23866, 25.39758,
              60.08296, 6949.85053, 51951.42606, -1834.66531, 44481.91144,
              -3267.45825, 10776.65972, -628.05388, 532.83011, -16.80583,
              -30.05544, 1420.33767, 2007.2104, 592.32842, 1541.61732,
              -163.55984, 121.14134, 114.74969, -16.04944, 0.06069, 0.00725,
              -0.16861, 0.28785, 0.07399, -0.0968, 0.19936, -0.4162, 0.02922,
              0.07398, 0.17272, 0.05602, 1.65461, -0.68278, -2.18745, -0.85327,
              0.52467, -0.30863, 0.01598, 0.30017, -0.0419, -0.03288, -0.02013,
              0.02257, -0.54883, -0.22701, -0.09257, -0.03921, 0.02644, 0.04667,
              0.24773, -0.16562, 44242.85814, -223163.54065, 123776.84417,
              -206375.74884, 70472.7382, -27456.55173, 4065.74401, 13202.39154,
              -3260.72648, 802.50579, -153.13236, -503.81026, 30.17812,
              -31.91893, -65.14719, 77.78417, -37.38185, 19.13337, -3.14043,
              -0.21147, 0.27143, 0.17424, 0.04458, 0.10976, -0.41841, -0.21887,
              -0.09194, -0.02303, 0.02896, 0.10044, 0.01385, 0.01723, -0.01126,
              -0.09318, -57.9589, 29.69059, -46.4139, 3.07177, 0.42494, 2.33678,
              -3.09621, 0.05256, -0.02134, -0.35202, -0.44475, -0.83135,
              1318.18265, 25605.86848, -9168.38371, 18917.31507, -5145.7448,
              2130.77612, -485.2592, -438.44867, 19.97802, -33.148,
              -23383.91826, -45133.19122, -18520.80729, -26549.95198,
              -2276.70124, -2974.01604, 603.23665, 306.87616, -87.7307,
              -32.49134, 549975.14525, 261920.31896, 526261.09735, 362619.26839,
              150616.68873, 164643.90808, 9550.02662, 27381.83042, -1065.89047,
              1024.20231, -66.63822, -44.75169, -92.10532, -20.2693,
              -313205.95341, 1462242.64616, 112982.53079, 1865690.41965,
              308844.30901, 639864.93227, 89716.32843, 10378.80773, 4395.08428,
              -14565.35913, -3016.07754, -19348.64612, 3838.36899, -9813.42713,
              6883.58821, -6064.92588, 2740.47455, -176.29547, 241.91895,
              268.44181, -6.13397, 17.92503, -0.01377, -0.08742, 387.51915,
              257.03872, 152.81792, 221.56197, -22.94836, 29.5664, -2.27801,
              4.72805, -6.0342, -0.36763, 0.00667, 0.00443, -0.01405, 0.04658,
              -0.06533, -0.01966, 0.10738, 0.00443, 0.02889, 0.01056, 0.009,
              -0.02206, 13e-5, 0.05281, 0.03035, 0.34793, 0.1946, 2.4736,
              0.18189, -0.83895, 0.24983, 15.3205, 0.4601, 2.79643, -0.45793,
              0.96707, -0.31226, 0.51911, 0.04071, 0.39399, 38e-5, 0.03854,
              0.22446, 0.1363, -0.04357, 0.03635, 0.00202, -0.04502, -0.00458,
              -0.03884, 1.32597, 3.40849, -1.67839, -0.95411, -1.00116,
              -0.72744, -0.22484, -0.27682, -0.18069, 0.00405, -0.01, 0.27523,
              -0.07038, -0.01051, -0.09064, 0.08518, 0.02083, -0.25406, 0.17745,
              -0.00944, 0.21326, 0.20454, 18.84894, -7.644, 0.6267, -11.02728,
              8.91329, 20.6719, 0.17757, -0.15471, -0.11385, -0.46057, 6.23014,
              -14.46025, 2.30012, -2.22677, 5.16823, -1.64235, -274.58413,
              833.33247, -191.26241, 269.90157, -17.25965, 9.11368, -261.65136,
              -18274.45858, -2553.83872, -10039.1049, -508.52567, 336.18172,
              14.88587, 421.35954, 162.43462, 544.9258, -0.44246, 0.23216,
              -0.29024, -0.13057, -1.58438, 0.34032, -0.31604, -0.01166,
              -0.07112, 0.05721, -0.10813, 0.01064, -0.05413, 0.06705, -0.41582,
              -0.47725, 0.31031, 0.08605, 0.00409, 0.02373, 0.08092, 0.06247,
              -0.01026, 0.05863, -0.00238, 0.02948, 0.00117, 0.02714, 0.0172,
              0.18261, -0.04067, 0.88639, -0.15502, -0.96383, -0.05307,
              -0.17319, -0.00486, -0.02373, -0.14748, -0.11884, 0.07798,
              -0.00358, 0.01104, 0.00805, 0.15099, -0.03453, 0.01846, 0.03459,
              0.02197, 0.07012, -0.43677, -1.87445, 1.35202, 2.28294, -0.03592,
              0.07679, 0.16427, 0.03014, 0.02472, 0.05549, -0.04985, 0.05874,
              0.35361, 0.01144, -0.574, 1.34898, 0.00265, 0.0154, 0.00951,
              0.08159, -0.00435, 0.34759, -0.12413, -0.49848, -0.77075, -2.7381,
              -31.77702, 12.16042, -14.87605, 11.98287, 12.69358, 1.31307,
              -8.22911, -21.47437, -0.24051, -0.38332, -0.01162, -0.03175,
              0.00556, 0.02454, -0.02297, -0.01654, 0.00707, 0.04828, -0.00309,
              0.17381, -0.005, -0.07579, 0.02008, 0.05356, 0.00702, 0.01133,
              -0.00237, -0.00612, 0.18551, 0.22799, -0.14194, -0.08593, 2e-5,
              -0.01049, -0.17363, -0.13986, 78e-5, -0.06993, -0.0043, -0.07795,
              -0.03232, -4.1317, 0.00311, 0.05356, -0.17324, -0.15505, -0.0059,
              -0.06608, 0.04257, -0.04571, 0.00501, 0.02141, -37e-5, 0.07845,
              -0.00381, -0.03417, 0.01834, 0.03349, 0.07994, 0.15297, -0.82299,
              0.24672, 0.51764, 0.96379, 0.01729, 0.02489, -0.08581, 0.13252,
              0.00538, 0.01995, -0.00148, -0.02261, 0.00534, 0.01565, -0.07518,
              -0.28114, 0.22386, 0.39023, -0.00864, 0.00964, -0.01923, -0.02426,
              -0.00112, 0.00923, -0.00685, 0.0245, 0.26733, -0.99972, -0.82005,
              0.13725, 0.0152, -0.0079, 0.00358, 0.00751, -0.00648, -0.00605,
              -0.04966, -0.04633, 0.06394, -0.01965, 0.50185, 0.40553, -0.25809,
              0.28853, 0.52545, -3.41675, -0.00347, -0.11848, 0.02945, -0.01061,
              -0.0416, -0.03519, -0.03234, -0.81852, -0.02156, -0.00841, 29e-5,
              2e-4, -0.02281, -0.00364, 0.04738, -0.04504, -0.19161, 0.37225,
              0.05765, 0.11987, 5e-4, 0.02012, -0.03806, 0.39498, 0.29982,
              0.00886, 0.01671, 53.04042, -0.0416, -0.38856, -0.00174, -0.01773,
              -0.47661, -0.3201, -0.01088, -0.16231, -0.01584, -0.00144,
              0.06659, 0.12734, 0.04884, 0.02236, 0.00146, 0.0603, -0.2066,
              -0.03982, 0.15091, 1.24562, -0.01303, -0.22426, -0.01518,
              -0.03922, -43e-5, -47e-5, 0.02451, 0.04437, 0.0238, -0.00189,
              -0.0064, -0.07114, -0.0032, -0.02491, -0.00829, 0.07284, 0.02846,
              -0.28034, -0.00268, 0.00256, -0.4342, 0.39645, -0.31053, 1.25916,
              -0.00371, -0.00651, -96e-5, 0.02762, -67e-5, -0.02503, -0.01517,
              0.03748,
            ],
            lat_tbl: [
              0, 107.91527, 83.39404, -124.29804, -7.73277, -3.99442, -0.08328,
              -1.74251, -9.05659, -22.88559, -2.30655, -4.40259, -470.94604,
              -3648.43408, 326.2896, -2972.91303, 337.37285, -650.3357,
              57.18479, -18.2913, 1.13897, 2.70158, -13.64388, -71.88619,
              7.36408, -43.79994, 6.57463, -5.81111, -0.06451, 0.73379, 0.00574,
              -0.01635, 74e-5, -0.01496, -0.00418, 0.00647, -0.00407, 0.00548,
              2e-5, 0.00187, -0.00591, 0.00557, 0.32568, -0.01574, 0.19347,
              -0.01705, 0.00173, 0.02384, -0.00248, -0.00103, 0.00227, 0.00146,
              0.00307, -4e-4, 0.03886, 0.01987, 0.00546, 0.00345, 0.00134,
              -0.00609, -0.01502, -0.01569, -10080.59325, 10806.67752,
              -14013.76861, 9928.38683, -6540.8348, 2084.91597, -1093.05006,
              -305.34266, -9.04558, -110.3231, 9.26094, -3.93195, 0.25552,
              0.50327, -13.1217, -4.19317, -4.50857, -3.37626, -0.2685,
              -0.36028, -0.00357, 0.05862, -0.00828, 0.00926, -0.01515,
              -0.03687, -0.00224, -0.00802, -0.00225, -0.00158, -22e-5, -44e-5,
              -0.00281, 0.00371, 2.28259, -4.29888, 1.74622, -2.13604, 0.37023,
              -0.37022, 0.00886, 0.07081, 0.01669, 56e-5, -0.0202, 0.01586,
              -4255.31929, 5978.03267, -7264.48027, 1884.12585, -2353.93882,
              -1593.23001, 17.57205, -498.54139, 33.28704, -13.79498,
              -38416.64883, -13774.09664, -32822.03952, -3983.42726,
              -7538.09822, 1906.66915, -221.24439, 512.77046, 32.26101,
              12.46483, 142710.47871, -96584.83892, 145395.05981, -86630.96423,
              48202.96749, -23596.77676, 5286.16967, -1626.44031, -16.53568,
              95.15428, -15.19472, 5.69207, -6.72181, 7.28683, 9515.16142,
              -166495.49381, 5588.84271, -146260.29445, 2023.55881,
              -30687.22422, 243.64741, 971.58076, 390.73247, -236.13754,
              -2684.56349, 739.81087, -597.39429, 474.89313, -631.69166,
              213.04947, -204.89515, -33.09139, -17.78004, -22.21866, 0.61083,
              -1.41177, -7e-4, -0.00501, -58.24552, 25.27978, -36.39386,
              0.36376, -2.2103, -6.46685, -0.58473, -0.09357, 0.12829, -0.94855,
              42e-5, 48e-5, 0.00411, 0.00101, 0.00249, -0.00865, 0.00223,
              0.00293, 41e-5, -42e-5, 0.00104, -86e-5, 0.00126, -0.0038,
              0.00906, -0.02253, 0.05998, -0.10318, 4e-5, -0.03225, 0.14303,
              -0.05273, 0.32683, 0.09386, -0.17053, 0.60847, -0.0619, 0.28166,
              0.06411, 0.05289, 0.01138, 0.00128, -0.0093, 0.00272, 37e-5,
              0.00215, 4e-5, 5e-4, 0.00114, -0.00217, 0.05358, -0.06413,
              -0.00124, 0.03842, 0.01006, 0.22479, 0.00412, 0.0404, 0.01708,
              0.02164, 0.02484, -0.02463, -0.00103, 0.02633, -0.01303, -0.03214,
              0.03613, 0.02205, -0.02677, -0.02522, -0.00293, 0.0313, -1.87255,
              -2.50308, -1.53715, 0.36859, -0.17829, -1.12095, -0.05652,
              -0.00786, -0.06992, 0.07279, -2.95896, 0.55138, -0.61498,
              -0.11008, -0.8779, -0.50965, 119.73553, -35.18217, 44.78683,
              -4.22438, 1.95723, 0.58033, -4077.02379, -353.3911, -2781.63273,
              -75.23318, -312.50478, -23.86495, 24.59887, 32.56837, 120.09593,
              -51.00495, 0.09737, 0.09111, 0.04799, -0.05029, 0.08351, -0.33726,
              0.03158, -0.06435, -0.00523, -0.01736, 0.00751, -0.01757,
              -0.00406, -0.01198, 0.16402, -0.10986, -0.02024, 0.07205, -0.0044,
              -72e-5, -0.00465, 0.0031, -0.00121, -0.00121, 83e-5, 2e-4, 0.0014,
              -0.00176, 0.00381, -0.00731, -0.01618, 0.0157, -0.10201, 0.05809,
              -0.03359, 0.01024, -0.00535, 18e-5, 24e-5, 0.00509, -0.00158,
              -0.00466, 9e-5, -83e-5, -0.007, -9e-4, -11e-5, -79e-5, 0.00133,
              -0.00126, 0.01416, 0.05553, 0.04283, -0.06719, 0.00119, 0.00291,
              -0.00263, 0.01282, -4e-4, 0.00188, -0.00237, 0.00973, -0.39533,
              0.18773, -0.79821, -0.40168, 0.00151, -0.00161, 0.00123, -0.00516,
              -0.01432, -0.00293, -0.05477, 0.0413, -0.48837, 0.18944, -0.12552,
              9.37098, 1.02045, 5.11382, 0.72098, -3.70049, -5.80982, 3.30105,
              -0.09682, 0.09696, -0.00876, 0.00504, 0.00318, 0.00245, 0.00563,
              -0.00665, 0.00108, -0.00233, -0.00117, 0.00177, -0.00343, 0.00503,
              0.01044, -0.00651, 0.00296, -0.00162, 37e-5, 28e-5, -2e-4,
              -0.00786, 29e-5, 0.00836, 4e-5, 33e-5, -0.00309, -86e-5, -0.00157,
              -86e-5, -58e-5, 0.00105, -0.04557, 0.01794, -0.00122, -86e-5,
              0.0042, -0.00285, 0.00118, -2e-4, 0.00743, -0.01217, 53e-5,
              -84e-5, -75e-5, 97e-5, -0.00107, 0.00314, 0.00576, -0.00505,
              0.03624, -0.02546, 0.05379, 0.30081, 0.2987, -0.22106, 0.00696,
              -0.00801, -0.03995, -0.01808, -0.00139, 0.00102, -59e-5, 0.00138,
              19e-5, -37e-5, 0.00274, 0.00658, 0.00672, -0.01132, 23e-5, 51e-5,
              31e-5, 9e-4, -17e-5, -1e-5, 85e-5, 4e-5, 0.02221, -0.01977,
              0.07498, 0.03025, -82e-5, -22e-5, -73e-5, -28e-5, -0.00253,
              0.00259, -0.01329, 0.01805, 96e-5, 0.00833, -0.11836, 0.04277,
              -0.1082, -0.03018, 0.34504, 0.09834, -0.00538, -0.00231, 36e-5,
              42e-5, -23e-5, 0.0026, -0.01137, 36e-5, 0.01081, -0.03271, -29e-5,
              -28e-5, 18e-5, -3e-5, 9e-5, 12e-5, 0.00127, 0.00343, 0.001,
              -64e-5, 14e-5, 4e-5, 0.0015, 69e-5, -0.01484, 0.00135, 0.0393,
              0.01405, 64e-5, 29e-5, 9e-5, 9e-5, 54e-5, -48e-5, 19e-5, 5e-5,
              -9e-5, 18e-5, 0.00192, -0.00333, 0.01824, 0.01071, 0.00107,
              -0.00341, 0.2553, -0.18414, -0.84151, -0.31475, -0.004, -1e-4,
              -0.00174, 19e-5, 6e-5, -79e-5, 66e-5, -7e-4, 0.00599, 0.0033,
              -0.0016, -13e-5, -67e-5, -6e-5, -0.00176, -0.00111, 0.00652,
              0.00368, 4e-5, 1e-5, -81e-5, 89e-5, 0.00366, 0.00139, 2e-5, 1e-5,
              -0.0187, -0.00998, -2e-4, -7e-5, 5e-5, 3e-5,
            ],
            rad_tbl: [
              0, -53.23277, -44.70609, -62.54432, -19.15218, 0.10867, -1.91911,
              1.47517, 16.51994, 5.00458, 3.8898, 1.5574, 3598.17109,
              1831.07574, 2633.34851, 1775.69482, 497.10486, 488.77343, 6.03892,
              31.08365, -2.06585, -1.12599, 230.37762, -113.95449, 162.40244,
              -46.57185, 6.70207, 17.27241, -0.66092, -14.42065, -0.01044,
              -0.00287, -0.03894, -0.01663, 0.01629, 0.00496, 0.08411, 0.02855,
              0.01795, -0.00695, 0.02426, -0.03921, -0.24495, -0.77369,
              -0.31404, 0.38668, -0.05682, -0.17197, 0.06145, -0.0051, 0.00606,
              -0.00886, -0.0037, -0.00588, 0.02173, -0.11909, 0.00302, -0.01796,
              -0.01067, 0.0099, 0.05283, 0.06517, 59710.89716, -491.12783,
              58672.38609, 19564.41947, 10597.9905, 14313.02561, -2585.5204,
              766.78396, -138.39893, -802.43403, 131.35006, -31.97561, 7.95978,
              8.16075, 28.72669, 31.72473, 6.45792, 16.50701, 0.01066, 1.29718,
              0.11565, -0.1324, 0.0511, -0.01543, -0.09994, 0.18864, -0.0133,
              0.04148, 0.0351, -0.00366, 0.00604, -0.00604, 0.03752, -0.00256,
              -7.00488, -21.63748, 1.43064, -17.10914, -0.62987, 0.48719,
              0.00697, -1.22665, -0.14435, -0.0055, 0.32008, -0.19855,
              -13976.73731, -3559.49432, -7709.90803, -9310.80334, 749.31835,
              -3491.50696, 540.94979, -84.5755, 16.96663, 35.5393, 37214.64771,
              -36361.15845, 21093.74492, -31855.33076, 1500.84653, -7031.97901,
              -453.40865, -18.36692, -2.07726, -17.92336, -56348.30507,
              378512.71483, -111444.4334, 370543.9516, -61893.70301,
              112131.05507, -11977.44617, 9156.15245, -567.61838, -495.2576,
              16.96202, -44.06279, 4.2476, -48.83674, -643705.49516,
              -131013.09649, -838580.02217, 67627.11556, -288441.70339,
              150227.25291, -2500.57537, 42676.19888, 7084.60505, 2043.65642,
              9639.56835, -1502.0339, -4126.00409, -828.73564, -2801.35204,
              -2293.77751, -209.23365, -1045.31476, 95.57334, -102.74623,
              7.19216, 1.89593, -0.05661, 0.02166, 120.38332, -141.16507,
              98.31386, -40.23448, 10.84269, 17.57713, 1.69239, 1.45065,
              -0.19626, 2.76108, -0.0027, 0.0036, -0.02333, -0.0071, -0.01035,
              0.0295, 0.00737, -0.06311, -0.00613, 0.01407, 0.01377, 0.00879,
              -0.03287, 12e-5, -0.21667, 0.01793, -1.54865, 0.10953, 0.54543,
              0.12102, -9.48047, 0.11477, -1.34966, 0.23199, -1.50834, 0.26567,
              -0.64503, 0.10742, -0.21452, 0.04428, -0.0192, -0.00906, -0.09378,
              0.12773, -0.02787, -0.0309, 0.03111, 0.0014, 0.03771, -0.01269,
              -1.94794, 1.22823, 0.64183, -1.11467, -0.19301, -0.27357, 0.0571,
              -0.08115, -0.07318, 0.00806, 0.14286, 0.20297, 0.1492, -0.07897,
              0.09682, 0.02379, -0.13928, 0.01679, -0.00774, 0.1006, 0.24433,
              0.1676, -2.88905, -1.61439, 2.83052, -3.41031, 36.37048, 3.37867,
              0.29321, 0.09687, 0.29324, -0.14651, 8.11116, 1.79211, 1.36421,
              0.88111, 1.21683, 2.3795, -357.76211, -87.84636, -117.55745,
              -67.18338, -5.26029, -6.27559, 7509.94562, 3.68942, 4223.62097,
              -1041.13557, -74.64464, -251.41613, -166.2218, -1.6819, -214.5534,
              62.79593, -0.0825, -0.15936, -0.0383, 0.10857, 0.21368, 0.50812,
              0.00869, 0.09832, 0.02158, 0.02045, 0.01407, 0.03591, 0.0346,
              0.01171, -0.164, 0.09751, 0.03521, -0.12858, 0.007, -0.00524,
              0.01698, -0.04796, 0.04006, 0.00565, -0.02783, -0.00205, -0.02296,
              0.00153, -0.16139, 0.01514, -0.78136, -0.01546, 0.40374, -0.06014,
              0.06212, -0.01828, 0.00831, -0.00173, 0.06857, -0.11677, 28e-5,
              0.05765, -0.00796, 0.00691, 0.03764, 0.14902, -0.02653, 0.02122,
              -0.05503, 0.01549, 1.5663, -0.35551, -1.8796, 1.14303, -0.06063,
              -0.03425, 0.03367, -0.11969, 0.04485, -0.01651, 0.04647, -0.02097,
              0.22841, 0.47362, 0.99226, -0.6066, -0.01249, 0.00134, -0.07435,
              0.00722, -0.31796, -15e-5, 0.20533, -0.04398, 0.93944, -0.2671,
              -5.60051, -9.32918, -5.13538, -4.0513, -0.56529, 4.34112, 7.18308,
              -2.66103, 0.13241, -0.07999, 0.01046, -0.00535, -0.04037,
              -0.00455, -0.0051, 0.00731, -0.04576, 0.00513, -0.15846, -0.00236,
              0.04628, -0.00463, -0.01585, 0.00585, -0.00213, 0.00283, 0.00778,
              -0.00198, -0.17803, 0.18321, 0.07702, -0.12325, 0.01091, 0.00349,
              0.14211, -0.2183, 0.07289, -0.00994, 0.0709, -79e-5, 4.18441,
              -0.07413, -0.06247, -11e-5, -0.15453, 0.14499, -0.06557, -98e-5,
              0.0029, 0.02921, -0.01923, 0.00457, -0.07538, -0.0012, 0.02263,
              -37e-5, -0.01061, 0.00591, -0.04725, 0.02364, -0.0746, -0.24108,
              -0.2831, 0.14643, -0.007, 0.00427, 0.22963, 0.03713, -0.02062,
              0.00478, 0.01434, 95e-5, -0.01425, 0.00376, 0.29611, -0.08038,
              -0.37811, 0.21703, -0.00723, -0.00924, -0.02736, 0.01814, 0.00934,
              0.00731, 0.00613, 0.00686, -0.91503, -0.32009, -0.15505, 0.79589,
              -0.00555, -0.01536, -0.00698, 0.0048, 0.00373, -46e-5, 0.00715,
              -0.0047, -0.0197, -0.05238, 0.60649, -0.32669, 0.1779, 0.33383,
              -2.74922, -0.25827, -0.07862, 0.00406, -0.00948, -0.02117,
              0.03127, -0.04199, 0.8967, -0.02413, 0.01954, 0.0399, 63e-5,
              -71e-5, -0.00226, 0.02009, -0.04407, -0.05069, 0.3823, 0.16101,
              0.11893, -0.06125, 0.02051, -46e-5, 0.39211, 0.03679, 0.01666,
              -0.31336, 53.28735, -0.01791, -0.39414, 0.04181, -0.01885,
              0.00165, 0.31349, -0.47359, 0.16133, -0.01023, 7e-5, 0.01758,
              -0.13351, 0.07249, 0.00977, 0.05445, 0.1165, -0.00191, -0.09824,
              0.40106, 2.41155, -0.30655, 0.24975, -0.01248, -0.03688, 0.01097,
              38e-5, -51e-5, -0.04736, 0.0261, 0.00968, 0.02634, 0.07918,
              -0.00606, 0.02735, -0.0032, -0.07544, -0.00468, 0.19996, -0.01964,
              0.00201, 0.00267, 0.39562, 0.43289, 1.24743, 0.31084, -0.00666,
              0.00377, 0.05668, 0.00148, 0.0322, -26e-5, 0.03717, 0.01509,
            ],
            arg_tbl: [
              0, 3, 2, 1, 7, -2, 8, 0, 2, 2, 7, -4, 8, 0, 2, 3, 7, -6, 8, 1, 2,
              2, 5, -5, 6, 4, 2, 1, 6, -3, 7, 3, 3, 1, 6, -1, 7, -4, 8, 0, 3, 2,
              5, -7, 6, 6, 7, 0, 3, 2, 6, -6, 7, 1, 8, 0, 3, 2, 6, -7, 7, 3, 8,
              0, 3, 2, 6, -8, 7, 4, 8, 0, 3, 2, 6, -7, 7, 2, 8, 0, 2, 2, 6, -6,
              7, 2, 3, 1, 5, -4, 6, 4, 7, 0, 3, 1, 6, -2, 7, -1, 8, 0, 3, 1, 6,
              -3, 7, 1, 8, 0, 3, 1, 6, -4, 7, 3, 8, 1, 2, 5, 7, -9, 8, 0, 2, 4,
              7, -7, 8, 0, 2, 2, 7, -3, 8, 6, 2, 1, 7, -3, 8, 2, 2, 2, 7, -5, 8,
              0, 2, 3, 7, -7, 8, 0, 3, 1, 6, -6, 7, 5, 8, 1, 3, 1, 6, -5, 7, 3,
              8, 0, 3, 2, 5, -8, 6, 8, 7, 0, 3, 1, 5, -4, 6, 5, 7, 0, 2, 2, 6,
              -5, 7, 3, 3, 1, 6, 1, 7, -9, 8, 0, 3, 2, 5, -4, 6, -2, 7, 0, 2, 1,
              6, -4, 8, 4, 2, 1, 6, -2, 7, 4, 2, 5, 7, -8, 8, 5, 2, 3, 7, -4, 8,
              0, 1, 1, 7, 5, 2, 2, 7, -6, 8, 4, 3, 1, 6, -6, 7, 4, 8, 0, 2, 1,
              6, -4, 7, 4, 3, 2, 6, -5, 7, 1, 8, 0, 3, 2, 6, -6, 7, 3, 8, 0, 2,
              2, 6, -7, 7, 0, 3, 1, 5, -4, 6, 3, 7, 0, 3, 1, 6, -1, 7, -1, 8, 0,
              2, 1, 5, -2, 6, 0, 2, 6, 7, -9, 8, 0, 2, 5, 7, -7, 8, 0, 2, 4, 7,
              -5, 8, 0, 2, 3, 7, -3, 8, 1, 2, 2, 7, -1, 8, 0, 2, 1, 7, 1, 8, 2,
              1, 3, 8, 0, 2, 3, 6, -7, 7, 1, 3, 2, 5, -3, 6, -4, 7, 0, 3, 2, 6,
              -3, 7, -2, 8, 0, 2, 2, 6, -4, 7, 1, 3, 2, 6, -5, 7, 2, 8, 1, 3, 5,
              5, -9, 6, -8, 7, 0, 3, 2, 5, -4, 6, -1, 7, 0, 3, 1, 6, 3, 7, -8,
              8, 0, 3, 2, 6, -8, 7, 1, 8, 0, 3, 2, 5, -7, 6, 4, 7, 0, 3, 4, 5,
              -10, 6, 2, 7, 0, 2, 1, 6, -2, 8, 0, 2, 1, 6, -1, 7, 2, 2, 8, 7,
              -12, 8, 0, 2, 7, 7, -10, 8, 0, 2, 6, 7, -8, 8, 1, 2, 5, 7, -6, 8,
              0, 2, 4, 7, -4, 8, 2, 1, 2, 7, 4, 1, 4, 8, 0, 2, 1, 7, -6, 8, 0,
              2, 2, 7, -8, 8, 1, 2, 3, 7, -10, 8, 0, 2, 4, 7, -12, 8, 0, 3, 1,
              6, -6, 7, 2, 8, 0, 2, 1, 6, -5, 7, 1, 3, 1, 6, -4, 7, -2, 8, 0, 3,
              1, 5, -4, 6, 2, 7, 1, 3, 1, 5, -2, 6, 1, 7, 0, 2, 7, 7, -9, 8, 0,
              2, 6, 7, -7, 8, 0, 2, 5, 7, -5, 8, 0, 2, 4, 7, -3, 8, 0, 2, 3, 7,
              -1, 8, 0, 2, 2, 7, 1, 8, 0, 2, 3, 6, -6, 7, 1, 3, 3, 6, -7, 7, 2,
              8, 0, 3, 2, 5, -3, 6, -3, 7, 1, 3, 2, 6, -2, 7, -2, 8, 0, 2, 2, 6,
              -3, 7, 1, 3, 2, 6, -4, 7, 2, 8, 0, 3, 2, 5, -7, 6, 3, 7, 1, 3, 1,
              6, 1, 7, -2, 8, 0, 1, 1, 6, 1, 2, 8, 7, -10, 8, 0, 2, 7, 7, -8, 8,
              0, 2, 6, 7, -6, 8, 0, 2, 5, 7, -4, 8, 0, 2, 4, 7, -2, 8, 0, 1, 3,
              7, 3, 2, 2, 7, 2, 8, 0, 2, 1, 7, 4, 8, 0, 2, 1, 5, -4, 7, 0, 2, 1,
              6, -6, 7, 0, 2, 8, 7, -9, 8, 0, 2, 7, 7, -7, 8, 0, 2, 6, 7, -5, 8,
              0, 2, 5, 7, -3, 8, 0, 2, 4, 7, -1, 8, 0, 3, 3, 6, -4, 7, -2, 8, 0,
              2, 3, 6, -5, 7, 1, 3, 3, 6, -6, 7, 2, 8, 0, 3, 2, 5, -3, 6, -2, 7,
              1, 3, 2, 6, -1, 7, -2, 8, 0, 2, 2, 6, -2, 7, 0, 3, 2, 6, -3, 7, 2,
              8, 0, 3, 2, 5, -7, 6, 2, 7, 1, 2, 1, 6, 1, 7, 0, 2, 9, 7, -10, 8,
              0, 2, 8, 7, -8, 8, 0, 2, 7, 7, -6, 8, 0, 2, 6, 7, -4, 8, 0, 2, 5,
              7, -2, 8, 0, 1, 4, 7, 1, 2, 3, 7, 2, 8, 0, 2, 1, 5, -3, 7, 0, 2,
              9, 7, -9, 8, 0, 2, 8, 7, -7, 8, 0, 3, 3, 6, -3, 7, -2, 8, 0, 2, 3,
              6, -4, 7, 1, 3, 3, 6, -5, 7, 2, 8, 0, 3, 2, 5, -3, 6, -1, 7, 0, 3,
              2, 5, -8, 6, 4, 7, 0, 2, 2, 6, -2, 8, 0, 2, 2, 6, -1, 7, 1, 3, 2,
              6, -2, 7, 2, 8, 0, 3, 2, 5, -7, 6, 1, 7, 0, 2, 6, 7, -2, 8, 0, 1,
              5, 7, 0, 3, 3, 6, -4, 7, 1, 8, 0, 2, 1, 5, -2, 7, 2, 3, 1, 5, -3,
              7, 2, 8, 0, 3, 1, 5, -1, 6, 1, 7, 0, 2, 4, 6, -6, 7, 0, 2, 3, 6,
              -3, 7, 0, 1, 2, 6, 0, 3, 2, 5, -4, 6, 3, 7, 0, 3, 1, 5, 1, 6, -4,
              7, 0, 3, 3, 5, -5, 6, -1, 7, 0, 1, 6, 7, 1, 3, 1, 5, 1, 7, -4, 8,
              0, 2, 1, 5, -2, 8, 0, 2, 1, 5, -1, 7, 1, 3, 1, 5, -2, 7, 2, 8, 0,
              3, 1, 5, -3, 7, 4, 8, 0, 3, 1, 5, -5, 6, 1, 7, 1, 3, 1, 5, -1, 6,
              2, 7, 0, 2, 4, 6, -5, 7, 0, 2, 3, 6, -2, 7, 0, 3, 1, 5, 1, 7, -2,
              8, 0, 1, 1, 5, 1, 2, 4, 6, -4, 7, 0, 2, 3, 6, -1, 7, 0, 3, 3, 5,
              -5, 6, 1, 7, 0, 2, 5, 6, -6, 7, 0, 2, 4, 6, -3, 7, 0, 2, 5, 6, -5,
              7, 0, 2, 6, 6, -6, 7, 0, 2, 2, 5, -3, 7, 0, 2, 2, 5, -2, 7, 0, 2,
              2, 5, -2, 8, 0, 2, 2, 5, -1, 7, 1, 3, 2, 5, -2, 7, 2, 8, 0, 1, 2,
              5, 0, 2, 3, 5, -3, 7, 0, 2, 3, 5, -1, 7, 0, -1,
            ],
          },
        },
        {
          key: "neptune",
          type: "heliocentric",
          epoch: 2446800.5,
          inclination: 1.7697,
          node: 131.677,
          perihelion: 250.623,
          semiAxis: 30.1631,
          dailyMotion: 0.00594978,
          eccentricity: 0.009019,
          anomaly: 254.2568,
          equinox: 2446800,
          magnitude: -6.87,
          semiDiameter: 33.5,
          ptable: {
            maxargs: 9,
            max_harmonic: [0, 0, 0, 0, 3, 8, 7, 9, 0],
            max_power_of_t: 3,
            distance: 30.1103868694,
            timescale: 3652500,
            trunclvl: 1,
            lon_tbl: [
              -1376.8648, 730.3897, 78655362.50948, 1095691.38676, -196.19023,
              2086.77782, -122.0465, -276.81592, 184.56164, -148.08924, 3.39142,
              -14.75027, -9.22741, 0.87688, -0.13903, -0.44707, -0.17668,
              -0.36299, -0.12682, -0.26636, -0.51426, -0.24667, -0.04965,
              -0.03177, 0.0505, -0.00249, -0.80362, -0.07363, -0.15436, -0.0718,
              2.45034, -3.50145, 0.86698, 0.09777, 7.72386, 7.16565, 2.10273,
              8.86682, 2.44705, 77.90155, 0.28323, -11.87157, -13.64083,
              252.70556, -4.94214, -6.17988, -305.60504, 51.23962, -2759.81719,
              2476.20912, 12.65762, 13.31543, 0.36996, -0.19077, 0.67363,
              0.36737, 0.02312, 0.02216, 0.09953, 0.04777, -0.00572, -0.02772,
              -0.02478, -0.2192, -0.15289, -1.50784, -0.17822, 0.34638,
              -0.70473, -8.61559, -2.65756, 1.25632, -0.31453, -1.40348,
              -4.02571, -1.50467, -69.62308, 3.21315, 0.69973, 0.08832,
              -0.00551, -0.04964, -0.02264, -0.34881, 0.00762, -1.85072,
              0.01407, -0.30457, -0.09851, -0.02372, -0.07729, -0.11602,
              -0.75995, -0.71884, -0.08585, -0.30406, 0.45818, 0.14921,
              -0.01033, -0.11776, 0.0064, -0.57717, -0.01014, -0.01357,
              -0.00544, -0.02168, 0.40468, 0.28195, 0.00668, 0.14448, 0.01245,
              -0.08956, -0.26283, 0.01864, -0.00641, 18.55347, 0.0146, 0.08284,
              -0.04785, 0.1136, -0.33861, 0.01327, -0.06392, -0.18758, 0.05449,
              -0.05583, -0.00435, -0.09869, -0.00286, -0.04613, -0.00395,
              -0.14564, -0.01385, -0.01762, 0.2116, -0.61631, -0.521, -0.04583,
              0.32812, 0.32138, 0.04749, -0.05724, 0.11239, 0.13216, -0.01203,
              0.40084, -0.05207, 34.07903, -0.21457, -0.34938, -0.04594,
              0.11198, -0.30662, -0.20776, -0.01076, -0.10959, 0.10891,
              -0.10304, -0.28141, 0.25061, -0.20293, 0.7993,
            ],
            lat_tbl: [
              -391.05987, -243.95958, -23.83558, 58.13857, 5.04859, -3.93183,
              -14.21914, 7.14247, -12.09415, -9.70132, 1.04307, 0.47323,
              -0.07504, 0.70575, -0.05239, 0.00482, -0.02916, 0.00877, -0.00528,
              -0.00286, 28e-5, -0.00228, -56e-5, -0.00149, 49e-5, 47e-5,
              -0.18765, -0.59571, 0.03742, -0.14653, 2.30535, 0.65092, 0.42216,
              0.24521, -2.86932, 2.37808, -0.58456, 0.27446, -1.12264, -2.04413,
              -11.71318, -1.41554, -23.30671, -24.70499, 8.82738, 85.64657,
              -90.02223, 22.42604, -4749.41359, -4244.4682, 25.20811, -18.51469,
              -1.19892, -0.61067, 0.67734, -1.08912, -0.01607, 0.00626, -8e-5,
              0.00126, -0.0033, -78e-5, -0.01503, 0.00758, -0.13208, -0.00218,
              -0.04522, 0.20297, -0.94708, -0.77897, -2.74075, -3.01122,
              -1.03394, 0.00886, 1.55485, -4.68416, -0.13244, -57.26983,
              0.05589, -0.55396, -0.0013, 0.00526, -0.01028, 0.02086, 0.01334,
              0.00699, 0.08565, 0.0202, 0.01001, -0.08402, 0.08558, -0.04488,
              0.57268, -0.59574, 0.00807, 0.00492, 0.21993, -0.18949, -0.00396,
              0.00735, 0.00487, 0.0023, 0.00699, -0.00473, 0.01406, -0.00139,
              0.00738, 99e-5, 0.00161, 19e-5, -67e-5, -47e-5, 0.00572, -0.00486,
              -0.00842, 0.00322, 18e-5, -0.00109, -0.00272, 0.00112, -41e-5,
              0.00763, 0.00211, 0.00118, -0.46842, -0.17877, 0.00209, -0.00179,
              9e-4, -75e-5, 0.00618, 0.0061, 15e-5, 32e-5, -0.00123, 26e-5,
              0.00332, 0.00135, 0.3913, -0.34727, 15e-5, -27e-5, -26e-5, -52e-5,
              0.00162, 0.00913, -0.00697, 0.00308, -0.00333, -0.00258, -0.00117,
              35e-5, 0.00766, 0.00194, 0.00135, 67e-5, -0.41171, 0.24241,
              0.00106, 25e-5, 13e-5, -19e-5,
            ],
            rad_tbl: [
              -767.68936, -460.59576, -52.41861, -273.85897, 59.52489, 1.85006,
              -39.6475, 23.63348, -34.60399, -23.41681, 2.74937, 1.55389,
              0.20343, 2.15502, -0.12846, 0.07199, -0.07555, 0.05582, -0.04354,
              0.01546, -0.03931, 0.07623, -0.00491, 0.00661, 0.00322, 0.0154,
              -0.06741, -0.35343, 0.00469, -0.08073, 1.94975, 0.66376, 0.06137,
              0.31426, -2.93841, 4.27732, -4.00342, 1.11157, -36.87785, 1.2496,
              4.69573, 2.15164, -114.24899, -6.6932, 12.99919, -9.47795,
              -21.8235, -156.88624, -1237.19769, -1379.88864, 6.54369, -6.20873,
              -0.14163, -0.327, 0.17937, -0.34864, 0.01393, -0.01286, 0.02876,
              -0.05767, 0.0221, -0.00128, 0.16495, -0.01242, 1.15915, -0.10365,
              -0.33224, -0.10045, 6.83719, -0.27499, -0.31284, -0.94332,
              1.63704, -0.33318, 1.48134, -1.32257, 0.96498, -8.31047, -0.00402,
              -0.09441, 0.04292, -0.00444, 0.30325, -0.02012, 1.67999, 0.00353,
              0.00467, 0.03556, 0.01393, -0.01229, 0.01188, -0.0139, 0.04615,
              -0.03509, 0.32423, -0.12491, 0.13682, 0.15131, 0.11221, -0.01201,
              0.57239, 93e-5, 0.02068, -0.01162, 0.00647, -0.00325, 0.2701,
              -0.42993, 0.14314, -0.01353, -0.08757, -0.00699, 0.00199, 0.31873,
              18.80329, 0.01681, 0.08009, -0.00998, -0.14421, -0.15912, 0.37208,
              0.49744, 0.35144, 0.06582, -0.11501, -0.14037, 0.10352, -0.00768,
              0.04826, -0.00423, 0.1985, 0.0031, -0.0178, 0.0135, -0.61106,
              -0.20525, -0.04388, 0.52143, 0.193, -0.21446, -0.05749, -0.04776,
              0.12877, -0.10908, 0.39821, 0.00627, 34.03956, 0.04392, -0.34455,
              0.22015, 0.11743, 0.04638, 0.20723, -0.30447, 0.10976, -0.01008,
              -0.20778, -0.21822, 0.24939, 0.27976, 0.7979, 0.202,
            ],
            arg_tbl: [
              0, 3, 2, 1, 7, -2, 8, 0, 3, 3, 5, -8, 6, 3, 8, 0, 2, 2, 7, -4, 8,
              0, 3, 1, 5, -3, 6, 3, 8, 0, 2, 3, 7, -6, 8, 0, 2, 4, 7, -8, 8, 0,
              3, 1, 6, -6, 7, 6, 8, 0, 3, 1, 6, -5, 7, 4, 8, 0, 3, 1, 6, -4, 7,
              2, 8, 0, 2, 1, 6, -3, 7, 0, 3, 1, 6, -2, 7, -1, 8, 0, 2, 5, 7, -9,
              8, 1, 2, 4, 7, -7, 8, 1, 2, 3, 7, -5, 8, 1, 2, 2, 7, -3, 8, 0, 2,
              1, 7, -1, 8, 1, 1, 1, 8, 2, 2, 1, 7, -3, 8, 0, 2, 2, 7, -5, 8, 1,
              3, 1, 6, -6, 7, 5, 8, 0, 3, 1, 6, -5, 7, 3, 8, 0, 2, 5, 7, -8, 8,
              0, 2, 4, 7, -6, 8, 0, 2, 3, 7, -4, 8, 0, 2, 2, 7, -2, 8, 1, 1, 1,
              7, 0, 1, 2, 8, 2, 2, 1, 7, -4, 8, 0, 2, 5, 7, -7, 8, 0, 2, 4, 7,
              -5, 8, 0, 2, 3, 7, -3, 8, 0, 2, 2, 7, -1, 8, 0, 2, 1, 7, 1, 8, 0,
              1, 3, 8, 1, 2, 1, 6, -2, 8, 1, 2, 5, 7, -6, 8, 0, 2, 4, 7, -4, 8,
              0, 1, 4, 8, 1, 3, 2, 5, -4, 6, -1, 8, 1, 3, 1, 6, 1, 7, -3, 8, 0,
              2, 1, 6, -1, 8, 1, 3, 1, 6, -1, 7, 1, 8, 0, 3, 2, 5, -6, 6, 1, 8,
              0, 2, 5, 7, -5, 8, 1, 1, 1, 6, 0, 2, 6, 7, -6, 8, 0, 2, 7, 7, -7,
              8, 0, 2, 2, 6, -2, 8, 0, 3, 2, 5, -3, 6, -1, 8, 0, 2, 2, 6, -1, 8,
              1, 2, 1, 5, -2, 8, 0, 3, 3, 5, -5, 6, -1, 8, 0, 2, 4, 7, 5, 8, 0,
              2, 1, 5, -1, 8, 1, 3, 1, 5, -1, 7, 1, 8, 1, 3, 1, 5, -5, 6, 1, 8,
              1, 1, 1, 5, 0, 2, 2, 5, -1, 8, 1, -1,
            ],
          },
        },
        {
          key: "pluto",
          type: "heliocentric",
          epoch: 2446640.5,
          inclination: 17.1346,
          node: 110.204,
          perihelion: 114.21,
          semiAxis: 39.4633,
          dailyMotion: 0.0039757,
          eccentricity: 0.248662,
          anomaly: 355.0554,
          equinox: 2446640,
          magnitude: -1,
          semiDiameter: 2.07,
          ptable: {
            maxargs: 9,
            max_harmonic: [0, 0, 0, 0, 2, 2, 9, 13, 13],
            max_power_of_t: 7,
            distance: 39.54,
            timescale: 3652500,
            trunclvl: 1,
            lon_tbl: [
              74986469.33577, 100898343.7369, 48199471.54076, 9520076.03177,
              690431.6734, -427355.12716, 52266623.77862, 860190.70714,
              -21.08511, -143.39295, -126.71124, 48.18528, -88.74508, 40.50942,
              51.29367, -10.24075, 0.63094, 32.03258, -410.00781, 399.90234,
              -116.54319, 51.50329, 116.84565, 687.76781, -13.38605, 182.70107,
              -1668.12226, -5162.22648, -585.68297, -2247.56041, -20.95875,
              -193.13703, -57.12097, -10.35058, -1778.01442, -6463.73779,
              -657.86093, -2713.44436, -41.3256, -211.82042, -107.16513,
              -36.58628, 97929588.08231, -33582903.63417, 143382679.3177,
              -47411568.92345, 79428827.73581, -24658834.87499, 19861233.17488,
              -5755585.62084, 1995060.95931, -693507.08147, 135176.31467,
              109360.38672, -8188.00598, -1680.95072, 71020.19608, -70785.39049,
              -24.56034, -20.34919, 1618.45976, -2079.48538, 635.62954,
              -850.87068, 44.95257, -64.04459, -18.61475, -1.77734, 9.38079,
              5.19958, 17422.08783, -4872.53852, 10985.76629, -1137.68569,
              1771.28893, 288.93745, 40.22664, 37.90027, 6.81361, -32.65868,
              16.97268, 11.76152, 29.33024, -12.92289, -55.13187, -14.73791,
              7.52474, -102.0506, 182.53144, -20.1896, -490237997.494,
              486646248.6336, -781277018.2643, 602300460.5729, -463787999.4642,
              249529525.961, -123964746.8642, 31353019.97807, -13353800.92159,
              -3463382.63269, -35469.17654, -1035343.45385, 65076.64025,
              -38181.61312, -16473.33813, 3928.44674, 188.60263, 1000.4253,
              -208376.39376, -700566.62363, 114839.84613, -342407.71113,
              39467.04812, -14553.84849, 581895.261, 1012499.16715,
              406317.22416, 310804.78515, 43625.07033, -4157.26545, -5930.13795,
              -2070.62413, 3348.17582, -10871.23729, 144609.1855, 60383.6365,
              27912.02226, 15254.61228, -98561.37758, -67442.28158,
              -15573.63338, -19931.99773, 24323.06905, -37473.32558, 2840.64042,
              -8911.23694, -19636.31898, 71725.21946, -12280.54554, 12251.00101,
              88626.5226, 5513.6845, 18506.41546, -6513.87434, -83350.14621,
              44300.00743, -22075.37353, 3731.57531, -29167.7602, -21642.67384,
              56602666.72177, -22225578.01823, 50576897.80669, -50319847.79086,
              5689259.25622, -29585299.79697, -4249711.27661, -4490830.29568,
              -727678.08724, 366050.85631, 19183.62792, 55647.98226, 1897.78091,
              -1091.03988, 432.38158, -138.62556, 101.38743, 25.67379,
              320.20735, 362.16615, 85.06067, 54.02616, 2.3946, 18.70004,
              -8.43353, 2.721, -3.11205, -3.06201, 136.31503, -28.3362,
              48.68781, -18.45285, 1.15302, -1.5236, -0.13706, -0.37489, 0.0875,
              -0.14579, -0.07051, -0.06518, 0.30237, -0.00448, 4.83172, 6.83684,
              1752447.78043, -945086.75857, 2340978.12819, -1963675.42559,
              1254147.25257, -1274861.91191, 279459.60237, -263954.01378,
              11835.6229, -16344.44434, 9119.9896, -2390.44218, -23.67909,
              86.73916, -642.78635, -1290.12208, -0.43345, -1.85348, 0.03094,
              -0.01655, 0.1238, 0.31834, 5.54756, -1.63109, 1.10598, -0.17578,
              2.66994, -2.17573, 0.9736, -0.92226, -0.18533, -0.39747, 0.45809,
              -0.65286, 0.26129, 0.91922, 0.81068, 0.11183, 6.32182, 14.16786,
              0.20872, 3.28489, -1.47458, -2.11724, 1.7002, -1.99889, 3.13003,
              1.90638, -4483669.52795, -446454.90158, -6586256.67478,
              -671890.16779, -3620444.55554, -499672.41074, -855998.32655,
              -191073.94266, -73186.6911, -22649.38582, -2414.81729,
              -1294.40542, 436.80907, 125.48109, -81.16877, 458.86508,
              -11.57414, -26.39114, -4.00801, -5.01054, -18.17569, 20.86879,
              -4.80965, 3.10535, -4.71122, 1.18169, 74.75544, 649.21464,
              -26.5506, 272.35592, -8.06982, 16.8611, -26.54868, 26.75711,
              -35.8291, 38.51063, 22.22814, 19.38336, -6.30462, 0.90602,
              0.62856, -0.34981, -0.10232, -0.00939, 0.04439, -0.18875, 0.16025,
              0.11306, -0.06803, 0.06004, -91305.66728, 262370.61704,
              -194633.44577, 304838.17733, -124505.90904, 94111.75602,
              -22317.18255, 1575.23438, 748.66316, -349.78711, 166.6445,
              -89.05045, 120.76207, -100.26715, 3.13806, 3.71747, -1.44731,
              -0.35235, -0.5166, -1.50621, 2.8131, -3.93573, 1.20292, -0.36412,
              -0.0334, -0.00561, -5.29764, 26.02941, 1.91382, 3.30686, -3.35265,
              -3.20868, 0.05807, -0.11885, -0.78588, 0.34807, -0.19038, 0.11295,
              -0.03642, -0.03794, 0.00251, 0.03449, -0.08426, -0.0031, 0.05297,
              -0.09278, 0.10941, 99e-5, -228688.56632, 312567.73069,
              -331458.31119, 328200.1946, -143760.57524, 104182.01134,
              -17313.30132, 12591.15513, -440.32735, -105.67674, 104.35854,
              -852.8459, 0.95527, 0.30212, -54.63983, 4.06948, 0.07545,
              -0.13429, 16.21005, 29.24658, 9.2341, 50.48867, 30.55641,
              12.76809, 0.11781, 0.70929, -0.041, 13.60859, 0.04976, -0.02083,
              0.36279, 0.3013, -0.02129, 0.09363, -0.07812, 0.0157, -0.06217,
              -0.37181, -29348.55031, 43889.87672, -35765.41577, 33855.9007,
              -10128.69894, 4535.32148, 281.75353, -218.49194, -7.55224,
              134.2864, 2.11319, -2.13109, 15.71244, 11.07183, -0.05406,
              -0.23337, -1.28949, 1.34281, 0.04212, -0.0208, 0.08109, 0.1482,
              -6010.46564, 3639.4178, -5973.16, 1381.66999, -1177.36865,
              -501.06937, 166.14792, -103.36431, 14.92766, 4.12877, -2.20893,
              -6.32033, -0.29038, -0.43172, -0.59341, 0.20477, -0.13143,
              -0.0315, 0.10992, 0.01976, -0.00254, 0.02028, -0.30044, -0.44658,
              -0.03409, -0.10758, 0.08349, 0.06153, -0.06055, 0.18249, -1.15341,
              -8.68699, -0.11348, -3.30688, 1.08604, 1.04018, -0.46892,
              -0.69765, 0.21504, 0.01968, -0.00455, -0.01678, 3.95643, -3.17191,
              3.9522, -2.1267, 0.99305, -0.16651, 0.34839, -0.49162, 0.85744,
              0.20173, -0.00975, 0.20225, -0.02627, -0.02281, -0.18002,
              -0.01803, -0.06144, -0.2151, 0.15935, -0.01251, -0.21378, 0.44806,
              -0.01174, 0.05779, 0.07646, -0.19656, -0.04044, -0.02521, 0.02996,
              0.06169, 0.16698, -0.0471, -0.06506, -0.02114, 0.055, 0.00276,
              0.08433, 0.0316, 0.08193, 0.35773, 0.05454, 0.10718, -0.02823,
              -0.00839, 0.54078, 0.49347, 0.09609, 0.11825, -0.16092, -0.11897,
              0.09059, 0.08254, 0.16712, 0.0586, -0.09547, -0.03206, 0.03876,
              0.04719, -0.02345, 0.0224, -0.00609, -0.00649, 0.03859, 77e-5,
              0.47819, 0.26196, 0.0978, 0.08104, -0.16919, 0.05042, -0.42652,
              0.3081, -0.03409, -0.51452, -0.2312, -0.0138, -0.01157, -0.00143,
              -0.00512, -0.01628, -0.00189, 0.00183, -0.01427, -0.02861,
              0.00618, -15e-5, 0.13087, 0.1387, 0.15158, -0.21056, -3.94829,
              -1.06028, -1.36602, 0.77954, 0.08709, -0.03118, -44.74949,
              91.17393, 8.78173, 45.8401, 1.9756, -15.02849, -0.10755, -0.02884,
              3.3867, 0.30615, 130.92778, -24.33209, 43.01636, -40.81327,
              -19.439, 22.18162, -0.12691, 0.33795, -6.4479, -6.23145, 0.00319,
              0.01141, -0.03252, 0.03872, 0.04467, 0.01614, -0.00382, -19e-5,
              0.05955, 0.01533, 16.11371, 41.37565, 61.44963, 6.90615, 1.41326,
              -0.7392, -0.03871, 24.81978, -0.10229, -0.32775, -0.05188,
              -0.05628, -2.33618, 2.39053, -0.00584, 0.00436, 0.20903, 0.0222,
              -0.01738, -0.02765, -0.00217, 0.00613, -0.01772, 0.01903, 0.07075,
              -0.0053, 0.15234, -0.3776, -0.11641, -0.20102, -0.63675, 0.20525,
              -0.15783, 0.58945, -0.06243, 0.04306,
            ],
            lat_tbl: [
              -35042727.30412, -49049197.81293, -25374963.60995, -5761406.03035,
              -467370.5754, 14040.11453, 2329.15763, -13978.6939, 45.43441,
              29.70305, 32.33772, -38.34012, 26.43575, -28.76136, -18.5904,
              12.64837, 5.56569, -12.51581, 248.3735, -64.44466, 54.02618,
              4.39466, -269.35114, -290.63134, -48.03841, -52.83576, 1508.94995,
              1682.78967, 554.02336, 715.65819, 34.37602, 58.44397, 16.63685,
              16.10176, -1069.51609, 2300.89166, -437.16796, 927.89245,
              -33.17679, 68.74495, 18.72022, 32.9764, -34004958.12619,
              -17758805.77098, -48416073.75788, -24973405.03542,
              -25374996.23732, -13351084.9734, -5738294.54942, -3082092.6335,
              -519989.39256, -206440.89101, 44186.23548, -87639.2263,
              2506.47602, 2327.01164, -53878.47903, -19670.13471, 2.66934,
              -3.86086, 106.32427, 576.47944, 46.56388, 218.28339, 4.35402,
              15.04642, 2.68717, -2.86835, 0.81728, -2.34417, -1604.85823,
              -1999.24986, -631.47343, -1382.19156, -15.74075, -256.97077,
              6.99648, -4.54257, 2.63478, 1.88838, 0.17628, -2.11518, -2.46735,
              -1.48743, 1.83456, 4.68487, -7.10919, 3.57046, -5.36342, -7.70367,
              28395956.20816, -37176795.74372, 48969952.83034, -48145798.96248,
              31155823.23557, -21163596.14822, 9057634.3826, -3167688.51696,
              1167488.70078, 219103.97591, -19017.97335, 107849.61195,
              -3814.43474, 4405.9212, 5800.13959, 12619.88708, 22.18168,
              -89.47801, 52202.81929, 55119.44083, 5082.58907, 37955.06062,
              -3165.24355, 3316.67588, -113906.4397, -69279.41495, -57358.07767,
              -10176.17329, -4179.79867, 2495.99374, 787.8718, -154.35591,
              -1148.62509, 1034.58199, -22194.95235, 3341.97949, -4578.53994,
              108.30832, 7444.39789, 16646.40725, 509.7543, 3808.92686,
              -179.85869, 7408.76716, 340.65366, 1504.64227, -3783.09873,
              -13505.60867, 875.74489, -3181.27898, -16220.93983, 8041.37347,
              -2631.07448, 2899.50781, 18894.92095, -20072.81471, 5925.05701,
              -1947.91902, -6731.56601, 8014.52403, -987793.49463,
              6491762.34471, -279205.73643, 6117135.96868, -140925.91402,
              2259422.06929, 114028.61646, 605600.90358, 91858.00186,
              56506.65187, 8949.15777, -9782.67413, -394.66541, -105.19208,
              -76.54752, -32.59411, -19.28741, 10.40013, -107.64003, -7.36229,
              -22.25126, 4.05952, -3.74402, -2.79308, 1.03337, -2.13968,
              1.53794, -0.02617, 35.70756, 12.97733, 14.46213, 6.20518, 1.79381,
              1.65422, -0.31216, 0.29053, -0.03538, -0.01584, -0.08934, 79e-5,
              0.05539, -0.21591, 2.86929, -2.24724, 320797.07455, 93342.16556,
              -20903.39115, 79523.22083, -226588.37473, -121017.23944,
              -48472.25935, -74195.36778, -7962.48081, -4607.76339, -4597.33274,
              -7983.12541, -20.345, 56.82999, -1038.19507, 619.69624, 1.08907,
              -0.91278, -0.13391, 0.34956, -0.19982, -0.18296, -0.97688,
              2.36806, -0.30127, 0.5098, 0.96103, 1.96432, 0.43338, 0.87317,
              0.36997, -0.01583, -0.44692, -0.25159, -0.53525, 0.01154,
              -0.13231, 0.35562, 3.88928, -4.02882, 1.06967, -0.56305, -0.45204,
              0.77213, -0.82873, -0.25854, 0.21136, -1.06696, 458529.05491,
              616790.47568, 698431.01349, 1124501.41713, 300226.10339,
              766533.33698, 26896.22954, 207880.7572, 1116.29607, 21793.26153,
              -850.64044, 3528.95568, 29.61278, -120.13367, 376.95131, 66.45758,
              -3.64868, 2.76062, -0.85352, 0.95115, 5.35056, 2.52803, 0.90026,
              0.76403, 0.43191, 0.83605, 125.81792, -39.65364, 50.14425,
              -5.75891, 2.78555, 2.05055, -4.27266, -4.92428, 6.78868, 5.73537,
              3.35229, -3.70143, 0.08488, 1.07465, 0.10227, 0.06074, 0.00291,
              0.01522, -0.02274, 0.00297, 0.01095, -0.01856, -0.02862, 0.00178,
              143640.07486, 707.21331, 177163.08586, 53386.52697, 56856.89297,
              48268.74645, 1764.52814, 7711.76224, 352.34159, -968.03169,
              -45.16568, -81.60481, -76.35993, -98.06932, -1.42185, 1.81425,
              -0.23427, 0.59023, 0.57127, -0.36335, 1.89975, 0.6689, 0.28797,
              0.43592, -0.03769, 0.03273, -6.06571, -2.68515, -0.55315, 0.86977,
              1.5384, -0.59422, -0.05453, 0.02447, -0.12658, 0.22814, -0.01715,
              0.08497, -0.01288, -0.00606, 0.01547, -0.00692, 0.01157, 0.02407,
              -0.03883, 0.00835, -0.01542, -0.04761, 174386.39024, 158048.26273,
              159192.81681, 220154.55148, 33716.11953, 87537.86597, -116.90381,
              7535.83928, -962.06994, -132.28837, -644.90482, -110.52332,
              3.42499, 3.7466, -0.94008, 41.55548, -0.03824, -0.05607, 28.74787,
              -37.31399, 30.87853, -26.1194, 10.79742, -5.97905, 1.01237,
              -0.04429, 0.54402, 0.41905, -0.0244, -0.03991, -0.00347, -0.04362,
              -0.00347, -0.00469, -0.02707, 0.02761, -0.17773, -0.11789,
              26475.0258, 35363.04345, 19877.11475, 41430.3594, 2948.09998,
              12983.41406, 281.93744, 570.70054, 147.83157, 16.0009, -1.62814,
              -8.30846, 9.29131, -10.16496, -0.15799, 0.03843, 1.44716, 0.46953,
              -0.0215, -0.02502, 0.08861, -0.0669, 2237.41551, 3739.08722,
              753.74867, 3460.41553, -298.69226, 520.47031, -33.62615,
              -138.12767, 3.61843, -8.2986, -4.56656, 0.79553, 0.20041,
              -0.25771, -0.35233, -0.27913, -0.02799, -0.08328, -0.06889,
              -0.16853, 0.01701, -0.00964, -0.37737, 0.1803, -0.08525, 0.01906,
              0.05236, -0.05155, 0.1132, 0.05991, -5.66926, -0.54402, -2.08508,
              -0.39407, 0.82155, -0.55975, 0.39168, -0.25551, 0.00623, 0.16162,
              -0.02519, 0.0242, -1.23293, -3.19649, -0.60519, -2.79729, 0.05362,
              -0.61569, -0.25638, -0.27033, -0.03987, 0.46623, -0.1207, 0.00643,
              0.00849, -0.00768, -0.03687, 0.10445, -0.13544, -0.00592, 0.02078,
              0.09172, 0.15824, 0.15815, 0.0202, 0.00747, 0.10919, 0.09553,
              0.01953, -0.00135, 0.04266, -0.00218, 0.02182, -0.13742, -0.01249,
              0.01724, -0.022, 0.02975, -0.01401, 0.03416, -0.28873, 0.04235,
              -0.08137, 0.04223, -0.00326, 0.02144, -0.40423, 0.14281, -0.08256,
              0.02142, 0.08116, -0.0368, -0.02324, 0.0726, -0.06746, 0.11645,
              0.03233, -0.05997, -0.03101, 0.02197, -0.00896, -0.00491, 0.00574,
              0.00855, 52e-5, 0.01209, -0.31828, 0.29955, -0.08133, 0.04318,
              0.06787, -0.08865, -0.13228, -0.06507, 0.34008, 0.06417, -0.00177,
              -0.15116, -0.00553, -0.0195, 0.01144, -0.00309, -0.00115,
              -0.00153, 0.02063, -0.00791, -0.00314, 0.00493, -0.10614, 0.08338,
              0.08845, 0.20168, 1.38955, -2.52285, -0.30475, -1.05787, 0.0058,
              0.06623, -44.33263, -47.70073, -29.80583, -8.77838, 7.02948,
              2.77221, 0.05248, -0.13702, -0.78176, 1.77489, -16.32831,
              46.68457, 2.54516, 21.78145, -5.0908, -8.42611, -0.24419,
              -0.03315, 2.80629, -1.12755, -0.00402, 53e-5, 24e-5, -43e-5,
              0.00403, -0.0021, 0.00603, 0.00411, -0.0026, 0.00416, 2.29235,
              3.05992, 2.36465, -0.5875, 0.1403, 0.13523, 0.89998, 0.70156,
              -0.02188, 0.02003, -0.00533, 0.00447, 2.96411, 1.30183, 0.01422,
              0.00624, -0.10737, -0.38316, -0.05968, 0.04379, 0.01171, 0.0118,
              -0.00989, -0.01375, -0.00845, 0.03782, 0.09484, 0.09909, 0.0764,
              -0.00898, -0.01076, 0.0276, 0.0163, 0.02198, 0.05985, 0.0413,
            ],
            rad_tbl: [
              17990649.12487, 24806479.30874, 12690953.00645, 2892671.69562,
              249947.71316, -5138.71425, 1142.68629, 6075.25751, -34.76785,
              -19.72399, -15.81516, 30.47718, -11.73638, 21.87955, 9.42107,
              -10.40957, -5.5967, 6.85778, -167.06735, -2.31999, -32.42575,
              -13.72714, 130.16635, 117.97555, 31.33915, 39.64331, -1378.54934,
              -395.83244, -562.79856, -167.74359, -45.12476, -17.08986,
              -4.20576, -16.56724, 1762.12089, -1148.86987, 736.5532,
              -423.09108, 56.13621, -26.26674, 9.7781, -38.05151, 4702224.98754,
              27254904.94363, 5306232.25993, 39518429.29982, 1725110.05669,
              21833263.27069, 46010.62605, 5425411.66252, 17238.09865,
              536771.62156, -61263.36051, 66270.70142, 2084.66296, -1936.71208,
              35898.49503, 34885.28549, 1.93276, 10.66292, -665.11445, 3.70467,
              -265.68478, 16.16272, -19.45954, 2.32738, 3.04237, 3.97339,
              -2.64312, 0.66308, -3207.68754, 3418.0372, -2342.6231, 1729.1503,
              -450.84643, 179.00943, -13.20367, -1.86087, -4.95659, 7.22347,
              -5.0889, -1.28891, -6.21713, 5.10551, 13.97276, 0.44529, 3.25177,
              25.02775, -45.56672, 11.5847, 124443355.5545, -100018293.41775,
              190506421.77863, -118262753.40162, 108199328.45091,
              -45247957.63323, 27272084.41143, -4125106.01144, 2583469.66051,
              1024678.12935, -22702.55109, 199269.51481, -15783.14789,
              5564.52481, -427.22231, -6330.86079, -97.50757, -204.32241,
              -9060.54822, 156661.77631, -47791.83678, 59725.58975, -8807.74881,
              -92.38886, -28886.11572, -244419.59744, -53336.36915,
              -92232.16479, -8724.89354, -2446.76739, 889.71335, 936.51108,
              494.80305, 2252.83602, -18326.60823, -25443.13554, -3130.86382,
              -5426.29135, 23494.08846, 91.28882, 4664.14726, 1552.06143,
              -8090.43357, 2843.48366, -1445.73506, 1023.11482, 11664.20863,
              -7020.08612, 3100.21504, -64.16577, -9724.97938, -12261.47155,
              -3008.08276, -1523.06301, 6788.74046, 10708.27853, 343.09434,
              1701.5276, 14743.99857, -4781.96586, -15922236.41469,
              1825172.51825, -14006084.36972, 10363332.64447, -979550.9136,
              6542446.18797, 1160614.26915, 570804.88172, 89912.68112,
              -171247.08757, -13899.52899, -6182.25841, -240.64725, 412.42581,
              -66.2451, 71.30726, -15.81125, -15.76899, -21.85515, -102.12717,
              -10.18287, -19.38527, 1.43749, -3.87533, 1.97109, 0.20138,
              0.32012, 1.02928, -40.22077, 20.80684, -15.69766, 9.63663,
              -1.2601, 0.56197, 0.08592, 0.1854, -0.07303, 0.03897, 0.01438,
              -0.08809, 0.15479, 0.10354, 0.19052, 2.0879, 405480.24475,
              -607986.83623, 582811.58843, -915111.10396, 258696.21023,
              -493391.09443, 23403.62628, -119503.67282, -4036.86957,
              -9766.17805, -663.93268, 2544.07799, 40.36638, 76.2639, 246.67716,
              -13.9344, 0.12403, 0.25378, 0.14004, -0.08501, 0.07904, 0.12731,
              1.02117, -1.34663, 0.25142, -0.26903, 0.18135, -0.57683, -0.30092,
              -0.36121, -0.09623, 0.05873, -0.05803, 0.02869, -0.01194, 0.04983,
              0.0425, 0.04894, 1.34245, 0.70137, 0.24217, 0.25912, -0.32759,
              -0.03575, 0.0678, -0.41277, 0.43865, 0.17857, -763933.02226,
              465658.17048, -1082753.91241, 593319.68634, -553911.8934,
              274748.95145, -122250.71547, 56608.95768, -9914.173, 2988.43709,
              707.94605, -765.0147, 52.7326, -34.22263, -43.583, -38.43647,
              -4.95939, -1.97173, -1.04406, -0.13072, -0.34281, 4.75202,
              -0.35513, 0.93597, -0.5438, 0.70536, 84.83116, 102.93003,
              26.34884, 48.57746, 0.02853, 2.91676, -8.07116, 1.66613, -2.07908,
              11.62592, 6.64704, 0.98291, -1.19192, 0.93791, 0.18822, 0.009,
              -0.03181, -0.02, 0.02755, -0.01398, -0.03971, -0.03756, 0.13454,
              -0.04193, -18672.98484, 28230.75834, -28371.58823, 26448.45214,
              -13352.09393, 7461.71279, -2609.33578, 726.50321, -309.72942,
              -86.71982, 12.48589, -9.69726, 1.82185, 14.9222, -0.04748, 0.4251,
              -0.20047, 0.00154, 0.00176, -0.26262, 0.78218, -0.73243, 0.23694,
              -0.03132, -0.0029, -0.03678, 14.03094, 4.25948, 0.79368, -0.78489,
              -2.30962, 2.31946, 0.00158, -0.04125, -0.01387, 0.28503, 0.00892,
              0.05154, 0.00184, -0.01727, -0.00889, 0.03526, -0.00521, -0.02093,
              0.002, 0.04872, -0.02163, 0.00578, 20699.27413, -2175.57827,
              31177.33085, 4572.02063, 15486.2819, 8747.74091, 2455.51737,
              3839.83609, 51.31433, 507.91086, 15.90082, 44.75942, -0.98374,
              -2.64477, 2.52336, -3.09203, -0.08897, -83e-5, -15.91892, 0.72597,
              14.04523, -3.16525, 4.33379, -30.8298, 0.40462, -0.75845,
              13.14831, -0.02721, -0.01779, 0.00481, 0.42365, -0.09048, 0.08653,
              0.04391, 0.00846, 0.01082, -0.04736, 0.02308, 6282.21778,
              -4952.70286, 7886.57505, -5328.36122, 3113.76826, -1696.8459,
              330.70011, -155.51989, -18.31559, -3.90798, -3.11242, 1.87818,
              -1.05578, 0.11198, 0.05077, -0.01571, 2.41291, 2.40568, -0.01136,
              -76e-5, -0.00392, -0.02774, 634.85065, -352.21937, 674.31665,
              -260.73473, 199.16422, -28.44198, 6.54187, 6.4496, -1.55155,
              0.29755, 0.16977, 0.1754, -0.02652, 0.03726, -0.00623, 0.11777,
              -0.00933, 0.02602, -0.13943, -0.24818, 0.02876, -0.01463,
              -0.07166, 0.06747, -0.01578, 0.01628, 0.00233, -0.00686, 0.00431,
              -0.00276, 0.21774, 0.09735, 0.07894, 0.07279, -0.013, -0.00268,
              0.10824, 0.09435, 0.0072, 0.02111, -0.0196, 0.06154, 0.56867,
              -0.07544, 0.1821, 0.06343, -0.00906, 0.01942, -0.0085, -0.00351,
              -0.06988, 0.01713, -0.0111, -0.00663, 0.00196, -0.02064, -8e-5,
              43e-5, 0.00375, 84e-5, -0.00279, 0.001, 0.00271, -0.02017, -74e-5,
              -0.00357, 0.03793, -0.10108, -0.01083, -0.03952, 3e-4, 12e-5,
              0.01576, 0.01142, 0.00351, 0.00277, 0.01409, -0.00774, -65e-5,
              0.01895, 0.0735, -0.02519, 0.01528, -0.01057, -99e-5, -0.00295,
              0.21347, -0.17458, 0.0494, -0.02757, -0.06243, 0.05203, 0.01055,
              -0.00109, 3e-5, -0.04201, -0.00263, 0.02387, 0.00886, -0.01168,
              0.00479, 0.00204, -0.00239, 22e-5, -0.00223, -0.02029, -0.1413,
              -0.15237, -0.01827, -0.04877, 0.12104, 0.06796, 0.16379, 0.31892,
              -0.15605, 0.07048, -0.007, 0.07481, -0.0037, -0.00142, -0.00446,
              0.00329, -18e-5, 0.00117, -0.0091, 0.0051, -55e-5, -0.00114,
              0.04131, -0.04013, -0.13238, 0.0268, -0.10369, 1.38709, 0.35515,
              0.41437, -0.01327, -0.02692, 38.02603, 13.38166, 15.33389,
              -7.40145, -8.55293, -0.13185, -0.03316, 0.13016, 0.04428,
              -1.60953, -12.87829, -76.97922, -23.96039, -22.45636, 14.83309,
              14.09854, 0.24252, 0.1385, -4.16582, 4.08846, 0.00751, -51e-5,
              0.03456, 0.029, 0.01625, -0.0466, 0.0139, -0.0053, 0.01665,
              -0.04571, 40.90768, -14.11641, 7.46071, -58.07356, -0.27859,
              -1.33816, 23.76074, -0.03124, -0.2786, 0.13654, -0.048, 0.05375,
              4.38091, 4.39337, 0.02233, 0.00514, -0.25616, -0.54439, -0.05155,
              0.11553, 0.02944, -0.00818, 0.0057, 0.00119, -0.00733, -0.027,
              -0.23759, -0.08712, -0.12433, 0.07397, 0.20629, 0.60251, 0.56512,
              0.1479, 0.07778, 0.11614,
            ],
            arg_tbl: [
              0, 7, 2, 3, 7, -9, 9, 0, 2, 4, 7, -12, 9, 0, 2, 4, 7, -8, 8, 0, 3,
              -4, 7, 5, 8, 4, 9, 0, 3, 3, 7, -5, 8, -1, 9, 0, 2, 1, 6, -8, 9, 1,
              2, 3, 8, -5, 9, 1, 2, 1, 6, -9, 9, 2, 3, 6, 7, -6, 8, -8, 9, 0, 3,
              4, 7, -10, 8, 4, 9, 2, 2, 3, 7, -8, 9, 0, 1, 1, 9, 7, 2, 3, 7,
              -10, 9, 0, 3, 4, 7, -10, 8, 2, 9, 2, 3, 5, 7, -12, 8, 2, 9, 0, 2,
              1, 6, -7, 9, 0, 1, 1, 8, 3, 2, 1, 6, -10, 9, 0, 3, 6, 7, -12, 8,
              2, 9, 0, 3, 5, 7, -10, 8, 2, 9, 0, 2, 5, 7, -13, 9, 0, 2, 4, 7,
              -10, 9, 0, 2, 3, 7, -7, 9, 0, 1, 2, 9, 7, 2, 3, 7, -11, 9, 0, 3,
              4, 7, -9, 8, 4, 9, 2, 3, 3, 7, -5, 8, 1, 9, 2, 2, 1, 6, -6, 9, 0,
              2, 7, 8, -13, 9, 0, 2, 3, 8, -2, 9, 1, 3, 1, 7, -5, 8, 2, 9, 1, 3,
              6, 7, -12, 8, 3, 9, 1, 2, 5, 7, -12, 9, 1, 2, 4, 7, -9, 9, 1, 2,
              2, 7, -3, 9, 1, 1, 1, 7, 0, 1, 3, 9, 5, 2, 3, 7, -12, 9, 1, 3, 5,
              7, -9, 8, 2, 9, 0, 3, 4, 7, -7, 8, 2, 9, 1, 3, 3, 7, -5, 8, 2, 9,
              0, 3, 2, 7, -5, 8, 5, 9, 0, 2, 1, 6, -5, 9, 0, 2, 3, 8, -1, 9, 2,
              2, 1, 6, -12, 9, 0, 3, 2, 7, -7, 8, 1, 9, 0, 2, 5, 7, -11, 9, 0,
              2, 4, 7, -8, 9, 0, 2, 2, 7, -2, 9, 0, 1, 4, 9, 7, 3, 2, 7, -8, 8,
              2, 9, 0, 3, 5, 7, -9, 8, 3, 9, 0, 3, 4, 7, -9, 8, 6, 9, 0, 3, 3,
              7, -5, 8, 3, 9, 1, 2, 2, 7, -1, 8, 1, 2, 3, 8, -9, 9, 0, 2, 9, 8,
              -9, 9, 0, 2, 1, 6, -13, 9, 0, 3, 2, 7, -5, 8, -3, 9, 0, 2, 6, 7,
              -13, 9, 1, 2, 5, 7, -10, 9, 0, 2, 4, 7, -7, 9, 0, 2, 3, 7, -4, 9,
              0, 1, 5, 9, 7, 3, 6, 7, -9, 8, 1, 9, 1, 3, 4, 7, -5, 8, 1, 9, 1,
              3, 3, 7, -3, 8, 1, 9, 0, 2, 1, 6, -3, 9, 2, 2, 3, 8, -10, 9, 0, 2,
              1, 8, 4, 9, 0, 2, 5, 8, -2, 9, 0, 2, 11, 8, -11, 9, 0, 3, 1, 7,
              -9, 8, 5, 9, 0, 2, 6, 7, -12, 9, 0, 2, 5, 7, -9, 9, 0, 2, 4, 7,
              -6, 9, 0, 2, 3, 7, -3, 9, 0, 1, 6, 9, 6, 2, 2, 7, -12, 9, 0, 3, 6,
              7, -9, 8, 2, 9, 0, 3, 3, 7, -12, 8, 3, 9, 0, 3, 4, 7, -10, 8, -3,
              9, 1, 3, 3, 7, -3, 8, 2, 9, 0, 2, 1, 6, -2, 9, 2, 2, 1, 8, 5, 9,
              0, 2, 13, 8, -13, 9, 1, 3, 2, 7, -9, 8, 1, 9, 0, 2, 6, 7, -11, 9,
              0, 2, 5, 7, -8, 9, 0, 2, 4, 7, -5, 9, 0, 2, 3, 7, -2, 9, 0, 1, 7,
              9, 7, 3, 6, 7, -9, 8, 3, 9, 0, 2, 1, 6, -1, 9, 4, 2, 3, 8, 3, 9,
              0, 2, 7, 7, -13, 9, 1, 2, 3, 7, -1, 9, 0, 2, 2, 7, 2, 9, 0, 1, 8,
              9, 6, 3, 7, 7, -9, 8, 1, 9, 0, 1, 1, 6, 0, 1, 3, 7, 0, 2, 2, 7, 3,
              9, 0, 1, 9, 9, 5, 3, 1, 7, -10, 8, 3, 9, 0, 3, 2, 7, -12, 8, 3, 9,
              1, 2, 1, 6, 1, 9, 0, 3, 1, 7, -1, 8, 8, 9, 0, 2, 3, 7, 1, 9, 1, 2,
              2, 7, 4, 9, 0, 2, 1, 7, 7, 9, 0, 2, 4, 8, 4, 9, 1, 2, 12, 8, -8,
              9, 0, 3, 1, 7, -10, 8, 2, 9, 1, 2, 1, 6, 2, 9, 0, 1, 11, 9, 2, 2,
              12, 8, -7, 9, 0, 3, 1, 7, -10, 8, 1, 9, 1, 1, 4, 7, 0, 1, 12, 9,
              0, 2, 6, 8, 3, 9, 0, 3, 1, 7, -2, 8, -12, 9, 0, 3, 7, 7, -7, 8, 2,
              9, 1, 2, 2, 6, -4, 9, 1, 1, 13, 9, 0, 2, 10, 8, -2, 9, 1, 2, 4, 7,
              2, 9, 0, 2, 2, 6, -3, 9, 0, 2, 2, 7, 8, 9, 1, 2, 8, 8, 2, 9, 0, 1,
              5, 7, 1, 2, 4, 7, 3, 9, 0, 2, 3, 7, 6, 9, 0, 2, 1, 5, -6, 9, 0, 3,
              2, 7, 8, 8, -3, 9, 0, 3, 1, 7, 6, 8, 3, 9, 0, 2, 6, 8, 6, 9, 0, 3,
              8, 7, -7, 8, 2, 9, 0, 2, 9, 7, -11, 9, 0, 2, 5, 7, 1, 9, 1, 2, 4,
              7, 4, 9, 0, 2, 2, 6, -1, 9, 0, 3, 2, 6, -1, 7, 2, 9, 0, 2, 2, 7,
              10, 9, 0, 2, 1, 7, 13, 9, 0, 2, 8, 7, -7, 9, 0, 2, 7, 7, -4, 9, 0,
              2, 6, 7, -1, 9, 0, 2, 5, 7, 3, 9, 0, 2, 4, 7, 5, 9, 0, 1, 2, 6, 0,
              2, 1, 5, -4, 9, 1, 3, 1, 6, 9, 8, -5, 9, 0, 2, 1, 5, -3, 9, 4, 2,
              1, 5, -2, 9, 4, 3, 9, 7, -9, 8, 6, 9, 0, 2, 8, 7, -4, 9, 0, 2, 7,
              7, -1, 9, 0, 2, 1, 6, 3, 9, 0, 2, 2, 6, 3, 9, 0, 2, 1, 5, -1, 9,
              3, 3, 6, 7, -3, 8, 7, 9, 1, 1, 1, 5, 0, 2, 2, 6, 5, 9, 0, 2, 1, 5,
              1, 9, 0, 2, 1, 5, 2, 9, 0, 2, 1, 5, 3, 9, 0, 2, 2, 5, -4, 9, 0, 2,
              2, 5, -3, 9, 0, 2, 2, 5, -2, 9, 1, 2, 2, 5, -1, 9, 1, 1, 2, 5, 0,
              -1,
            ],
          },
        },
        {
          key: "chiron",
          type: "heliocentric",
          epoch: 2456000.5,
          inclination: 6.926651533484328,
          node: 209.3851130617651,
          perihelion: 339.4595737215378,
          semiAxis: 0,
          dailyMotion: 0,
          eccentricity: 0.3792037887546262,
          anomaly: 114.8798253094007,
          equinox: 2450109.2345811967,
          magnitude: 6.5,
          semiDiameter: 0,
          perihelionDistance: 8.486494269138399,
        },
        {
          key: "sirius",
          type: "star",
          epoch: 2e3,
          hmsRa: { hours: 6, minutes: 45, seconds: 8.871 },
          hmsDec: { hours: -16, minutes: 42, seconds: 57.99 },
          raMotion: -3.847,
          decMotion: -120.53,
          velocity: -7.6,
          parallax: 0.3751,
          magnitude: -1.46,
          ra: 0,
          dec: 0,
          equinox: 0,
        },
      ];
      class T {
        constructor(e) {
          (this._key = e),
            (this.locals = {}),
            (this.locals.dp = []),
            (this.locals.dradt = null),
            (this.locals.ddecdt = null),
            (this.locals.EO = 0),
            (this.locals.SE = 0),
            (this.locals.SO = 0),
            (this.locals.pq = 0),
            (this.locals.ep = 0),
            (this.locals.qe = 0),
            (this.aberration = {}),
            (this.lightTime = {}),
            (this.position = {}),
            (this.distance = void 0),
            (this.epoch = void 0),
            (this.semiAxis = 0),
            (this.semiDiameter = void 0),
            (this._body = w.find((e) => e.key === this._key)),
            Object.keys(this._body).forEach((e) => {
              this[e] = this._body[e];
            });
        }
        static get KeysExceptEarth() {
          return w.filter((e) => "earth" !== e.key);
        }
      }
      class E {
        constructor(e, t) {
          (this._body = this.calculateBody(e, t.julian)),
            Object.keys(this._body).forEach((e) => {
              this[e] = this._body[e];
            }),
            (this.calculateBody = this.calculateBody.bind(this));
        }
        calculateBody(e, t) {
          return S.calc(t, e);
        }
      }
      const P = {
          aberration: (e, t, n, i, a) => {
            var o, r, c, u, h, d, p, m;
            return (
              ((a = a || {}).ra = t),
              (a.dec = n),
              (o = e - a.ra),
              (r = Math.cos(o)),
              (c = Math.sin(o)),
              (u = Math.cos(a.dec)),
              (h = Math.sin(a.dec)),
              (d = Math.cos(s * i.tlat)),
              (p = 0 != u ? (15472e-10 * i.trho * d * r) / u : 0),
              (a.ra += p),
              (m = 15472e-10 * i.trho * d * c * h),
              (a.dec += m),
              (a.dRA = (l * p) / 15),
              (a.dDec = l * m),
              a
            );
          },
          parallax: (e, t, n, i, a, o) => {
            let r = 0;
            var c,
              l,
              u,
              h,
              d,
              g,
              f,
              M,
              v = [],
              D = [];
            return (
              ((o = o || {}).ra = t),
              (o.dec = n),
              i > 1758.8
                ? o
                : ((r = p / (0.001 * m)),
                  (c = Math.cos(o.dec)),
                  (l = Math.sin(o.dec)),
                  (d = a.tlat * s),
                  (u = Math.cos(d)),
                  (h = Math.sin(d)),
                  (M = i * r),
                  (v[0] = M * c * Math.cos(o.ra)),
                  (v[1] = M * c * Math.sin(o.ra)),
                  (v[2] = M * l),
                  (D[0] = -a.trho * u * Math.cos(e)),
                  (D[1] = -a.trho * u * Math.sin(e)),
                  (D[2] = -a.trho * h),
                  (M =
                    (d = v[0] + D[0]) * d +
                    (g = v[1] + D[1]) * g +
                    (f = v[2] + D[2]) * f),
                  (M = Math.sqrt(M)),
                  (o.ra = y.zatan2(d, g)),
                  (o.dec = Math.asin(f / M)),
                  y.showcor(v, D, o),
                  o)
            );
          },
        },
        j = {
          nutationObject: {
            jdnut: {},
            nutl: 0,
            nuto: 0,
            nt: [
              0, 0, 0, 0, 2, 2062, 2, -895, 5, -2, 0, 2, 0, 1, 46, 0, -24, 0, 2,
              0, -2, 0, 0, 11, 0, 0, 0, -2, 0, 2, 0, 2, -3, 0, 1, 0, 1, -1, 0,
              -1, 0, -3, 0, 0, 0, 0, -2, 2, -2, 1, -2, 0, 1, 0, 2, 0, -2, 0, 1,
              1, 0, 0, 0, 0, 0, 2, -2, 2, -13187, -16, 5736, -31, 0, 1, 0, 0, 0,
              1426, -34, 54, -1, 0, 1, 2, -2, 2, -517, 12, 224, -6, 0, -1, 2,
              -2, 2, 217, -5, -95, 3, 0, 0, 2, -2, 1, 129, 1, -70, 0, 2, 0, 0,
              -2, 0, 48, 0, 1, 0, 0, 0, 2, -2, 0, -22, 0, 0, 0, 0, 2, 0, 0, 0,
              17, -1, 0, 0, 0, 1, 0, 0, 1, -15, 0, 9, 0, 0, 2, 2, -2, 2, -16, 1,
              7, 0, 0, -1, 0, 0, 1, -12, 0, 6, 0, -2, 0, 0, 2, 1, -6, 0, 3, 0,
              0, -1, 2, -2, 1, -5, 0, 3, 0, 2, 0, 0, -2, 1, 4, 0, -2, 0, 0, 1,
              2, -2, 1, 4, 0, -2, 0, 1, 0, 0, -1, 0, -4, 0, 0, 0, 2, 1, 0, -2,
              0, 1, 0, 0, 0, 0, 0, -2, 2, 1, 1, 0, 0, 0, 0, 1, -2, 2, 0, -1, 0,
              0, 0, 0, 1, 0, 0, 2, 1, 0, 0, 0, -1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1,
              2, -2, 0, -1, 0, 0, 0, 0, 0, 2, 0, 2, -2274, -2, 977, -5, 1, 0, 0,
              0, 0, 712, 1, -7, 0, 0, 0, 2, 0, 1, -386, -4, 200, 0, 1, 0, 2, 0,
              2, -301, 0, 129, -1, 1, 0, 0, -2, 0, -158, 0, -1, 0, -1, 0, 2, 0,
              2, 123, 0, -53, 0, 0, 0, 0, 2, 0, 63, 0, -2, 0, 1, 0, 0, 0, 1, 63,
              1, -33, 0, -1, 0, 0, 0, 1, -58, -1, 32, 0, -1, 0, 2, 2, 2, -59, 0,
              26, 0, 1, 0, 2, 0, 1, -51, 0, 27, 0, 0, 0, 2, 2, 2, -38, 0, 16, 0,
              2, 0, 0, 0, 0, 29, 0, -1, 0, 1, 0, 2, -2, 2, 29, 0, -12, 0, 2, 0,
              2, 0, 2, -31, 0, 13, 0, 0, 0, 2, 0, 0, 26, 0, -1, 0, -1, 0, 2, 0,
              1, 21, 0, -10, 0, -1, 0, 0, 2, 1, 16, 0, -8, 0, 1, 0, 0, -2, 1,
              -13, 0, 7, 0, -1, 0, 2, 2, 1, -10, 0, 5, 0, 1, 1, 0, -2, 0, -7, 0,
              0, 0, 0, 1, 2, 0, 2, 7, 0, -3, 0, 0, -1, 2, 0, 2, -7, 0, 3, 0, 1,
              0, 2, 2, 2, -8, 0, 3, 0, 1, 0, 0, 2, 0, 6, 0, 0, 0, 2, 0, 2, -2,
              2, 6, 0, -3, 0, 0, 0, 0, 2, 1, -6, 0, 3, 0, 0, 0, 2, 2, 1, -7, 0,
              3, 0, 1, 0, 2, -2, 1, 6, 0, -3, 0, 0, 0, 0, -2, 1, -5, 0, 3, 0, 1,
              -1, 0, 0, 0, 5, 0, 0, 0, 2, 0, 2, 0, 1, -5, 0, 3, 0, 0, 1, 0, -2,
              0, -4, 0, 0, 0, 1, 0, -2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, -4, 0,
              0, 0, 1, 1, 0, 0, 0, -3, 0, 0, 0, 1, 0, 2, 0, 0, 3, 0, 0, 0, 1,
              -1, 2, 0, 2, -3, 0, 1, 0, -1, -1, 2, 2, 2, -3, 0, 1, 0, -2, 0, 0,
              0, 1, -2, 0, 1, 0, 3, 0, 2, 0, 2, -3, 0, 1, 0, 0, -1, 2, 2, 2, -3,
              0, 1, 0, 1, 1, 2, 0, 2, 2, 0, -1, 0, -1, 0, 2, -2, 1, -2, 0, 1, 0,
              2, 0, 0, 0, 1, 2, 0, -1, 0, 1, 0, 0, 0, 2, -2, 0, 1, 0, 3, 0, 0,
              0, 0, 2, 0, 0, 0, 0, 0, 2, 1, 2, 2, 0, -1, 0, -1, 0, 0, 0, 2, 1,
              0, -1, 0, 1, 0, 0, -4, 0, -1, 0, 0, 0, -2, 0, 2, 2, 2, 1, 0, -1,
              0, -1, 0, 2, 4, 2, -2, 0, 1, 0, 2, 0, 0, -4, 0, -1, 0, 0, 0, 1, 1,
              2, -2, 2, 1, 0, -1, 0, 1, 0, 2, 2, 1, -1, 0, 1, 0, -2, 0, 2, 4, 2,
              -1, 0, 1, 0, -1, 0, 4, 0, 2, 1, 0, 0, 0, 1, -1, 0, -2, 0, 1, 0, 0,
              0, 2, 0, 2, -2, 1, 1, 0, -1, 0, 2, 0, 2, 2, 2, -1, 0, 0, 0, 1, 0,
              0, 2, 1, -1, 0, 0, 0, 0, 0, 4, -2, 2, 1, 0, 0, 0, 3, 0, 2, -2, 2,
              1, 0, 0, 0, 1, 0, 2, -2, 0, -1, 0, 0, 0, 0, 1, 2, 0, 1, 1, 0, 0,
              0, -1, -1, 0, 2, 1, 1, 0, 0, 0, 0, 0, -2, 0, 1, -1, 0, 0, 0, 0, 0,
              2, -1, 2, -1, 0, 0, 0, 0, 1, 0, 2, 0, -1, 0, 0, 0, 1, 0, -2, -2,
              0, -1, 0, 0, 0, 0, -1, 2, 0, 1, -1, 0, 0, 0, 1, 1, 0, -2, 1, -1,
              0, 0, 0, 1, 0, -2, 2, 0, -1, 0, 0, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0,
              0, 0, 2, 4, 2, -1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0,
            ],
            ss: [],
            cc: [],
          },
          calc: (e, t) => {
            var n,
              i,
              a,
              o,
              r,
              s,
              c,
              l,
              u = [],
              h = [];
            const d = j.getObject(e),
              p = new b(e.julian);
            for (
              s = p.eps + d.nuto,
                n = Math.cos(s),
                i = Math.sin(s),
                r = Math.sin(d.nuto),
                a = Math.cos(d.nutl),
                o = Math.sin(d.nutl),
                h[0] = a * t[0] - o * p.coseps * t[1] - o * p.sineps * t[2],
                h[1] =
                  o * n * t[0] +
                  (a * p.coseps * n + p.sineps * i) * t[1] -
                  (r + (1 - a) * p.sineps * n) * t[2],
                h[2] =
                  o * i * t[0] +
                  (r + (a - 1) * i * p.coseps) * t[1] +
                  (a * p.sineps * i + p.coseps * n) * t[2],
                c = 0;
              c < 3;
              c++
            )
              u[c] = h[c] - t[c];
            for (l = y.showcor(t, u), c = 0; c < 3; c++) t[c] = h[c];
            return l;
          },
          getObject: (e) => j.calclo(e, { ...j.nutationObject }),
          calclo: (e, t) => {
            var n,
              i,
              a,
              o,
              r,
              s,
              c,
              l,
              h,
              d,
              p,
              m,
              g,
              f,
              M,
              v,
              D,
              b,
              _,
              A,
              x,
              L,
              C;
            if (t.jdnut.julian == e.julian) return 0;
            (t.jdnut = e),
              (o = (a = y.timeInJulianCenturies(e.julian)) * a),
              (r = a / 10),
              (d =
                (y.mods3600(-6962890.539 * a + 450160.28) +
                  (0.008 * a + 7.455) * o) *
                u),
              (c =
                (y.mods3600(129596581.224 * a + 1287099.804) -
                  (0.012 * a + 0.577) * o) *
                u),
              (s =
                (y.mods3600(1717915922.633 * a + 485866.733) +
                  (0.064 * a + 31.31) * o) *
                u),
              (l =
                (y.mods3600(1739527263.137 * a + 335778.877) +
                  (0.011 * a - 13.257) * o) *
                u),
              (h =
                (y.mods3600(1602961601.328 * a + 1072261.307) +
                  (0.019 * a - 6.891) * o) *
                u),
              (t = j.sscc(t, 0, s, 3)),
              (t = j.sscc(t, 1, c, 2)),
              (t = j.sscc(t, 2, l, 4)),
              (t = j.sscc(t, 3, h, 4)),
              (v = 0),
              (D = 0),
              (C = (t = j.sscc(t, 4, d, 2)).nt);
            var S = 0;
            for (b = 0; b < 105; b++) {
              for (x = 0, g = 0, f = 0, L = 0; L < 5; L++)
                (_ = C[S++]) &&
                  ((A = _),
                  _ < 0 && (A = -A),
                  (m = t.ss[L][A - 1]),
                  _ < 0 && (m = -m),
                  (p = t.cc[L][A - 1]),
                  0 == x
                    ? ((f = m), (g = p), (x = 1))
                    : ((M = m * g + p * f), (g = p * g - m * f), (f = M)));
              (n = C[S++]),
                0 != (A = C[S++]) && (n += r * A),
                (i = C[S++]),
                0 != (A = C[S++]) && (i += r * A),
                (v += n * f),
                (D += i * g);
            }
            return (
              (v += (-1742 * r - 171996) * t.ss[4][0]),
              (D += (89 * r + 92025) * t.cc[4][0]),
              (t.nutl = 1e-4 * u * v),
              (t.nuto = 1e-4 * u * D),
              t
            );
          },
          sscc: (e, t, n, i) => {
            var a, o, r, s, c, l;
            for (
              o = Math.sin(n),
                a = Math.cos(n),
                e.ss[t] = [],
                e.cc[t] = [],
                e.ss[t][0] = o,
                e.cc[t][0] = a,
                s = 2 * o * a,
                r = a * a - o * o,
                e.ss[t][1] = s,
                e.cc[t][1] = r,
                l = 2;
              l < i;
              l++
            )
              (c = o * r + a * s),
                (r = a * r - o * s),
                (s = c),
                (e.ss[t][l] = s),
                (e.cc[t][l] = r);
            return e;
          },
        },
        U = {
          calc: (e, t) => {
            var n, i, a, o, r;
            (o = e.universalJulian),
              (n = Math.floor(o)),
              (i = e.julian - n) < 0.5
                ? ((n -= 0.5), (i += 0.5))
                : ((n += 0.5), (i -= 0.5)),
              (i *= 86400),
              (r = y.timeInJulianCenturies(n));
            const s = j.getObject(e),
              l = new b(e.julian);
            return (
              (a =
                (a =
                  (((-2e-6 * r - 3e-7) * r + 0.0927701) * r + 8640184.7942063) *
                    r +
                  24110.54841) +
                ((((-8e-6 * r - 9e-7) * r + 0.1855402) * r + 8640184.7942063) /
                  315576e4 +
                  1) *
                  i +
                240 * c * s.nutl * l.coseps +
                240 * t),
              (a -= 86400 * Math.floor(a / 86400))
            );
          },
        },
        B = {
          calc: (e, t) => {
            var n, i, a, o, r, c, l, u;
            if (e < -2 || e >= 90) return 0;
            if (e > 15)
              return (r =
                (0.00452 * t.atpress) / ((273 + t.attemp) * Math.tan(s * e)));
            for (
              n = e,
                r = 0,
                c = (t.atpress - 80) / 930,
                l = 0.0048 * (t.attemp - 10),
                i = n,
                a = r,
                u = 0;
              u < 4;
              u++
            )
              (o = n + 7.31 / (n + 4.4)),
                (i =
                  (r = ((o = 1 / Math.tan(s * o)) * c) / (60 + l * (o + 39))) -
                  a -
                  (o = n - i)),
                (o = 0 != o && 0 != i ? n - (o * (e + r - n)) / i : e + r),
                (i = n),
                (a = r),
                (n = o);
            return r;
          },
        },
        q = {
          r_trnsit: 0,
          r_rise: 0,
          r_set: 0,
          elevation_threshold: 0,
          semidiameter: 0,
          f_trnsit: 0,
          southern_hemisphere: 0,
          t_rise: 0,
          t_trnsit: 0,
          elevation_trnsit: 0,
          t_set: 0,
          STEP_SCALE: 0.5,
          calc: function (e, t, n, i, a, o) {
            var r, l, u, d, p, m, g, f, M, v;
            for (
              o = o || {},
                this.f_trnsit = 0,
                this.r_rise = -10,
                this.r_set = -10,
                r = a.glat * s,
                M = Math.cos(r),
                v = Math.sin(r),
                g = Math.cos(n),
                f = Math.sin(n),
                this.southern_hemisphere = v < 0 ? 1 : 0,
                r = Math.floor(e.universalJulian - 0.5) + 0.5,
                r = (e.universalJulian - r) * h,
                l = t;
              l < -Math.PI;

            )
              l += h;
            for (; l > Math.PI; ) l -= h;
            if (
              ((m = l),
              (l /= -i.locals.dradt / h + 1.00273790934),
              (this.r_trnsit = r - l),
              (o.approxLocalMeridian = y.hms(this.r_trnsit)),
              (o.UTdate = this.r_trnsit / h),
              0 != M && 0 != g)
            ) {
              switch (i.key) {
                case "sun":
                  (d = -0.014543897651582658),
                    (this.semidiameter = 0.2666666666666667),
                    (this.elevation_threshold = -0.8333333333333333);
                  break;
                case "moon":
                  (d = 1 / (23454.78 * i.position.polar[2])),
                    (p = Math.asin(d)),
                    (this.semidiameter = 0.2725076 * p + 3.874e-7),
                    (d = -0.009890199094634533 - this.semidiameter + p),
                    (this.semidiameter *= c),
                    (this.elevation_threshold = -34 / 60 - this.semidiameter),
                    (d = Math.sin(d));
                  break;
                default:
                  (d = -0.009890037858741148),
                    (this.semidiameter = 0),
                    (this.elevation_threshold = -0.5666666666666667);
              }
              (l = (d - v * f) / (M * g)) < 1 &&
                l > -1 &&
                ((this.f_trnsit = 1),
                (u = -i.locals.ddecdt * (v + -0.009890037858741148 * f)),
                (u /= h * M * g * g),
                (u /= Math.sqrt(1 - l * l)),
                (l = Math.acos(l)),
                (p = -i.locals.dradt / h + 1.00273790934),
                (this.r_rise = r - ((m + l) * (1 + u)) / p),
                (this.r_set = r - ((m - l) * (1 - u)) / p),
                (o.dApproxRiseUT = this.r_rise),
                (o.dApproxSetUT = this.r_set),
                (o.approxRiseUT = y.hms(this.r_rise)),
                (o.approxSetUT = y.hms(this.r_set)));
            }
            return o;
          },
          iterator: function (e, t) {
            var n = { julian: e };
            $moshier.toGregorian(n),
              $moshier.julian.calc(n),
              $moshier.delta.calc(n),
              $moshier.kepler(n, $moshier.body.earth),
              t();
          },
          iterateTransit: function (e, t) {
            var n,
              i,
              a,
              o,
              r,
              s,
              c,
              l,
              u = !1;
            (t = t || {}),
              (l = 0),
              (o = $moshier.body.earth.position.date.universalJulian);
            do {
              if (
                ((a = o),
                (n = Math.floor(a - 0.5) + 0.5),
                this.iterator(a, e),
                (o = n + this.r_trnsit / h),
                ++l > 10)
              )
                break;
            } while (Math.abs(o - a) > 1e-4);
            if (!(l > 10)) {
              if (
                ((this.t_trnsit = o),
                (this.elevation_trnsit = $moshier.altaz.elevation),
                (c = this.r_trnsit),
                (s = this.r_set),
                0 == this.f_trnsit)
              )
                (this.t_rise = -1),
                  (this.t_set = -1),
                  $moshier.altaz.elevation > this.elevation_threshold &&
                    this.noRiseSet(this.t_trnsit, e);
              else {
                (i = n),
                  (o = n + this.r_rise / h) >= this.t_trnsit &&
                    (o = (n -= 1) + this.r_rise / h),
                  (l = 0);
                do {
                  (a = o),
                    this.iterator(a, e),
                    0 == this.f_trnsit
                      ? ((this.t_rise = -1),
                        (this.t_set = -1),
                        this.noRiseSet(this.t_trnsit, e),
                        (u = !0))
                      : ++l > 10
                      ? ((this.f_trnsit = 0), (u = !0))
                      : (o = n + this.r_rise / h) > this.t_trnsit &&
                        (o = (n -= 1) + this.r_rise / h);
                } while (Math.abs(o - a) > 1e-4);
                if (!u) {
                  (u = !1),
                    (r = this.r_rise),
                    (this.t_rise = o),
                    (n = i),
                    (this.r_set = s),
                    (o = n + this.r_set / h) <= this.t_trnsit &&
                      (o = (n += 1) + this.r_set / h),
                    (l = 0);
                  do {
                    (a = o),
                      this.iterator(a, e),
                      0 == this.f_trnsit
                        ? ((this.t_rise = -1),
                          (this.t_set = -1),
                          this.noRiseSet(this.t_trnsit, e),
                          (u = !0))
                        : ++l > 10
                        ? ((this.f_trnsit = 0), (u = !0))
                        : (o = n + this.r_set / h) < this.t_trnsit &&
                          (o = (n += 1) + this.r_set / h);
                  } while (fabs(o - a) > 1e-4);
                  u ||
                    ((this.t_set = o), (this.r_trnsit = c), (this.r_rise = r));
                }
              }
              (t.localMeridianTransit = $moshier.julian.toGregorian({
                julian: this.t_trnsit,
              })),
                -1 != this.t_rise &&
                  (t.riseDate = $moshier.julian.toGregorian({
                    julian: this.t_rise,
                  })),
                -1 != this.t_set &&
                  ((t.setDate = $moshier.julian.toGregorian({
                    julian: this.t_set,
                  })),
                  -1 != this.t_rise &&
                    (a = this.t_set - this.t_rise) > 0 &&
                    a < 1 &&
                    (t.visibleHaours = 24 * a)),
                Math.abs(
                  $moshier.body.earth.position.date.julian - this.t_rise
                ) > 0.5 &&
                  Math.abs(
                    $moshier.body.earth.position.date.julian - this.t_trnsit
                  ) > 0.5 &&
                  Math.abs(
                    $moshier.body.earth.position.date.julian - this.t_set
                  ) > 0.5 &&
                  (t.wrongEventDate = !0);
            }
            return (this.f_trnsit = 1), t;
          },
          noRiseSet: function (e, t) {
            var n,
              i,
              a,
              o,
              r,
              s,
              c = this.t_trnsit,
              l = this.elevation_trnsit;
            for (a = c, r = -1, s = o = l, n = c - 0.25, i = 1; i > 0.005; ) {
              if (
                (this.iterator(n, t),
                !($moshier.altaz.elevation > this.elevation_threshold))
              ) {
                (r = n), (s = $moshier.altaz.elevation);
                break;
              }
              (a = n),
                (o = $moshier.altaz.elevation),
                (i = azimuth / 360),
                azimuth < 180
                  ? 0 == this.southern_hemisphere
                    ? (n -= this.STEP_SCALE * i)
                    : (n += this.STEP_SCALE * i)
                  : ((i = 1 - i),
                    0 == this.southern_hemisphere
                      ? (n += this.STEP_SCALE * i)
                      : (n -= this.STEP_SCALE * i));
            }
            for (
              $moshier.altaz.elevation > this.elevation_threshold
                ? (this.t_rise = -1)
                : ((this.t_rise = this.searchHalve(r, s, a, o, t)),
                  (this.f_trnsit = 1)),
                a = c,
                r = -1,
                s = o = l,
                n = c + 0.25,
                i = 1;
              i > 0.005;

            ) {
              if (
                (this.iterator(n, t),
                !($moshier.altaz.elevation > this.elevation_threshold))
              ) {
                (r = n), (s = $moshier.altaz.elevation);
                break;
              }
              (a = n),
                (o = $moshier.altaz.elevation),
                (i = $moshier.altaz.azimuth / 360),
                $moshier.altaz.azimuth < 180
                  ? 0 == this.southern_hemisphere
                    ? (n -= this.STEP_SCALE * i)
                    : (n += this.STEP_SCALE * i)
                  : ((i = 1 - i),
                    0 == this.southern_hemisphere
                      ? (n += this.STEP_SCALE * i)
                      : (n -= this.STEP_SCALE * i));
            }
            $moshier.altaz.elevation > this.elevation_threshold
              ? (this.t_set = -1)
              : ((this.t_set = search_halve(
                  n,
                  elevation,
                  this.t_trnsit,
                  this.elevation_trnsit,
                  t
                )),
                (this.f_trnsit = 1));
          },
          searchHalve: function (e, t, n, i, a) {
            var o, r, s, c;
            for (
              o = i - this.elevation_threshold,
                t - this.elevation_threshold,
                s = 0.5 * (e + n);
              Math.abs(n - e) > 1e-5;

            )
              (s = 0.5 * (e + n)),
                this.iterator(s, a),
                (r =
                  (c = $moshier.altaz.elevation) - this.elevation_threshold) *
                  o >
                0
                  ? ((i = c), (n = s), (o = r))
                  : ((t = c), (e = s), r);
            return s;
          },
        },
        O = {
          azimuth: 0,
          elevation: 0,
          refracted_elevation: 0,
          calc: (e, t, n, i, a) => {
            var o, r, u, d, p, m, g, f, M, v, D, b, _, A, x, L, C, S;
            for (
              a = a || {},
                g = e[0],
                o = e[1],
                f = e[2],
                d = (M = (U.calc(t, i.tlong) * s) / 240) - g,
                a.dLocalApparentSiderialTime = M,
                a.localApparentSiderialTime = y.hms(M),
                a.diurnalAberation = P.aberration(M, g, o, i),
                g = a.diurnalAberation.ra,
                o = a.diurnalAberation.dec,
                d = M - g,
                a.transit = q.calc(t, d, o, n, i),
                a.diurnalParallax = P.parallax(M, g, o, f, i),
                g = a.diurnalParallax.ra,
                o = a.diurnalParallax.dec,
                r = Math.cos(o),
                u = Math.sin(o),
                d = M - g,
                p = Math.cos(d),
                m = Math.sin(d),
                L = s * i.glat,
                A = -r * m,
                x = u * (b = Math.cos(L)) - r * p * (_ = Math.sin(L)),
                D = c * y.zatan2(x, A),
                v = u * _ + r * p * b,
                v = c * Math.asin(v),
                O.azimuth = D,
                O.elevation = v,
                v += x = B.calc(v, i),
                O.refracted_elevation = v,
                C = Math.sin(s * v),
                L = Math.cos(s * v),
                S = Math.cos(s * D),
                m = -L * Math.sin(s * D),
                p = C * b - L * S * _,
                u = C * _ + L * S * b,
                d = y.zatan2(p, m),
                C = g,
                S = o,
                o = Math.asin(u),
                C = (g = M - d) - C;
              C < -Math.PI;

            )
              C += h;
            for (; C > Math.PI; ) C -= h;
            return (
              (C = (l * C) / 15),
              (S = l * (o - S)),
              (a.atmosphericRefraction = { deg: x, dRA: C, dDec: S }),
              (a.topocentric = {
                altitude: v,
                azimuth: D,
                ra: g,
                dec: o,
                dRA: y.hms(g),
                dDec: y.dms(o),
              }),
              a
            );
          },
        },
        k = {
          constel: [
            "And Andromedae",
            "Ant Antliae",
            "Aps Apodis",
            "Aql Aquilae",
            "Aqr Aquarii",
            "Ari Arietis",
            "Ara Arae",
            "Aur Aurigae",
            "Boo Bootis",
            "Cae Caeli",
            "Cam Camelopardalis",
            "Can Cancri",
            "Cap Capricorni",
            "Car Carinae",
            "Cas Cassiopeiae",
            "Cen Centauri",
            "Cep Cephei",
            "Cet Ceti",
            "Cha Chamaeleontis",
            "Cir Circini",
            "CMa Canis Majoris",
            "CMi Canis Minoris",
            "Cnc Cancri",
            "Col Columbae",
            "Com Comae Berenices",
            "CrA Coronae Austrinae",
            "CrB Coronae Borealis",
            "Crt Crateris",
            "Cru Crucis",
            "Crv Corvi",
            "CVn Canum Venaticorum",
            "Cyg Cygni",
            "Del Delphini",
            "Dor Doradus",
            "Dra Draconis",
            "Equ Equulei",
            "Eri Eridani",
            "For Fornacis",
            "Gem Geminorum",
            "Gru Gruis",
            "Her Herculis",
            "Hor Horologii",
            "Hya Hydrae",
            "Hyi Hydri",
            "Ind Indi",
            "Lac Lacertae",
            "Leo Leonis",
            "Lep Leporis",
            "Lib Librae",
            "LMi Leonis Minoris",
            "Lup Lupi",
            "Lyn Lyncis",
            "Lyr Lyrae",
            "Men Mensae",
            "Mic Microscopii",
            "Mon Monocerotis",
            "Mus Muscae",
            "Nor Normae",
            "Oct Octantis",
            "Oph Ophiuchi",
            "Ori Orionis",
            "Pav Pavonis",
            "Peg Pegasi",
            "Per Persei",
            "Phe Phoenicis",
            "Pic Pictoris",
            "PsA Piscis Austrini",
            "Psc Piscium",
            "Pup Puppis",
            "Pyx Pyxidis",
            "Ret Reticuli",
            "Scl Sculptoris",
            "Sco Scorpii",
            "Sct Scuti",
            "Ser Serpentis",
            "Sex Sextantis",
            "Sge Sagittae",
            "Sgr Sagittarii",
            "Tau Tauri",
            "Tel Telescopii",
            "TrA Trianguli Australis",
            "Tri Trianguli",
            "Tuc Tucanae",
            "UMa Ursae Majoris",
            "UMi Ursae Minoris",
            "Vel Velorum",
            "Vir Virginis",
            "Vol Volantis",
            "Vul Vulpeculae",
          ],
          greek: [
            "alpha",
            "beta",
            "gamma",
            "delta",
            "epsilon",
            "zeta",
            "eta",
            "theta",
            "iota",
            "kappa",
            "lambda",
            "mu",
            "nu",
            "xi",
            "omicron",
            "pi",
            "rho",
            "sigma",
            "tau",
            "upsilon",
            "phi",
            "chi",
            "psi",
            "omega",
          ],
          bndries: [
            0, 86400, 316800, 84, 28800, 52200, 311400, 84, 75600, 82800,
            310200, 84, 64800, 75600, 309600, 84, 0, 28800, 306e3, 16, 33e3,
            38400, 295200, 10, 0, 18e3, 288e3, 16, 38400, 52200, 288e3, 10,
            63e3, 64800, 288e3, 84, 72600, 75600, 288e3, 34, 0, 12630, 277200,
            16, 41400, 48900, 277200, 10, 59520, 63e3, 27e4, 84, 72600, 74400,
            27e4, 16, 28680, 33e3, 264600, 10, 33e3, 40800, 264600, 34, 46800,
            59520, 252e3, 84, 11160, 12300, 244800, 14, 73500, 74400, 241200,
            34, 40800, 43200, 239400, 34, 0, 1200, 237600, 16, 50400, 56400,
            237600, 84, 84900, 86400, 237600, 16, 43200, 48600, 230400, 34,
            48600, 51900, 226800, 34, 83400, 84900, 226800, 16, 21960, 25200,
            223200, 10, 72e3, 73500, 221400, 34, 73932, 74160, 219300, 16,
            25200, 28680, 216e3, 10, 28680, 30300, 216e3, 83, 71160, 72e3,
            214200, 34, 72e3, 73932, 214200, 16, 82320, 83400, 212700, 16, 0,
            8760, 210600, 14, 69900, 71160, 208800, 34, 6120, 6870, 207e3, 14,
            8760, 11160, 205200, 14, 11160, 11400, 205200, 10, 80340, 82320,
            202500, 16, 18e3, 21960, 201600, 10, 50520, 51900, 199800, 83,
            51900, 69900, 199800, 34, 11400, 12e3, 198e3, 10, 79680, 80340,
            198e3, 16, 74160, 79080, 197400, 16, 0, 6120, 194400, 14, 21960,
            23400, 194400, 51, 43500, 48600, 190800, 83, 54900, 56700, 190800,
            34, 79080, 79680, 189900, 16, 12e3, 18e3, 189e3, 10, 82320, 84e3,
            189e3, 14, 56700, 61200, 185400, 34, 7350, 9060, 181800, 63, 61200,
            65640, 181800, 34, 0, 4920, 18e4, 14, 4920, 6e3, 18e4, 63, 23400,
            24480, 18e4, 51, 84e3, 86400, 18e4, 14, 48600, 50520, 174600, 83, 0,
            4020, 172800, 14, 84900, 86400, 172800, 14, 65430, 65640, 171e3, 40,
            65640, 68700, 171e3, 34, 68700, 69e3, 171e3, 31, 6e3, 7350, 169200,
            63, 30300, 33e3, 169200, 83, 600, 3120, 165600, 14, 43200, 43500,
            162e3, 83, 24480, 26520, 160200, 51, 78870, 79080, 158400, 31,
            78750, 78870, 157500, 31, 69e3, 69840, 156600, 31, 33e3, 36600,
            151200, 83, 36600, 38820, 144e3, 83, 55560, 56700, 144e3, 8, 56700,
            58800, 144e3, 40, 33300, 34500, 143100, 51, 0, 9060, 132300, 0,
            9060, 9240, 132300, 63, 69690, 69840, 131400, 52, 16200, 16890,
            129600, 63, 78240, 78750, 129600, 31, 78750, 79200, 129600, 45,
            23520, 26520, 127800, 7, 26520, 27900, 127800, 51, 0, 7200, 126e3,
            0, 79200, 82140, 126e3, 45, 82140, 82320, 124200, 45, 82320, 84600,
            124200, 0, 9240, 9780, 122400, 63, 38820, 39600, 122400, 83, 43200,
            44400, 122400, 30, 27900, 33300, 120600, 51, 33300, 35580, 120600,
            49, 2580, 5070, 118800, 0, 54660, 55560, 118800, 8, 84600, 85500,
            115500, 0, 44400, 47700, 115200, 30, 85500, 86400, 112800, 0, 50250,
            50520, 110700, 30, 8700, 9780, 110400, 81, 9780, 16200, 110400, 63,
            16200, 17100, 108e3, 7, 65430, 69690, 108e3, 52, 39600, 43200,
            104400, 83, 70800, 75300, 104400, 31, 17100, 21180, 102600, 7,
            35580, 37800, 102600, 49, 47700, 50250, 102600, 30, 0, 240, 100800,
            0, 5070, 6e3, 100800, 81, 21180, 23520, 100800, 7, 28380, 28800,
            100800, 38, 75300, 78240, 100800, 31, 69330, 70800, 99e3, 31, 6900,
            8700, 98100, 81, 58200, 58800, 97200, 26, 54300, 54660, 93600, 8,
            54660, 58200, 93600, 26, 66120, 67920, 93600, 52, 38700, 39600,
            91800, 49, 67920, 69330, 91800, 52, 6e3, 6900, 9e4, 81, 2580, 3060,
            85500, 67, 37800, 38700, 84600, 49, 76500, 77100, 84600, 88, 20520,
            21180, 82200, 78, 240, 510, 79200, 0, 57300, 57720, 79200, 74,
            21180, 22380, 77400, 38, 71400, 72900, 76500, 88, 67920, 69300,
            75900, 88, 510, 3060, 75600, 0, 72900, 74040, 73800, 88, 28110,
            28380, 72e3, 38, 74040, 76500, 70200, 88, 69300, 71400, 69e3, 88,
            11820, 12120, 68400, 5, 67920, 68400, 66600, 76, 20520, 20760,
            64800, 60, 22380, 22710, 63e3, 38, 68400, 71400, 58200, 76, 17880,
            19200, 57600, 78, 57300, 57900, 57600, 40, 71400, 72900, 56700, 76,
            16620, 17880, 55800, 78, 19200, 20160, 55800, 78, 46200, 48600,
            54e3, 24, 62100, 65700, 51600, 40, 42720, 46200, 50400, 24, 27e3,
            28110, 48600, 38, 60300, 62100, 46200, 40, 0, 510, 45e3, 62, 20160,
            20760, 45e3, 78, 25200, 27e3, 45e3, 38, 76020, 76800, 45e3, 62,
            22710, 24960, 43200, 38, 65700, 67920, 43200, 40, 75150, 75780,
            42600, 32, 75780, 76020, 42600, 62, 41460, 42720, 39600, 46, 22470,
            22710, 36e3, 60, 24960, 25200, 36e3, 38, 28110, 28530, 36e3, 22,
            85800, 86400, 36e3, 62, 6e3, 11820, 35700, 5, 72510, 73080, 30600,
            32, 48600, 54300, 28800, 8, 81900, 85800, 27e3, 62, 28530, 33300,
            25200, 22, 33300, 38700, 25200, 46, 65700, 67184, 22500, 59, 67184,
            67920, 22500, 3, 75e3, 75150, 21600, 32, 25200, 25260, 19800, 21,
            65700, 66330, 16200, 74, 57900, 60300, 14400, 40, 65700, 66330,
            10800, 59, 77280, 78e3, 9900, 62, 0, 7200, 7200, 67, 66900, 67920,
            7200, 74, 73080, 75e3, 7200, 32, 75e3, 76800, 7200, 35, 76800,
            77280, 7200, 62, 79200, 81900, 7200, 62, 78e3, 79200, 6300, 62,
            25260, 25920, 5400, 21, 12900, 16620, 0, 78, 16620, 16800, 0, 60,
            25920, 29100, 0, 21, 52800, 54300, 0, 86, 64200, 65700, 0, 59, 9540,
            11820, -6300, 17, 11820, 12900, -6300, 78, 54300, 58560, -11700, 74,
            16800, 18300, -14400, 60, 21e3, 22470, -14400, 60, 64200, 64680,
            -14400, 74, 65700, 66900, -14400, 74, 66900, 67920, -14400, 3,
            81900, 85800, -14400, 67, 38700, 41460, -21600, 46, 41460, 42600,
            -21600, 86, 0, 1200, -25200, 67, 85800, 86400, -25200, 67, 51300,
            52800, -28800, 86, 57300, 58560, -28800, 59, 72e3, 73920, -32400, 3,
            76800, 78720, -32400, 4, 61800, 64680, -36e3, 59, 21e3, 29100,
            -39600, 55, 17700, 18300, -39600, 36, 18300, 21e3, -39600, 60,
            29100, 30120, -39600, 42, 34500, 38700, -39600, 75, 42600, 46200,
            -39600, 86, 63300, 63600, -42e3, 59, 67920, 72e3, -43320, 3, 17400,
            17700, -52200, 36, 73920, 76800, -54e3, 4, 61800, 65700, -57600, 74,
            65700, 67920, -57600, 73, 30120, 30900, -61200, 42, 58560, 58950,
            -65700, 59, 30900, 32700, -68400, 42, 38700, 39e3, -68400, 27,
            58560, 58950, -69300, 59, 56400, 57300, -72e3, 48, 45300, 46200,
            -79200, 29, 46200, 51300, -79200, 86, 32700, 35100, -86400, 42, 6e3,
            9540, -87780, 17, 9540, 13500, -87780, 36, 39e3, 42600, -88200, 27,
            42600, 45300, -88200, 29, 51300, 53700, -88200, 48, 58560, 60300,
            -88500, 59, 0, 6e3, -91800, 17, 76800, 78720, -91800, 12, 78720,
            85800, -91800, 4, 85800, 86400, -91800, 17, 35100, 36900, -95400,
            42, 16920, 17400, -98100, 36, 17400, 22020, -98100, 47, 72e3, 76800,
            -100800, 12, 36900, 38100, -105e3, 42, 45300, 53700, -106200, 42,
            53700, 56400, -106200, 48, 56400, 57600, -106200, 72, 16500, 16920,
            -108e3, 36, 60300, 63360, -108e3, 59, 63360, 64200, -108e3, 77,
            38100, 39e3, -112200, 42, 22020, 26520, -118800, 20, 44100, 45300,
            -118800, 42, 39e3, 44100, -126e3, 42, 12600, 13500, -129600, 37,
            30120, 33720, -132300, 69, 15360, 16500, -133200, 36, 64200, 69e3,
            -133200, 77, 76800, 82800, -133200, 66, 82800, 84e3, -133200, 71,
            10800, 12600, -142500, 37, 33720, 39600, -143100, 1, 0, 6e3, -144e3,
            71, 6e3, 10800, -144e3, 37, 13920, 15360, -144e3, 36, 84e3, 86400,
            -144e3, 71, 51e3, 53700, -151200, 15, 56400, 57600, -151200, 50,
            57600, 59115, -151200, 72, 17400, 18e3, -154800, 9, 18e3, 23700,
            -154800, 23, 28800, 30120, -154800, 68, 12300, 13920, -158400, 36,
            59115, 64200, -163800, 72, 64200, 69e3, -163800, 25, 69e3, 73200,
            -163800, 77, 73200, 76800, -163800, 54, 10800, 12300, -165600, 36,
            16200, 17400, -167400, 9, 55200, 56400, -172800, 50, 0, 8400,
            -173400, 64, 9600, 10800, -176400, 36, 14700, 15360, -176400, 41,
            15360, 16200, -176400, 9, 76800, 79200, -18e4, 39, 21600, 28800,
            -182700, 68, 28800, 29400, -182700, 85, 8700, 9600, -183600, 36,
            13800, 14700, -183600, 41, 0, 6600, -185400, 64, 21600, 22200,
            -189e3, 13, 29400, 30420, -190800, 85, 12600, 13800, -191400, 41,
            13800, 14400, -191400, 33, 0, 5700, -192600, 64, 7800, 8700,
            -194400, 36, 16200, 18e3, -194400, 65, 54180, 55200, -194400, 50,
            30420, 31800, -196200, 85, 22200, 23400, -198e3, 13, 42600, 46200,
            -198e3, 15, 51e3, 54180, -198e3, 50, 54180, 55200, -198e3, 57,
            14400, 15600, -203400, 33, 31800, 39600, -203400, 85, 39600, 40500,
            -203400, 15, 63e3, 64800, -205200, 6, 64800, 73200, -205200, 79,
            79200, 84e3, -205200, 39, 11520, 12600, -207e3, 41, 18e3, 19800,
            -207e3, 65, 23400, 24600, -208800, 13, 0, 4800, -210600, 64, 4800,
            7800, -210600, 36, 84e3, 86400, -210600, 64, 15600, 16500, -212400,
            33, 55200, 59115, -216e3, 57, 73200, 76800, -216e3, 44, 19800,
            21600, -219600, 65, 54600, 55200, -219600, 19, 59115, 59700,
            -219600, 6, 53700, 54600, -228900, 19, 59700, 60300, -228900, 6,
            21600, 24600, -230400, 65, 24600, 32520, -230400, 13, 40500, 42600,
            -230400, 15, 42600, 46200, -230400, 28, 46200, 52320, -230400, 15,
            48600, 49200, -234e3, 19, 60300, 60600, -234e3, 6, 7800, 11520,
            -243e3, 41, 11520, 16500, -243e3, 70, 53100, 53700, -243e3, 19,
            60600, 63e3, -243e3, 6, 63e3, 64800, -243e3, 61, 79200, 84e3,
            -243e3, 82, 16500, 23700, -252e3, 33, 49200, 53100, -252e3, 19,
            53100, 61200, -252e3, 80, 0, 4800, -27e4, 82, 12600, 16500, -27e4,
            43, 23700, 32520, -27e4, 87, 32520, 40500, -27e4, 13, 40500, 49200,
            -27e4, 56, 64800, 76800, -27e4, 61, 76800, 84e3, -27e4, 44, 84e3,
            86400, -27e4, 82, 2700, 4800, -273600, 82, 0, 12600, -297e3, 43,
            27600, 49200, -297e3, 18, 49200, 64800, -297e3, 2, 12600, 27600,
            -306e3, 53, 0, 86400, -324e3, 58,
          ],
          calc: (e, t) => {
            var n,
              i,
              a,
              o,
              r,
              s = [];
            for (n = 0; n < 3; n++) s[n] = e[n];
            for (
              s = C.calc(s, t.julian, 1),
                r =
                  (s = C.calc(s, 2405889.25855, -1))[0] * s[0] +
                  s[1] * s[1] +
                  s[2] * s[2],
                r = Math.sqrt(r),
                (a = Math.atan2(s[1], s[0]) * ((3600 * c) / 15)) < 0 &&
                  (a += 86400),
                o = Math.asin(s[2] / r) * (3600 * c),
                n = 0;
              n < k.bndries.length / 4;
              n++
            )
              if (
                ((i = n << 2),
                a >= k.bndries[i] &&
                  a < k.bndries[i + 1] &&
                  o > k.bndries[i + 2])
              )
                return (i = k.bndries[i + 3]), k.constel[i];
            return k.constel[-1];
          },
        },
        R = {
          calc: (e, t, n, i, a) => {
            var o,
              r,
              s,
              c,
              l,
              u,
              h,
              d = [];
            for (a = a || {}, u = 0, h = 0; h < 3; h++)
              (o = e[h]), (d[h] = o), (u += o * o);
            (u = Math.sqrt(u)), i && (d = C.calc(d, t.julian, -1));
            let p = new b(t.julian);
            return (
              (c = d[1]),
              (l = d[2]),
              (o = d[0]),
              (r = p.coseps * c + p.sineps * l),
              (s = -p.sineps * c + p.coseps * l),
              (c = y.zatan2(o, r)),
              (l = Math.asin(s / u)),
              (n[0] = c),
              (n[1] = l),
              (n[2] = u),
              (n[3] = y.dms(n[0])),
              (n[4] = y.dms(n[1])),
              (a[0] = n[0]),
              (a[1] = n[1]),
              (a[2] = n[2]),
              (a[3] = n[3]),
              (a[4] = n[4]),
              a
            );
          },
        };
      class $ {
        constructor(e, t, n) {
          (this._body = this.calculateBody(e, t, n)),
            Object.keys(this._body).forEach((e) => {
              this[e] = this._body[e];
            }),
            (this.calculateBody = this.calculateBody.bind(this)),
            (this.motion = {});
        }
        calculateBody(e, t, n) {
          var i,
            a,
            o,
            r,
            s,
            l,
            u = [],
            h = [],
            d = [];
          for (e.position = e.position || {}, s = 0; s < 3; s++)
            u[s] = -t.position.rect[s];
          (i = t.position.polar[2]),
            (e.position.equinoxEclipticLonLat = R.calc(u, n.Date, d, 1)),
            (d[2] = i);
          let p = new E({ ...w.find((e) => "earth" === e.key) }, n.Date);
          for (s = 0; s < 2; s++)
            (r = d[2] / 173.1446327), (p = S.calc(n.Date.julian - r, p, u, d));
          for (i = d[2], s = 0; s < 3; s++)
            (a = -u[s]),
              (o = -p.position.rect[s]),
              (u[s] = a),
              (h[s] = o),
              (d[s] = o - a);
          for (
            e.position = {
              ...e.position,
              lightTime: 1440 * r,
              aberration: y.showcor(u, d),
            },
              l = y.deltap(u, h),
              e.locals.dradt = l.dr,
              e.locals.ddecdt = l.dd,
              e.locals.dradt /= r,
              e.locals.ddecdt /= r,
              u = C.calc(u, n.Date.julian, -1),
              s = 0;
            s < 3;
            s++
          )
            h[s] = u[s];
          let m = new b(n.Date.julian),
            g = j.getObject(n.Date);
          j.calc(n.Date, u),
            (e.position.constellation = k.calc(u, n.Date)),
            (e.position.apparent = y.showrd(u, d)),
            (o = m.coseps * h[1] + m.sineps * h[2]),
            (o = y.zatan2(h[0], o) + g.nutl),
            (e.position.apparentLongitude = c * o);
          var f = y.dms(o);
          return (
            (e.position.apparentLongitudeString =
              f.degree + "Â°" + f.minutes + "'" + Math.floor(f.seconds) + '"'),
            (e.position.apparentLongitude30String =
              y.mod30(f.degree) +
              "Â°" +
              f.minutes +
              "'" +
              Math.floor(f.seconds) +
              '"'),
            (e.position.geocentricDistance = -1),
            (e.position.altaz = O.calc(d, n.Date, e, n)),
            e
          );
        }
      }
      class I {
        constructor(e, t) {
          (this.jvearth = e),
            (this.vearth = this.calcVelocityEarth(e, t)),
            (this.calcVelocityEarth = this.calcVelocityEarth.bind(this));
        }
        calcVelocityEarth(e, t) {
          var n,
            i = [];
          const a = [],
            o = S.calc(e - 0.005, { ...t }, i, []);
          for (n = 0; n < 3; n++) a[n] = (o.position.rect[n] - i[n]) / 0.005;
          return a;
        }
      }
      const z = {
          calc: (e, t, n, i, a) => {
            var o,
              r,
              s,
              c,
              l,
              u,
              h = [],
              d = [];
            const p = new I(n.Date.julian, t);
            for (c = 0, l = 0, u = 0; u < 3; u++)
              (o = p.vearth[u] / 173.1446326846569),
                (d[u] = o),
                (c += o * o),
                (l += e[u] * o);
            for (
              o = (c = Math.sqrt(1 - c)) / (s = 1 + l),
                r = (1 + l / (1 + c)) / s,
                u = 0;
              u < 3;
              u++
            )
              (s = o * e[u] + r * d[u]),
                (h[u] = s),
                (i.locals.dp[u] = s - e[u]);
            for (a = a || {}, y.showcor(e, i.locals.dp, a), u = 0; u < 3; u++)
              e[u] = h[u];
            return a;
          },
        },
        G = (e) => {
          const t = y.timeInJulianCenturies(e),
            n =
              125.044555 -
              1934.1361849 * t +
              0.0020762 * Math.pow(t, 2) +
              Math.pow(t, 3) / 467410 -
              Math.pow(t, 4) / 60616e3;
          return y.mod(n, 360);
        },
        H = (e) => {
          const t = y.timeInJulianCenturies(e),
            n =
              83.353243 +
              4069.0137111 * t -
              0.0103238 * Math.pow(t, 2) -
              Math.pow(t, 3) / 80053 +
              Math.pow(t, 4) / 18999e3;
          return y.mod(n, 360);
        };
      class K {
        constructor({
          body: e,
          earthBody: t,
          observer: n,
          quarterApproximationValue: i = 1.5,
        } = {}) {
          (this.ra = 0),
            (this.dec = 0),
            (this.quarterApproximationValue = i),
            (this._body = this.calculateBody(e, t, n)),
            Object.keys(this._body).forEach((e) => {
              this[e] = this._body[e];
            }),
            (this.motion = {}),
            (this.orbit = this.calculateOrbit(n.Date.julian)),
            (this.calculateBody = this.calculateBody.bind(this)),
            (this.calcll = this.calcll.bind(this)),
            (this.calculateOrbit = this.calculateOrbit.bind(this)),
            (this.calculateMeanAscendingNode =
              this.calculateMeanAscendingNode.bind(this)),
            (this.calculateMeanDescendingNode =
              this.calculateMeanDescendingNode.bind(this));
        }
        static GetPhaseQuarterString(e) {
          switch (e) {
            case 0:
              return "New Moon";
            case 1:
              return "First Quarter";
            case 2:
              return "Full Moon";
            case 3:
              return "Last Quarter";
            default:
              throw new Error(
                `Quarter Index: ${e} not valid (must be beteen 0 - 3)`
              );
          }
        }
        static GetShapeString({ illuminatedFraction: e = 0 } = {}) {
          return e >= 0 && e < 0.5
            ? "Crescent"
            : e >= 0.5 && e < 1
            ? "Gibbous"
            : void 0;
        }
        static GetShapeDirectionString({ phaseDecimal: e = 0 } = {}) {
          return e >= 0 && e < 0.5
            ? "Waxing"
            : e >= 0.5 && e < 1
            ? "Waning"
            : void 0;
        }
        static GetWithinQuarterApproximation({
          phaseDaysBefore: e = 0,
          phaseDaysPast: t = 0,
          halfRangeLength: n = this.quarterApproximationValue,
        } = {}) {
          return (!!e && e <= n) || (!!t && t <= n);
        }
        static GetQuarterApproximationString({
          quarterIndex: e = 0,
          phaseDaysBefore: t = 0,
          phaseDaysPast: n = 0,
          halfRangeLength: i = 1.5,
        } = {}) {
          if ((!t && !n) || (t && t > i) || (n && n > i)) return;
          const a = t && t <= i ? y.mod(e + 1, 4) : y.mod(e, 4);
          return `${K.GetPhaseQuarterString(a)}`;
        }
        static GetQuarterApproximationDirectionString({
          phaseDaysBefore: e = 0,
          phaseDaysPast: t = 0,
          halfRangeLength: n = 1.5,
        } = {}) {
          return e && e <= n ? "Entering" : t && t <= n ? "Leaving" : void 0;
        }
        calculateBody(e, t, n) {
          var i,
            a,
            o,
            r,
            s,
            u,
            h,
            d = [],
            p = [],
            m = [],
            f = [],
            M = [],
            v = [];
          for (e.position = { polar: [], rect: [] }, i = 0; i < 3; i++)
            f[i] = t.position.rect[i];
          for (
            this.calcll(n.Date.julian - 0.001, M, v, e, t, n),
              a = this.ra,
              o = this.dec,
              h = v[0],
              e.position.nutation = this.calcll(
                n.Date.julian,
                M,
                v,
                e,
                t,
                n
              ).nutation,
              e.position.geometric = {
                longitude: c * e.position.polar[0],
                latitude: c * e.position.polar[1],
                distance: c * e.position.polar[2],
              },
              e.locals.dradt = this.ra - a,
              e.locals.dradt >= Math.PI &&
                (e.locals.dradt = e.locals.dradt - 2 * Math.PI),
              e.locals.dradt <= -Math.PI &&
                (e.locals.dradt = e.locals.dradt + 2 * Math.PI),
              e.locals.dradt = 1e3 * e.locals.dradt,
              e.locals.ddecdt = 1e3 * (this.dec - o),
              h = 1e3 * c * (v[0] - h),
              u = f[0] * f[0] + f[1] * f[1] + f[2] * f[2],
              u = Math.sqrt(u),
              i = 0;
            i < 3;
            i++
          )
            f[i] /= u;
          for (
            e.position.annualAberration = z.calc(f, t, n, e),
              f = C.calc(f, n.Date.julian, -1),
              j.calc(n.Date, f),
              i = 0;
            i < 3;
            i++
          )
            f[i] *= u;
          for (m = R.calc(f, n.Date, m, 0), i = 0; i < 3; i++)
            p[i] = f[i] + M[i];
          ((e = y.angles(M, p, f, e)).position.apparentGeocentric = {
            longitude: v[0],
            dLongitude: c * v[0],
            latitude: v[1],
            dLatitude: c * v[1],
            distance: v[2] / g,
          }),
            (e.position.apparentLongitude =
              e.position.apparentGeocentric.dLongitude);
          var D = y.dms(e.position.apparentGeocentric.longitude);
          return (
            (e.position.apparentLongitudeString =
              D.degree + "Â°" + D.minutes + "'" + Math.floor(D.seconds) + '"'),
            (e.position.apparentLongitude30String =
              y.mod30(D.degree) +
              "Â°" +
              D.minutes +
              "'" +
              Math.floor(D.seconds) +
              '"'),
            (e.position.geocentricDistance = v[2] / g),
            (r = g / v[2]),
            (e.position.dHorizontalParallax = Math.asin(r)),
            (e.position.horizontalParallax = y.dms(Math.asin(r))),
            (r = 0.272453 * r + 0.0799 / l),
            (e.position.dSemidiameter = r),
            (e.position.Semidiameter = y.dms(r)),
            (r = c * Math.acos(-e.locals.ep)),
            (e.position.sunElongation = r),
            (r = 0.5 * (1 + e.locals.pq)),
            (e.position.illuminatedFraction = r),
            (r = v[0] - m[0]),
            (r = y.modtp(r) * c),
            (i = Math.floor(r / 90)),
            (e.position.phaseDecimal = (r / 360 + 0.5) % 1),
            (u = v[2] / (12.3685 * 0.00257357)),
            (r -= 90 * i) > 45
              ? ((s = -(r - 90) * u), (e.position.phaseDaysBefore = s))
              : ((s = r * u), (e.position.phaseDaysPast = s)),
            (e.position.phaseDaysDistance = s),
            (i = (i + 2) % 4),
            (e.position.phaseQuarter = i),
            (e.position.phaseQuarterString = K.GetPhaseQuarterString(i)),
            (e.position.shapeString = K.GetShapeString({
              illuminatedFraction: e.position.illuminatedFraction,
            })),
            (e.position.shapeDirectionString = K.GetShapeDirectionString({
              phaseDecimal: e.position.phaseDecimal,
            })),
            (e.position.withinQuarterApproximation =
              K.GetWithinQuarterApproximation({
                quarterIndex: e.position.phaseQuarter,
                phaseDaysBefore: e.position.phaseDaysBefore,
                phaseDaysPast: e.position.phaseDaysPast,
                halfRangeLength: this.quarterApproximationValue,
              })),
            (e.position.quarterApproximationString =
              K.GetQuarterApproximationString({
                quarterIndex: e.position.phaseQuarter,
                phaseDaysBefore: e.position.phaseDaysBefore,
                phaseDaysPast: e.position.phaseDaysPast,
                halfRangeLength: this.quarterApproximationValue,
              })),
            (e.position.quarterApproximationDirectionString =
              K.GetQuarterApproximationDirectionString({
                phaseDaysBefore: e.position.phaseDaysBefore,
                phaseDaysPast: e.position.phaseDaysPast,
                halfRangeLength: this.quarterApproximationValue,
              })),
            (e.position.apparent = {
              dRA: this.ra,
              dDec: this.dec,
              ra: y.hms(this.ra),
              dec: y.dms(this.dec),
            }),
            (d[0] = this.ra),
            (d[1] = this.dec),
            (d[2] = v[2]),
            (e.position.altaz = O.calc(d, n.Date, e, n)),
            e
          );
        }
        calcll(e, t, n, i, a, o, r) {
          var c,
            l,
            u,
            h,
            d,
            p,
            m,
            f = [],
            M = [];
          r = r || {};
          const v = new b(e),
            D = L(e);
          for (
            t = x(e, t, n, D),
              i.position.polar[0] = n[0],
              i.position.polar[1] = n[1],
              i.position.polar[2] = n[2],
              n[0] -= (0.0118 * s * g) / n[2],
              c = Math.cos(n[1]),
              l = Math.sin(n[1]),
              u = Math.cos(n[0]),
              h = Math.sin(n[0]),
              t[0] = c * u,
              t[1] = v.coseps * c * h - v.sineps * l,
              t[2] = v.sineps * c * h + v.coseps * l,
              t = C.calc(t, o.Date.julian, 1),
              m = 0;
            m < 3;
            m++
          )
            (M[m] = t[m] * n[2]), (f[m] = a.position.rect[m] + M[m]);
          (i = y.angles(M, f, a.position.rect, i)),
            (t = C.calc(t, o.Date.julian, -1));
          const _ = j.getObject({ julian: o.Date.julian });
          for (
            r.nutation = j.calc({ julian: o.Date.julian }, t),
              this.ra = y.zatan2(t[0], t[1]),
              this.dec = Math.asin(t[2]),
              u = Math.cos(v.eps + _.nuto),
              h = Math.sin(v.eps + _.nuto),
              d = u * t[1] + h * t[2],
              p = -h * t[1] + u * t[2],
              n[0] = y.zatan2(t[0], d),
              n[1] = Math.asin(p),
              m = 0;
            m < 3;
            m++
          )
            t[m] *= i.locals.EO;
          return r;
        }
        calculateOrbit(e) {
          const t = {};
          return (
            (t.meanAscendingNode = y.attachApparentLongitudes({}, G(e))),
            (t.meanDescendingNode = y.attachApparentLongitudes(
              {},
              y.mod(t.meanAscendingNode.apparentLongitude - 180, 360)
            )),
            (t.meanPerigee = y.attachApparentLongitudes({}, H(e))),
            (t.meanApogee = y.attachApparentLongitudes(
              {},
              y.mod(t.meanPerigee.apparentLongitude - 180, 360)
            )),
            t
          );
        }
        calculateMeanAscendingNode(e) {
          const t = {};
          return (
            (t.apparentLongitude = G(e)),
            (t.apparentLongitudeString = y.decimalDegreesToDMSString(
              t.apparentLongitude
            )),
            (t.apparentLongitude30String = y.decimalDegreesToDMSString(
              y.mod(t.apparentLongitude, 30)
            )),
            t
          );
        }
        calculateMeanDescendingNode(e) {
          const t = {};
          return (
            (t.apparentLongitude = y.mod(e - 180, 360)),
            (t.apparentLongitudeString = y.decimalDegreesToDMSString(
              t.apparentLongitude
            )),
            (t.apparentLongitude30String = y.decimalDegreesToDMSString(
              y.mod(t.apparentLongitude, 30)
            )),
            t
          );
        }
      }
      const N = {
          calc: function (e, t, n, i, a) {
            var o, r;
            for (
              o = 1.974e-8 / (i.locals.SE * (1 + i.locals.qe)), r = 0;
              r < 3;
              r++
            )
              (i.locals.dp[r] =
                o *
                ((i.locals.pq * n[r]) / i.locals.SE -
                  (i.locals.ep * t[r]) / i.locals.SO)),
                (e[r] += i.locals.dp[r]);
            return (
              ((a = a || {}).sunElongation = Math.acos(-i.locals.ep) / s),
              (a.lightDeflection = y.showcor(e, i.locals.dp)),
              a
            );
          },
        },
        V = {
          calc: function (e, t, n, i, a) {
            const o = V.getP0(t, n);
            var r,
              s,
              c,
              l,
              u,
              h,
              d = [],
              p = [];
            c = 0;
            for (let e = 0; e < 3; e++) c += n[e] * n[e];
            c = Math.sqrt(c);
            for (let i = 0; i < 2; i++) {
              (r = 0), (s = 0);
              for (let e = 0; e < 3; e++)
                (u = (h = t[e]) - n[e]), (d[e] = u), (s += h * h), (r += u * u);
              (r = Math.sqrt(r)),
                (s = Math.sqrt(s)),
                (l =
                  (r + 1.97e-8 * Math.log((c + r + s) / (c - r + s))) /
                  173.1446327),
                (e = S.calc(a.Date.julian - l, e, t, p));
            }
            e.lightTime = 1440 * l;
            for (let i = 0; i < 3; i++)
              (u = t[i] - n[i]), (d[i] = u), (e.locals.dp[i] = u - o[i]);
            e.aberration = y.showcor(o, e.locals.dp);
            const m = new I(a.Date.julian, i);
            for (let e = 0; e < 3; e++) d[e] += m.vearth[e] * l;
            var g = y.deltap(d, o);
            (e.locals.dradt = g.dr),
              (e.locals.ddecdt = g.dd),
              (e.locals.dradt /= l),
              (e.locals.ddecdt /= l);
          },
          getP0: (e, t) => {
            let n = [];
            for (let i = 0; i < 3; i++) n[i] = e[i] - t[i];
            return n;
          },
        },
        J = (e) => {
          switch (e) {
            case "mercury":
              return 15;
            case "venus":
              return 30;
            case "mars":
              return 60;
            case "jupiter":
              return 100;
            case "saturn":
              return 120;
            case "uranus":
            case "neptune":
              return 140;
            case "pluto":
              return 160;
            case "chiron":
              return 120;
            default:
              return 100;
          }
        },
        Q = ({
          utcDate: e,
          apparentLongitude: t,
          nextMovementAmount: n,
          interval: i,
        } = {}) => ({
          date: e,
          apparentLongitude: t,
          nextMovementAmount: n,
          interval: i,
        }),
        F = ({
          direction: e = "next",
          unit: t = "date",
          amount: n = 0,
          utcDate: i,
        } = {}) => {
          if (!["next", "prev"].includes(e))
            throw new Error(
              `Please pass in direction from the following: 'next' or 'prev'. Not "${e}".`
            );
          if (!["date", "hour", "minute", "second"].includes(t))
            throw new Error(
              `Please pass in unit from the following: 'date', 'hour', 'minute', or 'second'. Not "${t}".`
            );
          if (!n) throw new Error("Please enter an amount");
          const a = y.cloneUTCDate(i),
            o = "next" === e ? n : -1 * n;
          return (
            "date" === t
              ? a.setUTCDate(i.getUTCDate() + o)
              : "hour" === t
              ? a.setUTCHours(i.getUTCHours() + o)
              : "minute" === t
              ? a.setUTCMinutes(i.getUTCMinutes() + o)
              : "second" === t && a.setUTCSeconds(i.getUTCSeconds() + o),
            a
          );
        },
        Z = (e, t, n) => {
          if (!e)
            throw new Error(
              'Please provide a celestial body key. Ex: "mercury".'
            );
          return (
            n || (n = ee(e, t)),
            te(
              n,
              ee(
                e,
                F({ amount: 1, direction: "next", unit: "second", utcDate: t })
              )
            )
          );
        },
        Y = (e, t) => {
          const n = new Ae({
            year: t.getUTCFullYear(),
            month: t.getUTCMonth(),
            day: t.getUTCDate(),
            hours: t.getUTCHours(),
            minutes: t.getUTCMinutes(),
            seconds: t.getUTCSeconds(),
            key: e,
            calculateMotion: !0,
            calculateShadows: !1,
            calcHelioCentricLongitudesOnly: !0,
          });
          return {
            currentApparentLongitude: n[e].position.apparentLongitude,
            currentMovementAmount: n[e].motion.oneSecondMotionAmount,
          };
        },
        W = (e) => e <= 0,
        X = (e) => e > 0,
        ee = (e, t) => {
          if (!e)
            throw new Error(
              'Please provide a celestial body key. Ex: "mercury".'
            );
          return new Ae({
            year: t.getUTCFullYear(),
            month: t.getUTCMonth(),
            day: t.getUTCDate(),
            hours: t.getUTCHours(),
            minutes: t.getUTCMinutes(),
            seconds: t.getUTCSeconds(),
            key: e,
            calculateMotion: !1,
            calculateShadows: !1,
            calcHelioCentricLongitudesOnly: !0,
          })[e].position.apparentLongitude;
        },
        te = (e, t) => {
          const n = y.getModuloDifference(t, e, 360);
          return y.correctRealModuloNumber(n, t, e, 360);
        },
        ne = (e, t, n, i) => ({
          intervalAmount: Math.max(Math.floor(e / 2), 0),
          currentDate: y.cloneUTCDate(t),
          currentApparentLongitude: n,
          currentMovementAmount: i,
        }),
        ie = ({
          direction: e = "next",
          bodyKey: t,
          utcDate: n,
          currentApparentLongitude: i = null,
          currentMovementAmount: a = null,
        } = {}) => {
          if (!["next", "prev"].includes(e))
            throw new Error(
              `Please pass in direction from the following: 'next' or 'prev'. Not "${e}".`
            );
          i || (i = ee(t, n));
          let o = y.cloneUTCDate(n);
          if ((0 === a || a || (a = Z(t, n, i)), W(a))) {
            if ("next" === e) {
              const e = re({
                direction: "next",
                bodyKey: t,
                utcDate: o,
                currentApparentLongitude: i,
                currentMovementAmount: a,
              });
              return oe({
                direction: "next",
                bodyKey: t,
                utcDate: e.date,
                currentApparentLongitude: e.apparentLongitude,
                currentMovementAmount: e.nextMovementAmount,
              });
            }
            if ("prev" === e) {
              const e = re({
                  direction: "prev",
                  bodyKey: t,
                  utcDate: o,
                  currentApparentLongitude: i,
                  currentMovementAmount: a,
                }),
                n = F({
                  direction: "next",
                  amount: 1,
                  unit: "second",
                  utcDate: e.date,
                });
              return (
                ({ currentApparentLongitude: i, currentMovementAmount: a } = Y(
                  t,
                  n
                )),
                Q({
                  utcDate: n,
                  apparentLongitude: i,
                  nextMovementAmount: a,
                  interval: "second",
                })
              );
            }
          } else {
            if ("next" === e)
              return oe({
                direction: "next",
                bodyKey: t,
                utcDate: n,
                currentApparentLongitude: i,
                currentMovementAmount: a,
              });
            if ("prev" === e) {
              const e = oe({
                  direction: "prev",
                  bodyKey: t,
                  utcDate: o,
                  currentApparentLongitude: i,
                  currentMovementAmount: a,
                }),
                n = re({
                  direction: "prev",
                  bodyKey: t,
                  utcDate: e.date,
                  currentApparentLongitude: e.apparentLongitude,
                  currentMovementAmount: e.nextMovementAmount,
                }),
                r = F({
                  direction: "next",
                  amount: 1,
                  unit: "second",
                  utcDate: n.date,
                });
              return (
                ({ currentApparentLongitude: i, currentMovementAmount: a } = Y(
                  t,
                  r
                )),
                Q({
                  utcDate: r,
                  apparentLongitude: i,
                  nextMovementAmount: a,
                  interval: "second",
                })
              );
            }
          }
        },
        ae = ({
          direction: e = "next",
          bodyKey: t,
          utcDate: n,
          currentApparentLongitude: i = null,
          currentMovementAmount: a = null,
        } = {}) => {
          if (!["next", "prev"].includes(e))
            throw new Error(
              `Please pass in direction from the following: 'next' or 'prev'. Not "${e}".`
            );
          i || (i = ee(t, n));
          let o = y.cloneUTCDate(n);
          if ((0 === a || a || (a = Z(t, n, i)), X(a))) {
            if ("next" === e) {
              const e = oe({
                direction: "next",
                bodyKey: t,
                utcDate: o,
                currentApparentLongitude: i,
                currentMovementAmount: a,
              });
              return re({
                direction: "next",
                bodyKey: t,
                utcDate: e.date,
                currentApparentLongitude: e.apparentLongitude,
                currentMovementAmount: e.nextMovementAmount,
              });
            }
            if ("prev" === e) {
              const e = oe({
                  direction: "prev",
                  bodyKey: t,
                  utcDate: o,
                  currentApparentLongitude: i,
                  currentMovementAmount: a,
                }),
                n = F({
                  direction: "next",
                  amount: 1,
                  unit: "second",
                  utcDate: e.date,
                });
              return (
                ({ currentApparentLongitude: i, currentMovementAmount: a } = Y(
                  t,
                  n
                )),
                Q({
                  utcDate: n,
                  apparentLongitude: i,
                  nextMovementAmount: a,
                  interval: "second",
                })
              );
            }
          } else {
            if ("next" === e)
              return re({
                direction: "next",
                bodyKey: t,
                utcDate: n,
                currentApparentLongitude: i,
                currentMovementAmount: a,
              });
            if ("prev" === e) {
              const e = re({
                  direction: "prev",
                  bodyKey: t,
                  utcDate: o,
                  currentApparentLongitude: i,
                  currentMovementAmount: a,
                }),
                n = oe({
                  direction: "prev",
                  bodyKey: t,
                  utcDate: e.date,
                  currentApparentLongitude: e.apparentLongitude,
                  currentMovementAmount: e.nextMovementAmount,
                }),
                r = F({
                  direction: "next",
                  amount: 1,
                  unit: "second",
                  utcDate: n.date,
                });
              return (
                ({ currentApparentLongitude: i, currentMovementAmount: a } = Y(
                  t,
                  r
                )),
                Q({
                  utcDate: r,
                  apparentLongitude: i,
                  nextMovementAmount: a,
                  interval: "second",
                })
              );
            }
          }
        },
        oe = ({
          bodyKey: e,
          utcDate: t,
          currentApparentLongitude: n = null,
          direction: i = "next",
          currentMovementAmount: a = null,
        } = {}) => {
          if (!["next", "prev"].includes(i))
            throw new Error(
              `Please pass in direction from the following: 'next' or 'prev'. Not "${i}".`
            );
          n || (n = ee(e, t));
          let o,
            r,
            s,
            c = y.cloneUTCDate(t);
          if ((0 === a || a || (a = Z(e, t, n)), W(a)))
            return Q({
              utcDate: c,
              apparentLongitude: n,
              nextMovementAmount: a,
              interval: "second",
            });
          let l = c,
            u = n,
            h = a;
          for (r = J(e); r > 0; ) {
            const t = i;
            (o = "date"),
              (l = y.cloneUTCDate(c)),
              (u = n),
              (h = a),
              (c = y.cloneUTCDate(c)).setUTCHours(0),
              c.setUTCMinutes(0),
              c.setUTCSeconds(0),
              (c = F({ amount: r, direction: t, unit: o, utcDate: c })),
              ({ currentApparentLongitude: n, currentMovementAmount: a } = Y(
                e,
                c
              )),
              W(a) &&
                ({
                  intervalAmount: r,
                  currentDate: c,
                  currentApparentLongitude: n,
                  currentMovementAmount: a,
                } = ne(r, l, u, h));
          }
          for (
            s = y.cloneUTCDate(l),
              c = s = F({ amount: 1, direction: "prev", unit: o, utcDate: s }),
              { currentApparentLongitude: n, currentMovementAmount: a } = Y(
                e,
                c
              ),
              r = 12;
            r > 0;

          ) {
            const t = "next";
            (o = "hour"),
              (l = y.cloneUTCDate(c)),
              (u = n),
              (h = a),
              (c = y.cloneUTCDate(c)).setUTCMinutes(0),
              c.setUTCSeconds(0),
              (c = F({ amount: r, direction: t, unit: o, utcDate: c })),
              ({ currentApparentLongitude: n, currentMovementAmount: a } = Y(
                e,
                c
              )),
              ("next" === i ? W(a) : X(a)) &&
                ({
                  intervalAmount: r,
                  currentDate: c,
                  currentApparentLongitude: n,
                  currentMovementAmount: a,
                } = ne(r, l, u, h));
          }
          for (
            s = y.cloneUTCDate(l),
              c = s = F({ amount: 1, direction: "prev", unit: o, utcDate: s }),
              { currentApparentLongitude: n, currentMovementAmount: a } = Y(
                e,
                c
              ),
              r = 30;
            r > 0;

          ) {
            const t = "next";
            (o = "minute"),
              (l = y.cloneUTCDate(c)),
              (u = n),
              (h = a),
              (c = y.cloneUTCDate(c)).setUTCSeconds(0),
              (c = F({ amount: r, direction: t, unit: o, utcDate: c })),
              ({ currentApparentLongitude: n, currentMovementAmount: a } = Y(
                e,
                c
              )),
              ("next" === i ? W(a) : X(a)) &&
                ({
                  intervalAmount: r,
                  currentDate: c,
                  currentApparentLongitude: n,
                  currentMovementAmount: a,
                } = ne(r, l, u, h));
          }
          for (
            s = y.cloneUTCDate(l),
              c = s = F({ amount: 1, direction: "prev", unit: o, utcDate: s }),
              { currentApparentLongitude: n, currentMovementAmount: a } = Y(
                e,
                c
              ),
              r = 10;
            r > 0;

          ) {
            const t = "next";
            if (
              ((o = "second"),
              (l = y.cloneUTCDate(c)),
              (u = n),
              (h = a),
              (c = F({ amount: r, direction: t, unit: o, utcDate: c })),
              ({ currentApparentLongitude: n, currentMovementAmount: a } = Y(
                e,
                c
              )),
              "next" === i ? W(a) : X(a))
            ) {
              if (1 === r) {
                return Q({
                  utcDate: "next" === i ? c : l,
                  apparentLongitude: "next" === i ? n : u,
                  nextMovementAmount: "next" === i ? a : h,
                  interval: o,
                });
              }
              ({
                intervalAmount: r,
                currentDate: c,
                currentApparentLongitude: n,
                currentMovementAmount: a,
              } = ne(r, l, u, h));
            }
            r < 4 && r > 0 && (r = 1);
          }
        },
        re = ({
          bodyKey: e,
          utcDate: t,
          currentApparentLongitude: n = null,
          direction: i = "next",
          currentMovementAmount: a = null,
        } = {}) => {
          if (!["next", "prev"].includes(i))
            throw new Error(
              `Please pass in direction from the following: 'next' or 'prev'. Not "${i}".`
            );
          n || (n = ee(e, t));
          let o,
            r,
            s,
            c = y.cloneUTCDate(t);
          if ((0 === a || a || (a = Z(e, t, n)), X(a)))
            return Q({
              utcDate: t,
              apparentLongitude: n,
              nextMovementAmount: a,
              interval: "second",
            });
          let l = c,
            u = n,
            h = a;
          for (r = J(e); r > 0; ) {
            const t = i;
            (o = "date"),
              (l = y.cloneUTCDate(c)),
              (u = n),
              (h = a),
              (c = y.cloneUTCDate(c)).setUTCHours(0),
              c.setUTCMinutes(0),
              c.setUTCSeconds(0),
              (c = F({ amount: r, direction: t, unit: o, utcDate: c })),
              ({ currentApparentLongitude: n, currentMovementAmount: a } = Y(
                e,
                c
              )),
              X(a) &&
                ({
                  intervalAmount: r,
                  currentDate: c,
                  currentApparentLongitude: n,
                  currentMovementAmount: a,
                } = ne(r, l, u, h));
          }
          for (
            s = y.cloneUTCDate(l),
              c = s = F({ amount: 1, direction: "prev", unit: o, utcDate: s }),
              { currentApparentLongitude: n, currentMovementAmount: a } = Y(
                e,
                c
              ),
              r = 12;
            r > 0;

          ) {
            const t = "next";
            (o = "hour"),
              (l = y.cloneUTCDate(c)),
              (u = n),
              (h = a),
              (c = y.cloneUTCDate(c)).setUTCMinutes(0),
              c.setUTCSeconds(0),
              (c = F({ amount: r, direction: t, unit: o, utcDate: c })),
              ({ currentApparentLongitude: n, currentMovementAmount: a } = Y(
                e,
                c
              )),
              ("next" === i ? X(a) : W(a)) &&
                ({
                  intervalAmount: r,
                  currentDate: c,
                  currentApparentLongitude: n,
                  currentMovementAmount: a,
                } = ne(r, l, u, h));
          }
          for (
            s = y.cloneUTCDate(l),
              c = s = F({ amount: 1, direction: "prev", unit: o, utcDate: s }),
              { currentApparentLongitude: n, currentMovementAmount: a } = Y(
                e,
                c
              ),
              r = 30;
            r > 0;

          ) {
            const t = "next";
            (o = "minute"),
              (l = y.cloneUTCDate(c)),
              (u = n),
              (h = a),
              (c = y.cloneUTCDate(c)).setUTCSeconds(0),
              (c = F({ amount: r, direction: t, unit: o, utcDate: c })),
              ({ currentApparentLongitude: n, currentMovementAmount: a } = Y(
                e,
                c
              )),
              ("next" === i ? X(a) : W(a)) &&
                ({
                  intervalAmount: r,
                  currentDate: c,
                  currentApparentLongitude: n,
                  currentMovementAmount: a,
                } = ne(r, l, u, h));
          }
          for (
            s = y.cloneUTCDate(l),
              c = s = F({ amount: 1, direction: "prev", unit: o, utcDate: s }),
              { currentApparentLongitude: n, currentMovementAmount: a } = Y(
                e,
                c
              ),
              r = 10;
            r > 0;

          ) {
            const t = "next";
            if (
              ((o = "second"),
              (l = y.cloneUTCDate(c)),
              (u = n),
              (h = a),
              (c = F({ amount: r, direction: t, unit: o, utcDate: c })),
              ({ currentApparentLongitude: n, currentMovementAmount: a } = Y(
                e,
                c
              )),
              "next" === i ? X(a) : W(a))
            ) {
              if (1 === r) {
                return Q({
                  utcDate: "next" === i ? c : l,
                  apparentLongitude: "next" === i ? n : u,
                  nextMovementAmount: "next" === i ? a : h,
                  interval: o,
                });
              }
              ({
                intervalAmount: r,
                currentDate: c,
                currentApparentLongitude: n,
                currentMovementAmount: a,
              } = ne(r, l, u, h));
            }
            r < 4 && r > 0 && (r = 1);
          }
        };
      class se {
        constructor(e, t, n, i, a = !1, o = !1) {
          (this._earthBody = t),
            (this._observer = n),
            (this._calculateMotion = i),
            (this._body = this.calculateBody(
              e,
              this._earthBody,
              this._observer,
              a
            )),
            Object.keys(this._body)
              .filter((e) => "_body" !== e)
              .forEach((e) => {
                this[e] = this._body[e];
              }),
            (this.calculateBody = this.calculateBody.bind(this)),
            (this.reduceBody = this.reduceBody.bind(this)),
            (this.calculateMotion = this.calculateMotion.bind(this)),
            i ? this.calculateMotion(e, n, o) : (this.motion = {});
        }
        calculateBody(e, t, n, i = !1) {
          return (
            e.semiAxis ||
              (e.semiAxis = e.perihelionDistance / (1 - e.eccentricity)),
            (e = S.calc(n.Date.julian, e)),
            this.reduceBody(e, e.position.rect, t.position.rect, t, n, i)
          );
        }
        calculateMotion(e, t, n = !1) {
          if (
            ((this.motion = {}),
            (this.motion.oneSecondMotionAmount = te(
              this.position.apparentLongitude,
              ee(
                e.key,
                F({
                  direction: "next",
                  unit: "second",
                  amount: 1,
                  utcDate: t.Date.utc,
                }),
                t
              )
            )),
            (this.motion.isRetrograde = !!(
              this.motion.oneSecondMotionAmount <= 0
            )),
            n)
          ) {
            if (!this.motion.isRetrograde) {
              const n = ie({
                direction: "next",
                utcDate: t.Date.utc,
                bodyKey: e.key,
                currentApparentLongitude: this.position.apparentLongitude,
                currentMovementAmount: this.motion.oneSecondMotionAmount,
              });
              (this.motion.nextRetrogradeDate = n.date),
                (this.motion.nextRetrogradeApparentLongitude =
                  n.apparentLongitude);
              const i = ae({
                direction: "next",
                utcDate: n.date,
                bodyKey: e.key,
                currentApparentLongitude: n.apparentLongitude,
                currentMovementAmount: n.nextMovementAmount,
              });
              (this.motion.nextDirectDate = i.date),
                (this.motion.nextDirectApparentLongitude = i.apparentLongitude);
            }
            if (
              ((this.motion.withinPreRetrogradeShadow =
                !this.motion.isRetrograde &&
                this.position.apparentLongitude >=
                  this.motion.nextDirectApparentLongitude &&
                this.position.apparentLongitude <=
                  this.motion.nextRetrogradeApparentLongitude),
              !this.motion.isRetrograde &&
                !this.motion.withinPreRetrogradeShadow)
            ) {
              const n = ie({
                direction: "prev",
                utcDate: t.Date.utc,
                bodyKey: e.key,
                currentApparentLongitude: this.position.apparentLongitude,
                currentMovementAmount: this.motion.oneSecondMotionAmount,
              });
              (this.motion.prevRetrogradeDate = n.date),
                (this.motion.prevRetrogradeApparentLongitude =
                  n.apparentLongitude);
              const i = ae({
                direction: "next",
                utcDate: n.date,
                bodyKey: e.key,
                currentApparentLongitude: n.apparentLongitude,
                currentMovementAmount: n.nextMovementAmount,
              });
              (this.motion.prevDirectDate = i.date),
                (this.motion.prevDirectApparentLongitude = i.apparentLongitude);
            }
            this.motion.withinPostRetrogradeShadow =
              !this.motion.isRetrograde &&
              !this.motion.withinPreRetrogradeShadow &&
              this.position.apparentLongitude >=
                this.motion.prevDirectApparentLongitude &&
              this.position.apparentLongitude <=
                this.motion.prevRetrogradeApparentLongitude;
          }
        }
        reduceBody(e, t, n, i, o, r = !1) {
          var s,
            l,
            u,
            h,
            d,
            p,
            m = [],
            g = [],
            f = [];
          for (p = 0; p < 3; p++) g[p] = t[p];
          for (
            r || (e.equinoxEclipticLonLat = R.calc(t, o.Date, f, 1)),
              V.calc(e, t, n, i, o),
              p = 0;
            p < 3;
            p++
          )
            m[p] = t[p] - n[p];
          if (((e = y.angles(m, t, n, e)), !r)) {
            for (s = 0, p = 0; p < 3; p++) s += (l = g[p] - n[p]) * l;
            for (
              s = Math.sqrt(s),
                e.position.trueGeocentricDistance = s,
                e.position.equatorialDiameter =
                  (2 * e.semiDiameter) / e.locals.EO,
                u = 0,
                d = 0,
                p = 0;
              p < 3;
              p++
            )
              u += (d = m[p]) * d;
            (u = Math.sqrt(u)),
              (s = 0.5 * (1 + e.locals.pq)),
              (l = 0.5 * (1.01 + 0.99 * e.locals.pq)),
              (h =
                e.magnitude +
                2.1715 * Math.log(e.locals.EO * e.locals.SO) -
                1.085 * Math.log(l)),
              (e.position.approxVisual = { magnitude: h, phase: s });
          }
          for (p = 0; p < 3; p++) (m[p] /= e.locals.EO), (g[p] = m[p]);
          for (
            r ||
              ((e.position.astrometricJ2000 = y.showrd(m, f)),
              (g = C.calc(g, a, -1)),
              (e.position.astrometricB1950 = y.showrd(g, f))),
              e.position.deflection = N.calc(m, t, n, e),
              e.position.aberration = z.calc(m, i, o, e),
              m = C.calc(m, o.Date.julian, -1),
              e.position.nutation = j.calc(o.Date, m),
              r || (e.position.constellation = k.calc(m, o.Date)),
              r || (e.position.apparent = y.showrd(m, f)),
              p = 0;
            p < 3;
            p++
          )
            m[p] *= e.locals.EO;
          return (
            (e.position.apparentGeocentric = R.calc(m, o.Date, g, 0)),
            (e.position.apparentLongitude =
              e.position.apparentGeocentric[0] * c),
            r ||
              ((e.position.apparentLongitudeString =
                e.position.apparentGeocentric[3].degree +
                "Â°" +
                e.position.apparentGeocentric[3].minutes +
                "'" +
                Math.floor(e.position.apparentGeocentric[3].seconds) +
                '"'),
              (e.position.apparentLongitude30String =
                y.mod30(e.position.apparentGeocentric[3].degree) +
                "Â°" +
                e.position.apparentGeocentric[3].minutes +
                "'" +
                Math.floor(e.position.apparentGeocentric[3].seconds) +
                '"'),
              (e.position.geocentricDistance = u),
              (f[2] = e.locals.EO),
              (e.position.altaz = O.calc(f, o.Date, e, o))),
            e
          );
        }
      }
      const ce = {
        A: [-162557e-11, -3.1919e-7, -1.3843e-7],
        Ad: [0.001244, -0.001579, -66e-5],
        Mat: [
          0.9999256782, -0.0111820611, -0.0048579477, 242395018e-14,
          -2.710663e-8, -1.177656e-8, 0.011182061, 0.9999374784, -271765e-10,
          2.710663e-8, 242397878e-14, -6587e-14, 0.0048579479, -271474e-10,
          0.9999881997, 1.177656e-8, -6582e-14, 242410173e-14, -551e-6,
          -0.238565, 0.435739, 0.99994704, -0.01118251, -0.00485767, 0.238514,
          -0.002667, -0.008541, 0.01118251, 0.99995883, -2718e-8, -0.435623,
          0.012254, 0.002117, 0.00485767, -2714e-8, 1.00000956,
        ],
        calc: function (e, t, n) {
          var a,
            o,
            r,
            s,
            c,
            u,
            h,
            d = [];
          for (a = 0, o = 0, u = 0; u < 3; u++)
            (t[u] *= l), (a += this.A[u] * e[u]), (o += this.Ad[u] * e[u]);
          for (u = 0; u < 3; u++)
            (d[u] = e[u] - this.A[u] + a * e[u]),
              (d[u + 3] = t[u] - this.Ad[u] + o * e[u]);
          var p = 0,
            m = 0;
          for (c = this.Mat, u = 0; u < 6; u++) {
            for (a = 0, s = d, h = 0; h < 6; h++) a += s[p++] * c[m++];
            u < 3 ? (e[u] = a) : (t[u - 3] = a);
          }
          if (
            ((r = a = (o = e[0] * e[0] + e[1] * e[1]) + e[2] * e[2]),
            (a = Math.sqrt(a)),
            (n.ra = y.zatan2(e[0], e[1])),
            (n.dec = Math.asin(e[2] / a)),
            (n.raMotion = (e[0] * t[1] - e[1] * t[0]) / (l * o)),
            (n.decMotion =
              (t[2] * o - e[2] * (e[0] * t[0] + e[1] * t[1])) /
              (l * r * Math.sqrt(o))),
            n.parallax > 0)
          ) {
            for (r = 0, u = 0; u < 3; u++) r += e[u] * t[u];
            n.velocity = r / (21.094952663 * n.parallax * l * a);
          }
          return (n.parallax = n.parallax / a), (n.epoch = i), n;
        },
      };
      class le {
        constructor(e, t, n) {
          (this._body = this.calculateBody(e, t, n)),
            Object.keys(this._body).forEach((e) => {
              this[e] = this._body[e];
            }),
            (this.motion = {}),
            (this.prepareBody = this.prepareBody.bind(this)),
            (this.calculateBody = this.calculateBody.bind(this)),
            (this.reduceBody = this.reduceBody.bind(this));
        }
        prepareBody(e) {
          var t, n, r;
          return (
            (n =
              2e3 == (n = e.epoch)
                ? i
                : 1950 == n
                ? a
                : 1900 == n
                ? o
                : i + 365.25 * (n - 2e3)),
            (e.epoch = n),
            e.ra ||
              (e.ra =
                (2 *
                  Math.PI *
                  (3600 * e.hmsRa.hours +
                    60 * e.hmsRa.minutes +
                    e.hmsRa.seconds)) /
                86400),
            e.dec ||
              ((t = 1),
              (e.hmsDec.hours < 0 ||
                e.hmsDec.minutes < 0 ||
                e.hmsDec.seconds < 0) &&
                (t = -1),
              (r =
                (3600 * Math.abs(e.hmsDec.hours) +
                  60 * Math.abs(e.hmsDec.minutes) +
                  Math.abs(e.hmsDec.seconds)) /
                l),
              t < 0 && (r = -r),
              (e.dec = r)),
            (e.raMotion *= 15 / l),
            (e.decMotion /= l),
            (r = e.parallax),
            (e.parallax = r < 1 ? (r <= 0 ? 0 : u * r) : 1 / (l * r)),
            e
          );
        }
        calculateBody(e, t, n) {
          return (
            ((e = this.prepareBody(e)).isPrepared = !0),
            this.reduceBody(e, t, n)
          );
        }
        reduceBody(e, t, n) {
          var i,
            o,
            r,
            s,
            c,
            l,
            u,
            h,
            d = [],
            p = [],
            m = [],
            g = [],
            f = [],
            M = [];
          do {
            (s = Math.cos(e.dec)),
              (c = Math.sin(e.dec)),
              (l = Math.cos(e.ra)),
              (u = Math.sin(e.ra)),
              (p[0] = l * s),
              (p[1] = u * s),
              (p[2] = c),
              (o = 21.094952663 * e.velocity * e.parallax),
              (g[0] = -e.raMotion * s * u - e.decMotion * c * l + o * p[0]),
              (g[1] = e.raMotion * s * l - e.decMotion * c * u + o * p[1]),
              (g[2] = e.decMotion * s + o * p[2]),
              (r = e.epoch) == a && (e = ce.calc(p, g, e));
          } while (r == a);
          for (h = 0; h < 3; h++) m[h] = t.position.rect[h];
          for (
            m = C.calc(m, r, -1),
              i = y.timeInJulianCenturies(n.Date.julian),
              h = 0;
            h < 3;
            h++
          )
            d[h] = p[h] + i * g[h] - e.parallax * m[h];
          for (d = C.calc(d, r, 1), h = 0; h < 3; h++)
            m[h] = t.position.rect[h];
          for (e = y.angles(d, d, m, e), h = 0; h < 3; h++)
            (d[h] /= e.locals.EO), (f[h] = d[h]);
          for (
            e.position = {},
              e.position.approxVisualMagnitude = e.magnitude,
              e.position.astrimetricJ2000 = y.showrd(d, M),
              f = C.calc(f, a, -1),
              e.position.astrimetricB1950 = y.showrd(f, M),
              h = 0;
            h < 3;
            h++
          )
            f[h] = d[h];
          (f = C.calc(f, n.Date.julian, -1)),
            (e.position.astrimetricDate = y.showrd(f, M)),
            (e.position.deflection = N.calc(d, d, m, e)),
            (e.position.aberration = z.calc(d, t, n, e)),
            (d = C.calc(d, n.Date.julian, -1)),
            j.calc(n.Date, d),
            (e.position.apparent = y.showrd(d, M)),
            (e.position.apparentLongitude = e.position.apparent.dRA);
          var v = y.dms(e.position.apparentLongitude);
          return (
            (e.position.apparentLongitudeString =
              v.degree + "Â°" + v.minutes + "'" + Math.floor(v.seconds) + '"'),
            (e.position.apparentLongitude30String =
              y.mod30(v.degree) +
              "Â°" +
              v.minutes +
              "'" +
              Math.floor(v.seconds) +
              '"'),
            (e.position.geocentricDistance = 7777),
            (e.locals.dradt = 0),
            (e.locals.ddecdt = 0),
            (M[2] = 1e38),
            (e.position.altaz = O.calc(M, n.Date, e, n)),
            e
          );
        }
      }
      const ue = {
        calcJulianDate: ({
          year: e = 0,
          month: t = 0,
          day: n = 0,
          hours: i = 0,
          minutes: a = 0,
          seconds: o = 0,
        } = {}) => {
          (e += 4800) < 0 && (e += 1), t <= 2 && ((t += 12), (e -= 1));
          const r = Math.floor(e / 100),
            s = Math.floor((306 * (t + 1)) / 10),
            c = Math.floor((36525 * e) / 100);
          let l = 0;
          return (
            e <= 1582
              ? 1582 == e
                ? (t < 10 && (l = -38),
                  (t > 10 || n >= 15) && (l = Math.floor(r / 4 - r)))
                : (l = -38)
              : (l = Math.floor(r / 4 - r)),
            l + c + s + n - 32167.5 + (3600 * i + 60 * a + o) / 86400
          );
        },
        calcJ2000: (e) => 2e3 + (e - i) / 365.25,
        calcB1950: (e) => 1950 + (e - a) / 365.25,
        calcJ1900: (e) => 1900 + (e - o) / 365.25,
        calcUniversalDate: (e) => {
          const t = ue.toGregorian(e);
          return new Date(
            Date.UTC(
              t.year,
              t.month - 1,
              t.day,
              t.hours,
              t.minutes,
              t.seconds,
              t.milliseconds
            )
          );
        },
        toGregorian: (e) => {
          let t = {};
          var n, i, a, o, r, s, c, l, u, h, d;
          return (
            (h = e < 1721423.5 ? 1 : 0),
            (u = Math.floor(e + 0.5)),
            (o = Math.floor((100 * u + 3204500) / 3652425)),
            (r = u + 1486),
            (r += u >= 2299160.5 ? o - Math.floor(o / 4) : 38),
            (s = Math.floor((100 * r - 12210) / 36525)),
            (c = Math.floor((36525 * s) / 100)),
            (l = Math.floor((100 * (r - c)) / 3061)),
            (i = Math.floor(r - c - Math.floor((306 * l) / 10))),
            (n = Math.floor(l - 1)),
            l > 13 && (n -= 12),
            (a = s - 4715),
            n > 2 && (a -= 1),
            (d = i + e - u + 0.5),
            h && (a -= 1),
            (t.year = a),
            (t.month = n),
            (t.day = Math.floor(d)),
            (d -= o = Math.floor(d)),
            (c = 2 * Math.PI * d),
            (t = { ...t, ...y.hms(c) })
          );
        },
      };
      class he {
        constructor() {
          (this.m_s = [
            25428, 23700, 22e3, 21e3, 19040, 17190, 15530, 14080, 12790, 11640,
            10580, 9600, 8640, 7680, 6700, 5710, 4740, 3810, 2960, 2200, 1570,
            1090, 740, 490, 320, 200, 120, 9,
          ]),
            (this.dt = [
              12400, 11900, 11500, 11e3, 10600, 10200, 9800, 9500, 9100, 8800,
              8500, 8200, 7900, 7700, 7400, 7200, 7e3, 6700, 6500, 6300, 6200,
              6e3, 5800, 5700, 5500, 5400, 5300, 5100, 5e3, 4900, 4800, 4700,
              4600, 4500, 4400, 4300, 4200, 4100, 4e3, 3800, 3700, 3600, 3500,
              3400, 3300, 3200, 3100, 3e3, 2800, 2700, 2600, 2500, 2400, 2300,
              2200, 2100, 2e3, 1900, 1800, 1700, 1600, 1500, 1400, 1400, 1300,
              1200, 1200, 1100, 1100, 1e3, 1e3, 1e3, 900, 900, 900, 900, 900,
              900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 1e3, 1e3,
              1e3, 1e3, 1e3, 1e3, 1e3, 1e3, 1e3, 1100, 1100, 1100, 1100, 1100,
              1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
              1100, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
              1300, 1300, 1300, 1300, 1300, 1300, 1300, 1400, 1400, 1400, 1400,
              1400, 1400, 1400, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1600,
              1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1700, 1700,
              1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700,
              1700, 1700, 1700, 1700, 1600, 1600, 1600, 1600, 1500, 1500, 1400,
              1400, 1370, 1340, 1310, 1290, 1270, 1260, 1250, 1250, 1250, 1250,
              1250, 1250, 1250, 1250, 1250, 1250, 1250, 1240, 1230, 1220, 1200,
              1170, 1140, 1110, 1060, 1020, 960, 910, 860, 800, 750, 700, 660,
              630, 600, 580, 570, 560, 560, 560, 570, 580, 590, 610, 620, 630,
              650, 660, 680, 690, 710, 720, 730, 740, 750, 760, 770, 770, 780,
              780, 788, 782, 754, 697, 640, 602, 541, 410, 292, 182, 161, 10,
              -102, -128, -269, -324, -364, -454, -471, -511, -540, -542, -520,
              -546, -546, -579, -563, -564, -580, -566, -587, -601, -619, -664,
              -644, -647, -609, -576, -466, -374, -272, -154, -2, 124, 264, 386,
              537, 614, 775, 913, 1046, 1153, 1336, 1465, 1601, 1720, 1824,
              1906, 2025, 2095, 2116, 2225, 2241, 2303, 2349, 2362, 2386, 2449,
              2434, 2408, 2402, 2400, 2387, 2395, 2386, 2393, 2373, 2392, 2396,
              2402, 2433, 2483, 2530, 2570, 2624, 2677, 2728, 2778, 2825, 2871,
              2915, 2957, 2997, 3036, 3072, 3107, 3135, 3168, 3218, 3268, 3315,
              3359, 3400, 3447, 3503, 3573, 3654, 3743, 3829, 3920, 4018, 4117,
              4223, 4337, 4449, 4548, 4646, 4752, 4853, 4959, 5054, 5138, 5217,
              5296, 5379, 5434, 5487, 5532, 5582, 5630, 5686, 5757, 5831, 5912,
              5998, 6078, 6163, 6230, 6297, 6347, 6383, 6409, 6430, 6447, 6457,
              6469, 6485, 6515, 6546, 6578, 6607, 6632,
            ]),
            (this.demo = 0),
            (this.TABSTART = 1620),
            (this.TABEND = 2011),
            (this.TABSIZ = this.TABEND - this.TABSTART + 1),
            (this.CalcUniversal = this.CalcUniversal.bind(this));
        }
        CalcUniversal(e, t) {
          var n,
            i,
            a,
            o,
            r,
            s = [0, 0, 0, 0, 0, 0];
          let c;
          if (t > this.TABEND) {
            var l, u, h, d, p;
            if (t > this.TABEND + 100) c = 32 * (i = (t - 1820) / 100) * i - 20;
            else
              (l = this.dt[this.TABSIZ - 1] / 100),
                (u =
                  (this.dt[this.TABSIZ - 1] - this.dt[this.TABSIZ - 11]) / 1e3),
                (h =
                  1e-4 *
                  ((p = 32 * (i = (this.TABEND + 100 - 1820) / 100) * i - 20) -
                    l -
                    100 * u -
                    1e6 * (d = 2e-6 * (50 * (0.64 * i + u) - p + l)))),
                (c = l + (n = t - this.TABEND) * (u + n * (h + n * d)));
          } else {
            if (t < 1700)
              t <= -1e3
                ? (c = 32 * (i = (t - 1820) / 100) * i - 20)
                : ((o = Math.floor(t)),
                  (i = 100 * (o = Math.floor((o + 1e3) / 100)) - 1e3),
                  (c =
                    (n = this.m_s[o]) +
                    ((t - i) * (this.m_s[o + 1] - n)) / 100));
            else if (
              ((n = Math.floor(t)),
              (o = Math.floor(n - this.TABSTART)),
              (c = this.dt[o]),
              !(
                (r = o + 1) >= this.TABSIZ ||
                ((c += (n = t - n) * (this.dt[r] - this.dt[o])),
                o - 1 < 0 || o + 2 >= this.TABSIZ)
              ))
            ) {
              for (r = o - 2, a = 0; a < 5; a++)
                r < 0 || r + 1 >= this.TABSIZ
                  ? (s[a] = 0)
                  : (s[a] = this.dt[r + 1] - this.dt[r]),
                  (r += 1);
              for (a = 0; a < 4; a++) s[a] = s[a + 1] - s[a];
              if (
                ((c += (i = 0.25 * n * (n - 1)) * (s[1] + s[2])),
                !(o + 2 >= this.TABSIZ))
              ) {
                for (a = 0; a < 3; a++) s[a] = s[a + 1] - s[a];
                if (
                  ((c += (n - 0.5) * (i = (2 * i) / 3) * s[1]),
                  !(o - 2 < 0 || o + 3 > this.TABSIZ))
                ) {
                  for (a = 0; a < 2; a++) s[a] = s[a + 1] - s[a];
                  c += (i = 0.125 * i * (n + 1) * (n - 2)) * (s[0] + s[1]);
                }
              }
            }
            c /= 100;
          }
          return e - c / 86400;
        }
      }
      const de = (e) => {
          if ("number" == typeof e && e > 0) return e;
          throw new Error(
            `The year: "${e}" - must be an integer and > 0 (C.E.)`
          );
        },
        pe = (e) => {
          if ("number" == typeof e && e >= 0 && e <= 11) return e;
          throw new Error(
            `The month: "${e}" - must be an integer and between 0 - 11. (0 = January, 11 = December)`
          );
        },
        me = (e) => {
          if ("number" == typeof e && e >= 1 && e <= 31) return e;
          throw new Error(`The day: "${e} must be between 1 - 31`);
        },
        ge = (e) => {
          if ("number" == typeof e && e >= 0 && e <= 23) return e;
          throw new Error(
            `The hour: "${e}" - must be an integer and between 0 - 23. (0 = midnight 00:00, 23 = 11pm (23:00))`
          );
        },
        fe = (e) => {
          if ("number" == typeof e && e >= 0 && e <= 59) return e;
          throw new Error(
            `The minute: "${e}" - must be an integer and between 0 - 59`
          );
        },
        Me = (e) => {
          if ("number" == typeof e && e >= 0 && e <= 59) return e;
          throw new Error(
            `The second: "${e}" - must be an integer and between 0 - 59`
          );
        },
        ye = (e) => {
          if ("number" == typeof e && e >= -90 && e <= 90) return e;
          throw new Error(
            `The latitude: "${e}" - must be an float and between -90.00 to 90.00`
          );
        },
        ve = (e) => {
          if ("number" == typeof e && e >= -180 && e <= 180) return e;
          throw new Error(
            `The longitude: "${e}" - must be an float and between -180.00 to 180.00`
          );
        },
        De = (e) => {
          if ("number" == typeof e) return e;
          throw new Error(
            `Parameter value of: "${e}" - must be a number (int or float type).`
          );
        },
        be = (e) => {
          if (e) {
            if ("string" == typeof e) return [e.toLowerCase()];
            if (Array.isArray(e)) return e.map((e) => e.toLowerCase());
            throw new Error(
              `Key: ${e} is not a valid type. Please pass in a string: "mercury", an array: ["mercury", "venus", "mars"], or leave blank (for all).`
            );
          }
        };
      class _e {
        constructor({
          latitude: e = 0,
          longitude: t = 0,
          height: n = 0,
          year: i = 0,
          month: a = 0,
          day: o = 0,
          hours: r = 0,
          minutes: s = 0,
          seconds: c = 0,
        } = {}) {
          (this.year = de(i)),
            (this.month = pe(a)),
            (this.day = me(o)),
            (this.hours = ge(r)),
            (this.minutes = fe(s)),
            (this.seconds = Me(c)),
            (this.latitude = ye(e)),
            (this.longitude = ve(t)),
            (this.height = De(n)),
            (this.glat = e),
            this.tlat,
            (this.tlong = t),
            this.trho,
            (this.height = n),
            (this.attemp = 12),
            (this.atpress = 1010),
            (this.initialize = this.initialize.bind(this)),
            (this.CalculateDates = this.CalculateDates.bind(this)),
            this.initialize(),
            (this.Date = this.CalculateDates());
        }
        initialize() {
          let e, t, n, i, a, o;
          (o = this.glat * s),
            (i = Math.cos(o)),
            (a = Math.sin(o)),
            (n = 1 - 1 / d),
            (n *= n),
            (a *= a),
            (o = 1 / Math.sqrt(i * i + n * a)),
            (e = m * o + this.height),
            (t = m * n * o + this.height),
            (this.trho = Math.sqrt(e * e * i * i + t * t * a)),
            (this.tlat = c * Math.acos((e * i) / this.trho)),
            this.glat < 0 && (this.tlat = -this.tlat),
            (this.trho /= m);
        }
        CalculateDates() {
          const e = {
            year: this.year,
            month: this.month,
            day: this.day,
            hours: this.hours,
            minutes: this.minutes,
            seconds: this.seconds,
          };
          let t = {};
          return (
            (t.utc = new Date(
              Date.UTC(
                this.year,
                this.month,
                this.day,
                this.hours,
                this.minutes,
                this.seconds
              )
            )),
            (t.dateString = t.utc.toDateString()),
            (t.julian = ue.calcJulianDate({ ...e, month: e.month + 1 })),
            (t.j2000 = ue.calcJ2000(t.julian)),
            (t.b1950 = ue.calcB1950(t.julian)),
            (t.j1900 = ue.calcJ1900(t.julian)),
            (t.universalJulian = new he().CalcUniversal(t.julian, t.j2000)),
            (t.universalDate = ue.calcUniversalDate(t.universalJulian)),
            t
          );
        }
      }
      n.d(t, "default", function () {
        return Ae;
      });
      class Ae {
        constructor({
          year: e = 0,
          month: t = 0,
          day: n = 0,
          hours: i = 0,
          minutes: a = 0,
          seconds: o = 0,
          latitude: r = 0,
          longitude: s = 0,
          height: c = 0,
          key: l,
          moonQuarterApproximationValue: u = 1.5,
          calculateMotion: h = !0,
          calculateShadows: d = !1,
          calcHeliocentricLongitudesOnly: p = !1,
        } = {}) {
          (this._key = be(l)),
            (this._calculateMotion = h),
            (this._calcHeliocentricLongitudesOnly = p),
            (this._calculateShadows = d),
            (this._moonQuarterApproximationValue = u),
            (this.Observer = new _e({
              latitude: r,
              longitude: s,
              height: c,
              year: e,
              month: t,
              day: n,
              hours: i,
              minutes: a,
              seconds: o,
            })),
            (this.Earth = new E(new T("earth"), this.Observer.Date)),
            (this.Results = this.CalculateKeys()),
            this.Results.forEach((e) => {
              this[e.key] = e;
            }),
            (this.CalculateKeys = this.CalculateKeys.bind(this)),
            (this.CalculateBody = this.CalculateBody.bind(this));
        }
        CalculateKeys() {
          return this._key && this._key.length
            ? T.KeysExceptEarth.filter((e) => this._key.includes(e.key)).map(
                (e) => this.CalculateBody(e.key)
              )
            : T.KeysExceptEarth.map((e) => this.CalculateBody(e.key));
        }
        CalculateBody(e) {
          const t = new T(e);
          switch (t.type) {
            case "sun":
              return this._calcHeliocentricLongitudesOnly
                ? {}
                : new $(
                    t,
                    this.Earth,
                    this.Observer,
                    this._calcHeliocentricLongitudesOnly
                  );
            case "luna":
              return this._calcHeliocentricLongitudesOnly
                ? {}
                : new K({
                    body: t,
                    earthBody: this.Earth,
                    observer: this.Observer,
                    quarterApproximationValue:
                      this._moonQuarterApproximationValue,
                  });
            case "heliocentric":
              return new se(
                t,
                this.Earth,
                this.Observer,
                this._calculateMotion,
                this._calcHeliocentricLongitudesOnly,
                this._calculateShadows
              );
            case "star":
              return this._calcHeliocentricLongitudesOnly
                ? {}
                : new le(t, this.Earth, this.Observer);
            default:
              throw new Error(
                `Celestial body with key: "${e}" or type "${t.type}" not found.`
              );
          }
        }
        static CalculateDailyBody({
          startYear: e = 0,
          startMonth: t = 0,
          startDay: n = 0,
          endYear: i = 0,
          endMonth: a = 0,
          endDay: o = 0,
          hours: r = 12,
          minutes: s = 0,
          latitude: c = 0,
          longitude: l = 0,
          key: u = null,
        } = {}) {
          const h = new Date(Date.UTC(e, t, n, r, s, 0)),
            d = new Date(Date.UTC(i, a, o, r, s, 0)),
            p = [];
          let m = new Date(h);
          for (; m <= d; )
            p.push(new Date(m)), (m = new Date(m.setDate(m.getDate() + 1)));
          return p.map(
            (e) =>
              new Ae({
                year: e.getFullYear(),
                month: e.getMonth(),
                day: e.getDate(),
                hours: e.getHours(),
                minutes: e.getMinutes(),
                seconds: e.getSeconds(),
                latitude: c,
                longitude: l,
                key: u,
              })
          );
        }
      }
    },
  ]);
});
