import {
  degreesToRadians,
  normaliseDegree,
  radiansToDegrees,
} from "../../utils/math";
import { calculateAscensionDegree, convertToZodiacString } from "../utils";

export const calculateKochHouses = ({
  ascendant,
  descendant,
  midheaven,
  lowerMidheaven,
  latitude,
  obliquity,
  siderealTimeAngle,
}) => {
  const A = radiansToDegrees(
    Math.asin(
      Math.sin(degreesToRadians(siderealTimeAngle)) *
        Math.tan(degreesToRadians(latitude)) *
        Math.tan(degreesToRadians(obliquity))
    )
  );

  const cusps = [];
  const yDeg = latitude;
  const zDeg = obliquity;
  cusps.push(ascendant);
  cusps.push(
    calculateAscensionDegree({
      xDeg: siderealTimeAngle + A / 3 + 30,
      yDeg,
      zDeg,
    })
  );
  cusps.push(
    calculateAscensionDegree({
      xDeg: siderealTimeAngle + (2 * A) / 3 + 60,
      yDeg,
      zDeg,
    })
  );
  cusps.push(lowerMidheaven);
  cusps.push(
    calculateAscensionDegree({
      xDeg: siderealTimeAngle - (2 * A) / 3 - 60,
      yDeg,
      zDeg,
    }) + 180
  );
  cusps.push(
    calculateAscensionDegree({
      xDeg: siderealTimeAngle - A / 3 - 30,
      yDeg,
      zDeg,
    }) + 180
  );
  cusps.push(descendant);
  cusps.push(cusps[1] + 180);
  cusps.push(cusps[2] + 180);
  cusps.push(midheaven);
  cusps.push(cusps[4] + 180);
  cusps.push(cusps[5] + 180);
  return cusps.map((cusp) => ({
    degree: normaliseDegree(cusp),
    zodiacDegree: convertToZodiacString(cusp),
  }));
};
