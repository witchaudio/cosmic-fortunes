import Ephemeris from "../../lib/ephemeris/Ephemeris";
import Epsilon from "../../lib/ephemeris/utilities/Epsilon";
import { siderial } from "../../lib/ephemeris/utilities/siderial";
import { degreesToRadians, radiansToDegrees } from "../utils/math";
import { calculateAngles } from "./angles";
import { PLANETS } from "./consts";
import { calculateHouses } from "./houses";
import { calculatePlanets } from "./planets";

export default class ChartData {
  constructor({ dateTime, longitude, latitude }) {
    const date = this.calculateDate(dateTime);
    const ephemeris = this.calculateEphemeris({ date, longitude, latitude });
    const obliquity = this.calculateObliquity(ephemeris);
    const siderealTimeAngle = this.calculateSiderealTimeAngle({
      ephemeris,
      longitude,
    });

    this.angles = calculateAngles({
      siderealTimeAngle,
      latitude,
      obliquity,
    });
    this.planets = calculatePlanets({
      ephemeris,
    });
    this.houses = calculateHouses({
      latitude,
      obliquity,
      siderealTimeAngle,
      angles: this.angles,
    });
  }
  calculateDate({ year, month, day, hour, minute, offset }) {
    const date = new Date();
    date.setUTCFullYear(year);
    date.setUTCMonth(month - 1);
    date.setUTCDate(day);
    date.setUTCHours(hour + offset);
    date.setUTCMinutes(minute);
    return date;
  }
  calculateEphemeris({ date, longitude, latitude }) {
    return new Ephemeris({
      key: PLANETS,
      year: date.getUTCFullYear(),
      month: date.getUTCMonth(),
      day: date.getUTCDate(),
      hours: date.getUTCHours(),
      minutes: date.getUTCMinutes(),
      latitude,
      longitude,
    });
  }
  calculateSiderealTimeAngle({ ephemeris, longitude }) {
    const { Observer } = ephemeris;
    const date = Observer.CalculateDates();
    const siderealTime = radiansToDegrees(siderial.calc(date, longitude));
    return ((degreesToRadians(siderealTime) / 60 / 60) * 15) % 360;
  }
  calculateObliquity(ephemeris) {
    const { Observer } = ephemeris;
    const date = Observer.CalculateDates();
    return radiansToDegrees(new Epsilon(date.julian).eps);
  }
}
