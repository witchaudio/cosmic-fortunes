import ChartData from "../astro/ChartData";
import { SIGNS } from "../astro/consts";
import { testExampleBrazil } from "./test_examples/brazil";
import { testExampleIreland } from "./test_examples/ireland";

const testExamples = [testExampleIreland];
// const testExamples = [testExampleBrazil];
// const testExamples = [testExampleIreland, testExampleBrazil];

const houseOrder = [
  "House I",
  "House II",
  "House III",
  "House IV",
  "House V",
  "House VI",
  "House VII",
  "House VIII",
  "House IX",
  "House X",
  "House XI",
  "House XII",
];

const convertZodiacToSeconds = (zodiacString) => {
  const data = zodiacString.split(" ");
  const degree = Number(data[0].slice(0, -1));
  const minute = Number(data[1].slice(0, -1));
  const second = Number(data[2].slice(0, -1));
  const zodiacDegrees = SIGNS.indexOf(data[3]) * 30;
  return (zodiacDegrees + degree) * 3600 + minute * 60 + second;
};

const getDifferenceInSeconds = (a, b) => {
  const aSeconds = convertZodiacToSeconds(a);
  const bSeconds = convertZodiacToSeconds(b);
  return Math.abs(aSeconds - bSeconds);
};

const runTests = ({
  description = "",
  expectedValues = {},
  chartDataValues = {},
  transformKey = (key) => key,
}) =>
  describe(description, () => {
    Object.keys(chartDataValues).map((key) =>
      it(`calculates position for ${transformKey(key)} (${
        expectedValues[key].zodiacDegree
      })`, () => {
        const difference = getDifferenceInSeconds(
          expectedValues[key].zodiacDegree,
          chartDataValues[key].zodiacDegree
        );
        console.log(transformKey(key), { difference });
        expect(difference).toBeLessThan(60);
      })
    );
  });

const testAngles = ({ chartData, angles }) =>
  runTests({
    description: "The angles of the chart",
    expectedValues: angles,
    chartDataValues: chartData.angles,
  });

const testPlanets = ({ chartData, planets }) =>
  runTests({
    description: "The planets of the chart",
    expectedValues: planets,
    chartDataValues: chartData.planets,
  });

const testHouses = ({ chartData, houses }) =>
  houses.map(({ id, description, cusps }) =>
    runTests({
      description,
      expectedValues: cusps,
      chartDataValues: chartData.houses[id],
      transformKey: (key) => houseOrder[key],
    })
  );

describe("Chart Data", () => {
  testExamples.map((example) => {
    const { location, data, angles, planets, houses } = example;

    describe(`${location} Example`, () => {
      const chartData = new ChartData(data);
      testAngles({ chartData, angles });
      testPlanets({ chartData, planets });
      testHouses({ chartData, houses });
    });
  });
});
